// Code generated by go-swagger; DO NOT EDIT.

package sensors

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewCreateSensorUsingPOSTParams creates a new CreateSensorUsingPOSTParams object
// with the default values initialized.
func NewCreateSensorUsingPOSTParams() *CreateSensorUsingPOSTParams {
	var ()
	return &CreateSensorUsingPOSTParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewCreateSensorUsingPOSTParamsWithTimeout creates a new CreateSensorUsingPOSTParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewCreateSensorUsingPOSTParamsWithTimeout(timeout time.Duration) *CreateSensorUsingPOSTParams {
	var ()
	return &CreateSensorUsingPOSTParams{

		timeout: timeout,
	}
}

// NewCreateSensorUsingPOSTParamsWithContext creates a new CreateSensorUsingPOSTParams object
// with the default values initialized, and the ability to set a context for a request
func NewCreateSensorUsingPOSTParamsWithContext(ctx context.Context) *CreateSensorUsingPOSTParams {
	var ()
	return &CreateSensorUsingPOSTParams{

		Context: ctx,
	}
}

// NewCreateSensorUsingPOSTParamsWithHTTPClient creates a new CreateSensorUsingPOSTParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewCreateSensorUsingPOSTParamsWithHTTPClient(client *http.Client) *CreateSensorUsingPOSTParams {
	var ()
	return &CreateSensorUsingPOSTParams{
		HTTPClient: client,
	}
}

/*CreateSensorUsingPOSTParams contains all the parameters to send to the API endpoint
for the create sensor using p o s t operation typically these are written to a http.Request
*/
type CreateSensorUsingPOSTParams struct {

	/*Request
	  Specification of the sensor that will be created.

	*/
	Request CreateSensorUsingPOSTBody
	/*TenantID
	  Unique identifier of a tenant.

	*/
	TenantID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the create sensor using p o s t params
func (o *CreateSensorUsingPOSTParams) WithTimeout(timeout time.Duration) *CreateSensorUsingPOSTParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the create sensor using p o s t params
func (o *CreateSensorUsingPOSTParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the create sensor using p o s t params
func (o *CreateSensorUsingPOSTParams) WithContext(ctx context.Context) *CreateSensorUsingPOSTParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the create sensor using p o s t params
func (o *CreateSensorUsingPOSTParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the create sensor using p o s t params
func (o *CreateSensorUsingPOSTParams) WithHTTPClient(client *http.Client) *CreateSensorUsingPOSTParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the create sensor using p o s t params
func (o *CreateSensorUsingPOSTParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithRequest adds the request to the create sensor using p o s t params
func (o *CreateSensorUsingPOSTParams) WithRequest(request CreateSensorUsingPOSTBody) *CreateSensorUsingPOSTParams {
	o.SetRequest(request)
	return o
}

// SetRequest adds the request to the create sensor using p o s t params
func (o *CreateSensorUsingPOSTParams) SetRequest(request CreateSensorUsingPOSTBody) {
	o.Request = request
}

// WithTenantID adds the tenantID to the create sensor using p o s t params
func (o *CreateSensorUsingPOSTParams) WithTenantID(tenantID string) *CreateSensorUsingPOSTParams {
	o.SetTenantID(tenantID)
	return o
}

// SetTenantID adds the tenantId to the create sensor using p o s t params
func (o *CreateSensorUsingPOSTParams) SetTenantID(tenantID string) {
	o.TenantID = tenantID
}

// WriteToRequest writes these params to a swagger request
func (o *CreateSensorUsingPOSTParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if err := r.SetBodyParam(o.Request); err != nil {
		return err
	}

	// path param tenantId
	if err := r.SetPathParam("tenantId", o.TenantID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
