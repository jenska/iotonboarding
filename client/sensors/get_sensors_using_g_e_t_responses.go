// Code generated by go-swagger; DO NOT EDIT.

package sensors

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GetSensorsUsingGETReader is a Reader for the GetSensorsUsingGET structure.
type GetSensorsUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetSensorsUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetSensorsUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetSensorsUsingGETOK creates a GetSensorsUsingGETOK with default headers values
func NewGetSensorsUsingGETOK() *GetSensorsUsingGETOK {
	return &GetSensorsUsingGETOK{}
}

/*GetSensorsUsingGETOK handles this case with default header values.

Successfully returned sensors.
*/
type GetSensorsUsingGETOK struct {
	Payload []*GetSensorsUsingGETOKBodyItems0
}

func (o *GetSensorsUsingGETOK) Error() string {
	return fmt.Sprintf("[GET /v1/tenant/{tenantId}/sensors][%d] getSensorsUsingGETOK  %+v", 200, o.Payload)
}

func (o *GetSensorsUsingGETOK) GetPayload() []*GetSensorsUsingGETOKBodyItems0 {
	return o.Payload
}

func (o *GetSensorsUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*GetSensorsUsingGETOKBodyItems0 SensorBean
swagger:model GetSensorsUsingGETOKBodyItems0
*/
type GetSensorsUsingGETOKBodyItems0 struct {

	// The alternate ID of the sensor. This field is unique across device.
	AlternateID string `json:"alternateId,omitempty"`

	// A set of user defined properties represented as key value pair.
	CustomProperties []*GetSensorsUsingGETOKBodyItems0CustomPropertiesItems0 `json:"customProperties"`

	// The ID of the related device. DeviceId is not required to be given to sensor while creating device and sensor together
	// Required: true
	DeviceID *string `json:"deviceId"`

	// Identifier of a sensor. Is generated by the system and unique across platform tenant. This field is an immutable.
	// Read Only: true
	ID string `json:"id,omitempty"`

	// The name of the sensor
	// Required: true
	Name *string `json:"name"`

	// The ID of the SensorType
	// Required: true
	SensorTypeID *string `json:"sensorTypeId"`
}

// Validate validates this get sensors using g e t o k body items0
func (o *GetSensorsUsingGETOKBodyItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCustomProperties(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDeviceID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSensorTypeID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetSensorsUsingGETOKBodyItems0) validateCustomProperties(formats strfmt.Registry) error {

	if swag.IsZero(o.CustomProperties) { // not required
		return nil
	}

	for i := 0; i < len(o.CustomProperties); i++ {
		if swag.IsZero(o.CustomProperties[i]) { // not required
			continue
		}

		if o.CustomProperties[i] != nil {
			if err := o.CustomProperties[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("customProperties" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *GetSensorsUsingGETOKBodyItems0) validateDeviceID(formats strfmt.Registry) error {

	if err := validate.Required("deviceId", "body", o.DeviceID); err != nil {
		return err
	}

	return nil
}

func (o *GetSensorsUsingGETOKBodyItems0) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", o.Name); err != nil {
		return err
	}

	return nil
}

func (o *GetSensorsUsingGETOKBodyItems0) validateSensorTypeID(formats strfmt.Registry) error {

	if err := validate.Required("sensorTypeId", "body", o.SensorTypeID); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetSensorsUsingGETOKBodyItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetSensorsUsingGETOKBodyItems0) UnmarshalBinary(b []byte) error {
	var res GetSensorsUsingGETOKBodyItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetSensorsUsingGETOKBodyItems0CustomPropertiesItems0 CustomPropertyBean
swagger:model GetSensorsUsingGETOKBodyItems0CustomPropertiesItems0
*/
type GetSensorsUsingGETOKBodyItems0CustomPropertiesItems0 struct {

	// A unique identifier of a custom property. Is defined by the user. This field is an immutable.
	// Required: true
	Key *string `json:"key"`

	// Value of the custom property.
	// Required: true
	Value *string `json:"value"`
}

// Validate validates this get sensors using g e t o k body items0 custom properties items0
func (o *GetSensorsUsingGETOKBodyItems0CustomPropertiesItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateKey(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateValue(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetSensorsUsingGETOKBodyItems0CustomPropertiesItems0) validateKey(formats strfmt.Registry) error {

	if err := validate.Required("key", "body", o.Key); err != nil {
		return err
	}

	return nil
}

func (o *GetSensorsUsingGETOKBodyItems0CustomPropertiesItems0) validateValue(formats strfmt.Registry) error {

	if err := validate.Required("value", "body", o.Value); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetSensorsUsingGETOKBodyItems0CustomPropertiesItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetSensorsUsingGETOKBodyItems0CustomPropertiesItems0) UnmarshalBinary(b []byte) error {
	var res GetSensorsUsingGETOKBodyItems0CustomPropertiesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
