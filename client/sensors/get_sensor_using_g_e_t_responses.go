// Code generated by go-swagger; DO NOT EDIT.

package sensors

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GetSensorUsingGETReader is a Reader for the GetSensorUsingGET structure.
type GetSensorUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetSensorUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetSensorUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetSensorUsingGETBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetSensorUsingGETNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetSensorUsingGETOK creates a GetSensorUsingGETOK with default headers values
func NewGetSensorUsingGETOK() *GetSensorUsingGETOK {
	return &GetSensorUsingGETOK{}
}

/*GetSensorUsingGETOK handles this case with default header values.

Successfully returned sensor.
*/
type GetSensorUsingGETOK struct {
	Payload *GetSensorUsingGETOKBody
}

func (o *GetSensorUsingGETOK) Error() string {
	return fmt.Sprintf("[GET /v1/tenant/{tenantId}/sensors/{sensorId}][%d] getSensorUsingGETOK  %+v", 200, o.Payload)
}

func (o *GetSensorUsingGETOK) GetPayload() *GetSensorUsingGETOKBody {
	return o.Payload
}

func (o *GetSensorUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetSensorUsingGETOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSensorUsingGETBadRequest creates a GetSensorUsingGETBadRequest with default headers values
func NewGetSensorUsingGETBadRequest() *GetSensorUsingGETBadRequest {
	return &GetSensorUsingGETBadRequest{}
}

/*GetSensorUsingGETBadRequest handles this case with default header values.

HTTP request is malformed.
*/
type GetSensorUsingGETBadRequest struct {
	Payload *GetSensorUsingGETBadRequestBody
}

func (o *GetSensorUsingGETBadRequest) Error() string {
	return fmt.Sprintf("[GET /v1/tenant/{tenantId}/sensors/{sensorId}][%d] getSensorUsingGETBadRequest  %+v", 400, o.Payload)
}

func (o *GetSensorUsingGETBadRequest) GetPayload() *GetSensorUsingGETBadRequestBody {
	return o.Payload
}

func (o *GetSensorUsingGETBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetSensorUsingGETBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSensorUsingGETNotFound creates a GetSensorUsingGETNotFound with default headers values
func NewGetSensorUsingGETNotFound() *GetSensorUsingGETNotFound {
	return &GetSensorUsingGETNotFound{}
}

/*GetSensorUsingGETNotFound handles this case with default header values.

Sensor with specified id does not exist.
*/
type GetSensorUsingGETNotFound struct {
	Payload *GetSensorUsingGETNotFoundBody
}

func (o *GetSensorUsingGETNotFound) Error() string {
	return fmt.Sprintf("[GET /v1/tenant/{tenantId}/sensors/{sensorId}][%d] getSensorUsingGETNotFound  %+v", 404, o.Payload)
}

func (o *GetSensorUsingGETNotFound) GetPayload() *GetSensorUsingGETNotFoundBody {
	return o.Payload
}

func (o *GetSensorUsingGETNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetSensorUsingGETNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*GetSensorUsingGETBadRequestBody Response
swagger:model GetSensorUsingGETBadRequestBody
*/
type GetSensorUsingGETBadRequestBody struct {

	// message
	// Required: true
	Message *string `json:"message"`
}

// Validate validates this get sensor using g e t bad request body
func (o *GetSensorUsingGETBadRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetSensorUsingGETBadRequestBody) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("getSensorUsingGETBadRequest"+"."+"message", "body", o.Message); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetSensorUsingGETBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetSensorUsingGETBadRequestBody) UnmarshalBinary(b []byte) error {
	var res GetSensorUsingGETBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetSensorUsingGETNotFoundBody Response
swagger:model GetSensorUsingGETNotFoundBody
*/
type GetSensorUsingGETNotFoundBody struct {

	// message
	// Required: true
	Message *string `json:"message"`
}

// Validate validates this get sensor using g e t not found body
func (o *GetSensorUsingGETNotFoundBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetSensorUsingGETNotFoundBody) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("getSensorUsingGETNotFound"+"."+"message", "body", o.Message); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetSensorUsingGETNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetSensorUsingGETNotFoundBody) UnmarshalBinary(b []byte) error {
	var res GetSensorUsingGETNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetSensorUsingGETOKBody SensorBean
swagger:model GetSensorUsingGETOKBody
*/
type GetSensorUsingGETOKBody struct {

	// The alternate ID of the sensor. This field is unique across device.
	AlternateID string `json:"alternateId,omitempty"`

	// A set of user defined properties represented as key value pair.
	CustomProperties []*GetSensorUsingGETOKBodyCustomPropertiesItems0 `json:"customProperties"`

	// The ID of the related device. DeviceId is not required to be given to sensor while creating device and sensor together
	// Required: true
	DeviceID *string `json:"deviceId"`

	// Identifier of a sensor. Is generated by the system and unique across platform tenant. This field is an immutable.
	// Read Only: true
	ID string `json:"id,omitempty"`

	// The name of the sensor
	// Required: true
	Name *string `json:"name"`

	// The ID of the SensorType
	// Required: true
	SensorTypeID *string `json:"sensorTypeId"`
}

// Validate validates this get sensor using g e t o k body
func (o *GetSensorUsingGETOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCustomProperties(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDeviceID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSensorTypeID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetSensorUsingGETOKBody) validateCustomProperties(formats strfmt.Registry) error {

	if swag.IsZero(o.CustomProperties) { // not required
		return nil
	}

	for i := 0; i < len(o.CustomProperties); i++ {
		if swag.IsZero(o.CustomProperties[i]) { // not required
			continue
		}

		if o.CustomProperties[i] != nil {
			if err := o.CustomProperties[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getSensorUsingGETOK" + "." + "customProperties" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *GetSensorUsingGETOKBody) validateDeviceID(formats strfmt.Registry) error {

	if err := validate.Required("getSensorUsingGETOK"+"."+"deviceId", "body", o.DeviceID); err != nil {
		return err
	}

	return nil
}

func (o *GetSensorUsingGETOKBody) validateName(formats strfmt.Registry) error {

	if err := validate.Required("getSensorUsingGETOK"+"."+"name", "body", o.Name); err != nil {
		return err
	}

	return nil
}

func (o *GetSensorUsingGETOKBody) validateSensorTypeID(formats strfmt.Registry) error {

	if err := validate.Required("getSensorUsingGETOK"+"."+"sensorTypeId", "body", o.SensorTypeID); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetSensorUsingGETOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetSensorUsingGETOKBody) UnmarshalBinary(b []byte) error {
	var res GetSensorUsingGETOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetSensorUsingGETOKBodyCustomPropertiesItems0 CustomPropertyBean
swagger:model GetSensorUsingGETOKBodyCustomPropertiesItems0
*/
type GetSensorUsingGETOKBodyCustomPropertiesItems0 struct {

	// A unique identifier of a custom property. Is defined by the user. This field is an immutable.
	// Required: true
	Key *string `json:"key"`

	// Value of the custom property.
	// Required: true
	Value *string `json:"value"`
}

// Validate validates this get sensor using g e t o k body custom properties items0
func (o *GetSensorUsingGETOKBodyCustomPropertiesItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateKey(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateValue(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetSensorUsingGETOKBodyCustomPropertiesItems0) validateKey(formats strfmt.Registry) error {

	if err := validate.Required("key", "body", o.Key); err != nil {
		return err
	}

	return nil
}

func (o *GetSensorUsingGETOKBodyCustomPropertiesItems0) validateValue(formats strfmt.Registry) error {

	if err := validate.Required("value", "body", o.Value); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetSensorUsingGETOKBodyCustomPropertiesItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetSensorUsingGETOKBodyCustomPropertiesItems0) UnmarshalBinary(b []byte) error {
	var res GetSensorUsingGETOKBodyCustomPropertiesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
