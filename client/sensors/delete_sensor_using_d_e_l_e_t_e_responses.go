// Code generated by go-swagger; DO NOT EDIT.

package sensors

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DeleteSensorUsingDELETEReader is a Reader for the DeleteSensorUsingDELETE structure.
type DeleteSensorUsingDELETEReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteSensorUsingDELETEReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDeleteSensorUsingDELETEOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewDeleteSensorUsingDELETEBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDeleteSensorUsingDELETENotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewDeleteSensorUsingDELETEConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewDeleteSensorUsingDELETEOK creates a DeleteSensorUsingDELETEOK with default headers values
func NewDeleteSensorUsingDELETEOK() *DeleteSensorUsingDELETEOK {
	return &DeleteSensorUsingDELETEOK{}
}

/*DeleteSensorUsingDELETEOK handles this case with default header values.

Successfully deleted sensor.
*/
type DeleteSensorUsingDELETEOK struct {
	Payload *DeleteSensorUsingDELETEOKBody
}

func (o *DeleteSensorUsingDELETEOK) Error() string {
	return fmt.Sprintf("[DELETE /v1/tenant/{tenantId}/sensors/{sensorId}][%d] deleteSensorUsingDELETEOK  %+v", 200, o.Payload)
}

func (o *DeleteSensorUsingDELETEOK) GetPayload() *DeleteSensorUsingDELETEOKBody {
	return o.Payload
}

func (o *DeleteSensorUsingDELETEOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(DeleteSensorUsingDELETEOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteSensorUsingDELETEBadRequest creates a DeleteSensorUsingDELETEBadRequest with default headers values
func NewDeleteSensorUsingDELETEBadRequest() *DeleteSensorUsingDELETEBadRequest {
	return &DeleteSensorUsingDELETEBadRequest{}
}

/*DeleteSensorUsingDELETEBadRequest handles this case with default header values.

HTTP request is malformed.
*/
type DeleteSensorUsingDELETEBadRequest struct {
	Payload *DeleteSensorUsingDELETEBadRequestBody
}

func (o *DeleteSensorUsingDELETEBadRequest) Error() string {
	return fmt.Sprintf("[DELETE /v1/tenant/{tenantId}/sensors/{sensorId}][%d] deleteSensorUsingDELETEBadRequest  %+v", 400, o.Payload)
}

func (o *DeleteSensorUsingDELETEBadRequest) GetPayload() *DeleteSensorUsingDELETEBadRequestBody {
	return o.Payload
}

func (o *DeleteSensorUsingDELETEBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(DeleteSensorUsingDELETEBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteSensorUsingDELETENotFound creates a DeleteSensorUsingDELETENotFound with default headers values
func NewDeleteSensorUsingDELETENotFound() *DeleteSensorUsingDELETENotFound {
	return &DeleteSensorUsingDELETENotFound{}
}

/*DeleteSensorUsingDELETENotFound handles this case with default header values.

Sensor with specified id does not exist.
*/
type DeleteSensorUsingDELETENotFound struct {
	Payload *DeleteSensorUsingDELETENotFoundBody
}

func (o *DeleteSensorUsingDELETENotFound) Error() string {
	return fmt.Sprintf("[DELETE /v1/tenant/{tenantId}/sensors/{sensorId}][%d] deleteSensorUsingDELETENotFound  %+v", 404, o.Payload)
}

func (o *DeleteSensorUsingDELETENotFound) GetPayload() *DeleteSensorUsingDELETENotFoundBody {
	return o.Payload
}

func (o *DeleteSensorUsingDELETENotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(DeleteSensorUsingDELETENotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteSensorUsingDELETEConflict creates a DeleteSensorUsingDELETEConflict with default headers values
func NewDeleteSensorUsingDELETEConflict() *DeleteSensorUsingDELETEConflict {
	return &DeleteSensorUsingDELETEConflict{}
}

/*DeleteSensorUsingDELETEConflict handles this case with default header values.

Last sensor cannot be deleted.
*/
type DeleteSensorUsingDELETEConflict struct {
	Payload *DeleteSensorUsingDELETEConflictBody
}

func (o *DeleteSensorUsingDELETEConflict) Error() string {
	return fmt.Sprintf("[DELETE /v1/tenant/{tenantId}/sensors/{sensorId}][%d] deleteSensorUsingDELETEConflict  %+v", 409, o.Payload)
}

func (o *DeleteSensorUsingDELETEConflict) GetPayload() *DeleteSensorUsingDELETEConflictBody {
	return o.Payload
}

func (o *DeleteSensorUsingDELETEConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(DeleteSensorUsingDELETEConflictBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*DeleteSensorUsingDELETEBadRequestBody Response
swagger:model DeleteSensorUsingDELETEBadRequestBody
*/
type DeleteSensorUsingDELETEBadRequestBody struct {

	// message
	// Required: true
	Message *string `json:"message"`
}

// Validate validates this delete sensor using d e l e t e bad request body
func (o *DeleteSensorUsingDELETEBadRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DeleteSensorUsingDELETEBadRequestBody) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("deleteSensorUsingDELETEBadRequest"+"."+"message", "body", o.Message); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *DeleteSensorUsingDELETEBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DeleteSensorUsingDELETEBadRequestBody) UnmarshalBinary(b []byte) error {
	var res DeleteSensorUsingDELETEBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*DeleteSensorUsingDELETEConflictBody Response
swagger:model DeleteSensorUsingDELETEConflictBody
*/
type DeleteSensorUsingDELETEConflictBody struct {

	// message
	// Required: true
	Message *string `json:"message"`
}

// Validate validates this delete sensor using d e l e t e conflict body
func (o *DeleteSensorUsingDELETEConflictBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DeleteSensorUsingDELETEConflictBody) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("deleteSensorUsingDELETEConflict"+"."+"message", "body", o.Message); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *DeleteSensorUsingDELETEConflictBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DeleteSensorUsingDELETEConflictBody) UnmarshalBinary(b []byte) error {
	var res DeleteSensorUsingDELETEConflictBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*DeleteSensorUsingDELETENotFoundBody Response
swagger:model DeleteSensorUsingDELETENotFoundBody
*/
type DeleteSensorUsingDELETENotFoundBody struct {

	// message
	// Required: true
	Message *string `json:"message"`
}

// Validate validates this delete sensor using d e l e t e not found body
func (o *DeleteSensorUsingDELETENotFoundBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DeleteSensorUsingDELETENotFoundBody) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("deleteSensorUsingDELETENotFound"+"."+"message", "body", o.Message); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *DeleteSensorUsingDELETENotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DeleteSensorUsingDELETENotFoundBody) UnmarshalBinary(b []byte) error {
	var res DeleteSensorUsingDELETENotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*DeleteSensorUsingDELETEOKBody Response
swagger:model DeleteSensorUsingDELETEOKBody
*/
type DeleteSensorUsingDELETEOKBody struct {

	// message
	// Required: true
	Message *string `json:"message"`
}

// Validate validates this delete sensor using d e l e t e o k body
func (o *DeleteSensorUsingDELETEOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DeleteSensorUsingDELETEOKBody) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("deleteSensorUsingDELETEOK"+"."+"message", "body", o.Message); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *DeleteSensorUsingDELETEOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DeleteSensorUsingDELETEOKBody) UnmarshalBinary(b []byte) error {
	var res DeleteSensorUsingDELETEOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
