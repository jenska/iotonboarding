// Code generated by go-swagger; DO NOT EDIT.

package sensors

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new sensors API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for sensors API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	CreateCustomPropertyForSensor(params *CreateCustomPropertyForSensorParams, authInfo runtime.ClientAuthInfoWriter) (*CreateCustomPropertyForSensorOK, error)

	CreateSensorUsingPOST(params *CreateSensorUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter) (*CreateSensorUsingPOSTOK, error)

	DeleteCustomPropertyForSensor(params *DeleteCustomPropertyForSensorParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteCustomPropertyForSensorOK, error)

	DeleteSensorUsingDELETE(params *DeleteSensorUsingDELETEParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteSensorUsingDELETEOK, error)

	GetSensorCountUsingGET(params *GetSensorCountUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*GetSensorCountUsingGETOK, error)

	GetSensorUsingGET(params *GetSensorUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*GetSensorUsingGETOK, error)

	GetSensorsUsingGET(params *GetSensorsUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*GetSensorsUsingGETOK, error)

	UpdateCustomPropertyForSensor(params *UpdateCustomPropertyForSensorParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateCustomPropertyForSensorOK, error)

	UpdateSensorUsingPUT(params *UpdateSensorUsingPUTParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateSensorUsingPUTOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateCustomPropertyForSensor adds a custom property to a sensor

  The endpoint is used to add a custom property to the sensor associated to the given id.
*/
func (a *Client) CreateCustomPropertyForSensor(params *CreateCustomPropertyForSensorParams, authInfo runtime.ClientAuthInfoWriter) (*CreateCustomPropertyForSensorOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateCustomPropertyForSensorParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createCustomPropertyForSensor",
		Method:             "POST",
		PathPattern:        "/v1/tenant/{tenantId}/sensors/{sensorId}/customProperties",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateCustomPropertyForSensorReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateCustomPropertyForSensorOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createCustomPropertyForSensor: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateSensorUsingPOST creates a sensor

  This endpoint is used to create a sensor.
*/
func (a *Client) CreateSensorUsingPOST(params *CreateSensorUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter) (*CreateSensorUsingPOSTOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateSensorUsingPOSTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createSensorUsingPOST",
		Method:             "POST",
		PathPattern:        "/v1/tenant/{tenantId}/sensors",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateSensorUsingPOSTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateSensorUsingPOSTOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createSensorUsingPOST: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteCustomPropertyForSensor deletes a custom property from a sensor

  This endpoint is used to delete a custom property from the sensor associated to the given id.
*/
func (a *Client) DeleteCustomPropertyForSensor(params *DeleteCustomPropertyForSensorParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteCustomPropertyForSensorOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteCustomPropertyForSensorParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteCustomPropertyForSensor",
		Method:             "DELETE",
		PathPattern:        "/v1/tenant/{tenantId}/sensors/{sensorId}/customProperties/{key}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteCustomPropertyForSensorReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteCustomPropertyForSensorOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteCustomPropertyForSensor: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteSensorUsingDELETE deletes a sensor

  The endpoint is used to delete the sensor associated to the given id.
*/
func (a *Client) DeleteSensorUsingDELETE(params *DeleteSensorUsingDELETEParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteSensorUsingDELETEOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteSensorUsingDELETEParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteSensorUsingDELETE",
		Method:             "DELETE",
		PathPattern:        "/v1/tenant/{tenantId}/sensors/{sensorId}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteSensorUsingDELETEReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteSensorUsingDELETEOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteSensorUsingDELETE: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetSensorCountUsingGET returns the count of all sensors

  The endpoint returns the count of all sensors.
*/
func (a *Client) GetSensorCountUsingGET(params *GetSensorCountUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*GetSensorCountUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSensorCountUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSensorCountUsingGET",
		Method:             "GET",
		PathPattern:        "/v1/tenant/{tenantId}/sensors/count",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSensorCountUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSensorCountUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getSensorCountUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetSensorUsingGET returns a sensor

  The endpoint returns the sensor associated to the given id.
*/
func (a *Client) GetSensorUsingGET(params *GetSensorUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*GetSensorUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSensorUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSensorUsingGET",
		Method:             "GET",
		PathPattern:        "/v1/tenant/{tenantId}/sensors/{sensorId}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSensorUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSensorUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getSensorUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetSensorsUsingGET returns all sensors

  The endpoint returns a list of sensors.
*/
func (a *Client) GetSensorsUsingGET(params *GetSensorsUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*GetSensorsUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSensorsUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSensorsUsingGET",
		Method:             "GET",
		PathPattern:        "/v1/tenant/{tenantId}/sensors",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSensorsUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSensorsUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getSensorsUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateCustomPropertyForSensor updates a custom property of a sensor

  The endpoint is used to update a custom property of the sensor associated to the given id. The 'key' attribute cannot be modified.
*/
func (a *Client) UpdateCustomPropertyForSensor(params *UpdateCustomPropertyForSensorParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateCustomPropertyForSensorOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateCustomPropertyForSensorParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateCustomPropertyForSensor",
		Method:             "PUT",
		PathPattern:        "/v1/tenant/{tenantId}/sensors/{sensorId}/customProperties/{key}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateCustomPropertyForSensorReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateCustomPropertyForSensorOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateCustomPropertyForSensor: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateSensorUsingPUT updates a sensor

  This endpoint is used to update a sensor associated to the given id with details specified in the request body.
*/
func (a *Client) UpdateSensorUsingPUT(params *UpdateSensorUsingPUTParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateSensorUsingPUTOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateSensorUsingPUTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateSensorUsingPUT",
		Method:             "PUT",
		PathPattern:        "/v1/tenant/{tenantId}/sensors/{sensorId}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateSensorUsingPUTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateSensorUsingPUTOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateSensorUsingPUT: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
