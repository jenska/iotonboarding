// Code generated by go-swagger; DO NOT EDIT.

package protocols

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GetProtocolsCountUsingGETReader is a Reader for the GetProtocolsCountUsingGET structure.
type GetProtocolsCountUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetProtocolsCountUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetProtocolsCountUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetProtocolsCountUsingGETBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetProtocolsCountUsingGETOK creates a GetProtocolsCountUsingGETOK with default headers values
func NewGetProtocolsCountUsingGETOK() *GetProtocolsCountUsingGETOK {
	return &GetProtocolsCountUsingGETOK{}
}

/*GetProtocolsCountUsingGETOK handles this case with default header values.

Successfully returned count of protocols.
*/
type GetProtocolsCountUsingGETOK struct {
	Payload int64
}

func (o *GetProtocolsCountUsingGETOK) Error() string {
	return fmt.Sprintf("[GET /v1/protocols/count][%d] getProtocolsCountUsingGETOK  %+v", 200, o.Payload)
}

func (o *GetProtocolsCountUsingGETOK) GetPayload() int64 {
	return o.Payload
}

func (o *GetProtocolsCountUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetProtocolsCountUsingGETBadRequest creates a GetProtocolsCountUsingGETBadRequest with default headers values
func NewGetProtocolsCountUsingGETBadRequest() *GetProtocolsCountUsingGETBadRequest {
	return &GetProtocolsCountUsingGETBadRequest{}
}

/*GetProtocolsCountUsingGETBadRequest handles this case with default header values.

HTTP request is malformed.
*/
type GetProtocolsCountUsingGETBadRequest struct {
	Payload *GetProtocolsCountUsingGETBadRequestBody
}

func (o *GetProtocolsCountUsingGETBadRequest) Error() string {
	return fmt.Sprintf("[GET /v1/protocols/count][%d] getProtocolsCountUsingGETBadRequest  %+v", 400, o.Payload)
}

func (o *GetProtocolsCountUsingGETBadRequest) GetPayload() *GetProtocolsCountUsingGETBadRequestBody {
	return o.Payload
}

func (o *GetProtocolsCountUsingGETBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetProtocolsCountUsingGETBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*GetProtocolsCountUsingGETBadRequestBody Response
swagger:model GetProtocolsCountUsingGETBadRequestBody
*/
type GetProtocolsCountUsingGETBadRequestBody struct {

	// message
	// Required: true
	Message *string `json:"message"`
}

// Validate validates this get protocols count using g e t bad request body
func (o *GetProtocolsCountUsingGETBadRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetProtocolsCountUsingGETBadRequestBody) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("getProtocolsCountUsingGETBadRequest"+"."+"message", "body", o.Message); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetProtocolsCountUsingGETBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetProtocolsCountUsingGETBadRequestBody) UnmarshalBinary(b []byte) error {
	var res GetProtocolsCountUsingGETBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
