// Code generated by go-swagger; DO NOT EDIT.

package protocols

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new protocols API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for protocols API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	CreateProtocolUsingPOST(params *CreateProtocolUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter) (*CreateProtocolUsingPOSTOK, error)

	DeleteProtocolUsingDELETE(params *DeleteProtocolUsingDELETEParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteProtocolUsingDELETEOK, error)

	GetProtocolsCountUsingGET(params *GetProtocolsCountUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*GetProtocolsCountUsingGETOK, error)

	GetProtocolsUsingGET(params *GetProtocolsUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*GetProtocolsUsingGETOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateProtocolUsingPOST creates a protocol
*/
func (a *Client) CreateProtocolUsingPOST(params *CreateProtocolUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter) (*CreateProtocolUsingPOSTOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateProtocolUsingPOSTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createProtocolUsingPOST",
		Method:             "POST",
		PathPattern:        "/v1/protocols",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateProtocolUsingPOSTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateProtocolUsingPOSTOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createProtocolUsingPOST: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteProtocolUsingDELETE deletes a protocol
*/
func (a *Client) DeleteProtocolUsingDELETE(params *DeleteProtocolUsingDELETEParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteProtocolUsingDELETEOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteProtocolUsingDELETEParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteProtocolUsingDELETE",
		Method:             "DELETE",
		PathPattern:        "/v1/protocols/{protocolId}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteProtocolUsingDELETEReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteProtocolUsingDELETEOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteProtocolUsingDELETE: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetProtocolsCountUsingGET returns the count of all protocols

  The endpoint returns the count of all protocols.
*/
func (a *Client) GetProtocolsCountUsingGET(params *GetProtocolsCountUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*GetProtocolsCountUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProtocolsCountUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getProtocolsCountUsingGET",
		Method:             "GET",
		PathPattern:        "/v1/protocols/count",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetProtocolsCountUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetProtocolsCountUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getProtocolsCountUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetProtocolsUsingGET returns all protocols
*/
func (a *Client) GetProtocolsUsingGET(params *GetProtocolsUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*GetProtocolsUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProtocolsUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getProtocolsUsingGET",
		Method:             "GET",
		PathPattern:        "/v1/protocols",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetProtocolsUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetProtocolsUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getProtocolsUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
