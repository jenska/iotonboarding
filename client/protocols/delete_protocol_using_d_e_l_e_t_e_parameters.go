// Code generated by go-swagger; DO NOT EDIT.

package protocols

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewDeleteProtocolUsingDELETEParams creates a new DeleteProtocolUsingDELETEParams object
// with the default values initialized.
func NewDeleteProtocolUsingDELETEParams() *DeleteProtocolUsingDELETEParams {
	var ()
	return &DeleteProtocolUsingDELETEParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewDeleteProtocolUsingDELETEParamsWithTimeout creates a new DeleteProtocolUsingDELETEParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewDeleteProtocolUsingDELETEParamsWithTimeout(timeout time.Duration) *DeleteProtocolUsingDELETEParams {
	var ()
	return &DeleteProtocolUsingDELETEParams{

		timeout: timeout,
	}
}

// NewDeleteProtocolUsingDELETEParamsWithContext creates a new DeleteProtocolUsingDELETEParams object
// with the default values initialized, and the ability to set a context for a request
func NewDeleteProtocolUsingDELETEParamsWithContext(ctx context.Context) *DeleteProtocolUsingDELETEParams {
	var ()
	return &DeleteProtocolUsingDELETEParams{

		Context: ctx,
	}
}

// NewDeleteProtocolUsingDELETEParamsWithHTTPClient creates a new DeleteProtocolUsingDELETEParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewDeleteProtocolUsingDELETEParamsWithHTTPClient(client *http.Client) *DeleteProtocolUsingDELETEParams {
	var ()
	return &DeleteProtocolUsingDELETEParams{
		HTTPClient: client,
	}
}

/*DeleteProtocolUsingDELETEParams contains all the parameters to send to the API endpoint
for the delete protocol using d e l e t e operation typically these are written to a http.Request
*/
type DeleteProtocolUsingDELETEParams struct {

	/*ProtocolID
	  protocolId

	*/
	ProtocolID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the delete protocol using d e l e t e params
func (o *DeleteProtocolUsingDELETEParams) WithTimeout(timeout time.Duration) *DeleteProtocolUsingDELETEParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the delete protocol using d e l e t e params
func (o *DeleteProtocolUsingDELETEParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the delete protocol using d e l e t e params
func (o *DeleteProtocolUsingDELETEParams) WithContext(ctx context.Context) *DeleteProtocolUsingDELETEParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the delete protocol using d e l e t e params
func (o *DeleteProtocolUsingDELETEParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the delete protocol using d e l e t e params
func (o *DeleteProtocolUsingDELETEParams) WithHTTPClient(client *http.Client) *DeleteProtocolUsingDELETEParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the delete protocol using d e l e t e params
func (o *DeleteProtocolUsingDELETEParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithProtocolID adds the protocolID to the delete protocol using d e l e t e params
func (o *DeleteProtocolUsingDELETEParams) WithProtocolID(protocolID string) *DeleteProtocolUsingDELETEParams {
	o.SetProtocolID(protocolID)
	return o
}

// SetProtocolID adds the protocolId to the delete protocol using d e l e t e params
func (o *DeleteProtocolUsingDELETEParams) SetProtocolID(protocolID string) {
	o.ProtocolID = protocolID
}

// WriteToRequest writes these params to a swagger request
func (o *DeleteProtocolUsingDELETEParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param protocolId
	if err := r.SetPathParam("protocolId", o.ProtocolID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
