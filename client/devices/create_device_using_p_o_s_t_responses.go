// Code generated by go-swagger; DO NOT EDIT.

package devices

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateDeviceUsingPOSTReader is a Reader for the CreateDeviceUsingPOST structure.
type CreateDeviceUsingPOSTReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateDeviceUsingPOSTReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCreateDeviceUsingPOSTOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCreateDeviceUsingPOSTBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewCreateDeviceUsingPOSTConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewCreateDeviceUsingPOSTOK creates a CreateDeviceUsingPOSTOK with default headers values
func NewCreateDeviceUsingPOSTOK() *CreateDeviceUsingPOSTOK {
	return &CreateDeviceUsingPOSTOK{}
}

/*CreateDeviceUsingPOSTOK handles this case with default header values.

Successfully created device.
*/
type CreateDeviceUsingPOSTOK struct {
	Payload *CreateDeviceUsingPOSTOKBody
}

func (o *CreateDeviceUsingPOSTOK) Error() string {
	return fmt.Sprintf("[POST /v1/tenant/{tenantId}/devices][%d] createDeviceUsingPOSTOK  %+v", 200, o.Payload)
}

func (o *CreateDeviceUsingPOSTOK) GetPayload() *CreateDeviceUsingPOSTOKBody {
	return o.Payload
}

func (o *CreateDeviceUsingPOSTOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(CreateDeviceUsingPOSTOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateDeviceUsingPOSTBadRequest creates a CreateDeviceUsingPOSTBadRequest with default headers values
func NewCreateDeviceUsingPOSTBadRequest() *CreateDeviceUsingPOSTBadRequest {
	return &CreateDeviceUsingPOSTBadRequest{}
}

/*CreateDeviceUsingPOSTBadRequest handles this case with default header values.

HTTP request is malformed.
*/
type CreateDeviceUsingPOSTBadRequest struct {
	Payload *CreateDeviceUsingPOSTBadRequestBody
}

func (o *CreateDeviceUsingPOSTBadRequest) Error() string {
	return fmt.Sprintf("[POST /v1/tenant/{tenantId}/devices][%d] createDeviceUsingPOSTBadRequest  %+v", 400, o.Payload)
}

func (o *CreateDeviceUsingPOSTBadRequest) GetPayload() *CreateDeviceUsingPOSTBadRequestBody {
	return o.Payload
}

func (o *CreateDeviceUsingPOSTBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(CreateDeviceUsingPOSTBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateDeviceUsingPOSTConflict creates a CreateDeviceUsingPOSTConflict with default headers values
func NewCreateDeviceUsingPOSTConflict() *CreateDeviceUsingPOSTConflict {
	return &CreateDeviceUsingPOSTConflict{}
}

/*CreateDeviceUsingPOSTConflict handles this case with default header values.

Device cannot be created. Specified gateway is offline.
*/
type CreateDeviceUsingPOSTConflict struct {
	Payload *CreateDeviceUsingPOSTConflictBody
}

func (o *CreateDeviceUsingPOSTConflict) Error() string {
	return fmt.Sprintf("[POST /v1/tenant/{tenantId}/devices][%d] createDeviceUsingPOSTConflict  %+v", 409, o.Payload)
}

func (o *CreateDeviceUsingPOSTConflict) GetPayload() *CreateDeviceUsingPOSTConflictBody {
	return o.Payload
}

func (o *CreateDeviceUsingPOSTConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(CreateDeviceUsingPOSTConflictBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*CreateDeviceUsingPOSTBadRequestBody Response
swagger:model CreateDeviceUsingPOSTBadRequestBody
*/
type CreateDeviceUsingPOSTBadRequestBody struct {

	// message
	// Required: true
	Message *string `json:"message"`
}

// Validate validates this create device using p o s t bad request body
func (o *CreateDeviceUsingPOSTBadRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateDeviceUsingPOSTBadRequestBody) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("createDeviceUsingPOSTBadRequest"+"."+"message", "body", o.Message); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateDeviceUsingPOSTBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateDeviceUsingPOSTBadRequestBody) UnmarshalBinary(b []byte) error {
	var res CreateDeviceUsingPOSTBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*CreateDeviceUsingPOSTBody DeviceBean
swagger:model CreateDeviceUsingPOSTBody
*/
type CreateDeviceUsingPOSTBody struct {

	// The alternate ID of the device (e.g., serial number crafted into the device). This field is unique across gateway.
	AlternateID string `json:"alternateId,omitempty"`

	// Authentications of the device.
	// Read Only: true
	Authentications []*CreateDeviceUsingPOSTParamsBodyAuthenticationsItems0 `json:"authentications"`

	// Authorizations of the device.
	// Read Only: true
	Authorizations []*CreateDeviceUsingPOSTParamsBodyAuthorizationsItems0 `json:"authorizations"`

	// A set of user defined properties represented as key value pair.
	CustomProperties []*CreateDeviceUsingPOSTParamsBodyCustomPropertiesItems0 `json:"customProperties"`

	// The ID of the associated gateway. This field is an immutable.
	// Required: true
	GatewayID *string `json:"gatewayId"`

	// A unique identifier of a device. Is generated by the system and unique across platform tenant. This field is an immutable.
	// Read Only: true
	ID string `json:"id,omitempty"`

	// The name of the device.
	// Required: true
	Name *string `json:"name"`

	// The online status
	// Read Only: true
	Online *bool `json:"online,omitempty"`

	// The set of sensors that compose the device. DeviceId is not required to be given to sensor while creating device and sensor together
	Sensors []*CreateDeviceUsingPOSTParamsBodySensorsItems0 `json:"sensors"`
}

// Validate validates this create device using p o s t body
func (o *CreateDeviceUsingPOSTBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAuthentications(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateAuthorizations(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCreationTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCustomProperties(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateGatewayID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSensors(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateDeviceUsingPOSTBody) validateAuthentications(formats strfmt.Registry) error {

	if swag.IsZero(o.Authentications) { // not required
		return nil
	}

	for i := 0; i < len(o.Authentications); i++ {
		if swag.IsZero(o.Authentications[i]) { // not required
			continue
		}

		if o.Authentications[i] != nil {
			if err := o.Authentications[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("request" + "." + "authentications" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *CreateDeviceUsingPOSTBody) validateAuthorizations(formats strfmt.Registry) error {

	if swag.IsZero(o.Authorizations) { // not required
		return nil
	}

	for i := 0; i < len(o.Authorizations); i++ {
		if swag.IsZero(o.Authorizations[i]) { // not required
			continue
		}

		if o.Authorizations[i] != nil {
			if err := o.Authorizations[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("request" + "." + "authorizations" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *CreateDeviceUsingPOSTBody) validateCreationTimestamp(formats strfmt.Registry) error {
	/*
		if swag.IsZero(o.CreationTimestamp) { // not required
			return nil
		}

		if err := validate.FormatOf("request"+"."+"creationTimestamp", "body", "date-time", o.CreationTimestamp.String(), formats); err != nil {
			return err
		}
	*/
	return nil
}

func (o *CreateDeviceUsingPOSTBody) validateCustomProperties(formats strfmt.Registry) error {

	if swag.IsZero(o.CustomProperties) { // not required
		return nil
	}

	for i := 0; i < len(o.CustomProperties); i++ {
		if swag.IsZero(o.CustomProperties[i]) { // not required
			continue
		}

		if o.CustomProperties[i] != nil {
			if err := o.CustomProperties[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("request" + "." + "customProperties" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *CreateDeviceUsingPOSTBody) validateGatewayID(formats strfmt.Registry) error {

	if err := validate.Required("request"+"."+"gatewayId", "body", o.GatewayID); err != nil {
		return err
	}

	return nil
}

func (o *CreateDeviceUsingPOSTBody) validateName(formats strfmt.Registry) error {

	if err := validate.Required("request"+"."+"name", "body", o.Name); err != nil {
		return err
	}

	return nil
}

func (o *CreateDeviceUsingPOSTBody) validateSensors(formats strfmt.Registry) error {

	if swag.IsZero(o.Sensors) { // not required
		return nil
	}

	for i := 0; i < len(o.Sensors); i++ {
		if swag.IsZero(o.Sensors[i]) { // not required
			continue
		}

		if o.Sensors[i] != nil {
			if err := o.Sensors[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("request" + "." + "sensors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateDeviceUsingPOSTBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateDeviceUsingPOSTBody) UnmarshalBinary(b []byte) error {
	var res CreateDeviceUsingPOSTBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*CreateDeviceUsingPOSTConflictBody Response
swagger:model CreateDeviceUsingPOSTConflictBody
*/
type CreateDeviceUsingPOSTConflictBody struct {

	// message
	// Required: true
	Message *string `json:"message"`
}

// Validate validates this create device using p o s t conflict body
func (o *CreateDeviceUsingPOSTConflictBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateDeviceUsingPOSTConflictBody) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("createDeviceUsingPOSTConflict"+"."+"message", "body", o.Message); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateDeviceUsingPOSTConflictBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateDeviceUsingPOSTConflictBody) UnmarshalBinary(b []byte) error {
	var res CreateDeviceUsingPOSTConflictBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*CreateDeviceUsingPOSTOKBody DeviceBean
swagger:model CreateDeviceUsingPOSTOKBody
*/
type CreateDeviceUsingPOSTOKBody struct {

	// The alternate ID of the device (e.g., serial number crafted into the device). This field is unique across gateway.
	AlternateID string `json:"alternateId,omitempty"`

	// Authentications of the device.
	// Read Only: true
	Authentications []*CreateDeviceUsingPOSTOKBodyAuthenticationsItems0 `json:"authentications"`

	// Authorizations of the device.
	// Read Only: true
	Authorizations []*CreateDeviceUsingPOSTOKBodyAuthorizationsItems0 `json:"authorizations"`

	// Unix time in milliseconds. The timestamp indicates when the device was added to the the platform. This field is an immutable.
	// Read Only: true
	// Format: date-time
	// CreationTimestamp strfmt.DateTime `json:"creationTimestamp,omitempty"`

	// A set of user defined properties represented as key value pair.
	CustomProperties []*CreateDeviceUsingPOSTOKBodyCustomPropertiesItems0 `json:"customProperties"`

	// The ID of the associated gateway. This field is an immutable.
	// Required: true
	GatewayID *string `json:"gatewayId"`

	// A unique identifier of a device. Is generated by the system and unique across platform tenant. This field is an immutable.
	// Read Only: true
	ID string `json:"id,omitempty"`

	// The name of the device.
	// Required: true
	Name *string `json:"name"`

	// The online status
	// Read Only: true
	Online *bool `json:"online,omitempty"`

	// The set of sensors that compose the device. DeviceId is not required to be given to sensor while creating device and sensor together
	Sensors []*CreateDeviceUsingPOSTOKBodySensorsItems0 `json:"sensors"`
}

// Validate validates this create device using p o s t o k body
func (o *CreateDeviceUsingPOSTOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAuthentications(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateAuthorizations(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCreationTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCustomProperties(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateGatewayID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSensors(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateDeviceUsingPOSTOKBody) validateAuthentications(formats strfmt.Registry) error {

	if swag.IsZero(o.Authentications) { // not required
		return nil
	}

	for i := 0; i < len(o.Authentications); i++ {
		if swag.IsZero(o.Authentications[i]) { // not required
			continue
		}

		if o.Authentications[i] != nil {
			if err := o.Authentications[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("createDeviceUsingPOSTOK" + "." + "authentications" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *CreateDeviceUsingPOSTOKBody) validateAuthorizations(formats strfmt.Registry) error {

	if swag.IsZero(o.Authorizations) { // not required
		return nil
	}

	for i := 0; i < len(o.Authorizations); i++ {
		if swag.IsZero(o.Authorizations[i]) { // not required
			continue
		}

		if o.Authorizations[i] != nil {
			if err := o.Authorizations[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("createDeviceUsingPOSTOK" + "." + "authorizations" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *CreateDeviceUsingPOSTOKBody) validateCreationTimestamp(formats strfmt.Registry) error {
	/*
		if swag.IsZero(o.CreationTimestamp) { // not required
			return nil
		}

		if err := validate.FormatOf("createDeviceUsingPOSTOK"+"."+"creationTimestamp", "body", "date-time", o.CreationTimestamp.String(), formats); err != nil {
			return err
		}
	*/
	return nil
}

func (o *CreateDeviceUsingPOSTOKBody) validateCustomProperties(formats strfmt.Registry) error {

	if swag.IsZero(o.CustomProperties) { // not required
		return nil
	}

	for i := 0; i < len(o.CustomProperties); i++ {
		if swag.IsZero(o.CustomProperties[i]) { // not required
			continue
		}

		if o.CustomProperties[i] != nil {
			if err := o.CustomProperties[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("createDeviceUsingPOSTOK" + "." + "customProperties" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *CreateDeviceUsingPOSTOKBody) validateGatewayID(formats strfmt.Registry) error {

	if err := validate.Required("createDeviceUsingPOSTOK"+"."+"gatewayId", "body", o.GatewayID); err != nil {
		return err
	}

	return nil
}

func (o *CreateDeviceUsingPOSTOKBody) validateName(formats strfmt.Registry) error {

	if err := validate.Required("createDeviceUsingPOSTOK"+"."+"name", "body", o.Name); err != nil {
		return err
	}

	return nil
}

func (o *CreateDeviceUsingPOSTOKBody) validateSensors(formats strfmt.Registry) error {

	if swag.IsZero(o.Sensors) { // not required
		return nil
	}

	for i := 0; i < len(o.Sensors); i++ {
		if swag.IsZero(o.Sensors[i]) { // not required
			continue
		}

		if o.Sensors[i] != nil {
			if err := o.Sensors[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("createDeviceUsingPOSTOK" + "." + "sensors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateDeviceUsingPOSTOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateDeviceUsingPOSTOKBody) UnmarshalBinary(b []byte) error {
	var res CreateDeviceUsingPOSTOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*CreateDeviceUsingPOSTOKBodyAuthenticationsItems0 AuthenticationBean
swagger:model CreateDeviceUsingPOSTOKBodyAuthenticationsItems0
*/
type CreateDeviceUsingPOSTOKBodyAuthenticationsItems0 struct {

	// The password for the user.
	Password string `json:"password,omitempty"`

	// The authentication type. Not required when updating user password.
	// Enum: [basic clientCertificate jwt]
	Type string `json:"type,omitempty"`
}

// Validate validates this create device using p o s t o k body authentications items0
func (o *CreateDeviceUsingPOSTOKBodyAuthenticationsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var createDeviceUsingPOSTOKBodyAuthenticationsItems0TypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["basic","clientCertificate","jwt"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		createDeviceUsingPOSTOKBodyAuthenticationsItems0TypeTypePropEnum = append(createDeviceUsingPOSTOKBodyAuthenticationsItems0TypeTypePropEnum, v)
	}
}

const (

	// CreateDeviceUsingPOSTOKBodyAuthenticationsItems0TypeBasic captures enum value "basic"
	CreateDeviceUsingPOSTOKBodyAuthenticationsItems0TypeBasic string = "basic"

	// CreateDeviceUsingPOSTOKBodyAuthenticationsItems0TypeClientCertificate captures enum value "clientCertificate"
	CreateDeviceUsingPOSTOKBodyAuthenticationsItems0TypeClientCertificate string = "clientCertificate"

	// CreateDeviceUsingPOSTOKBodyAuthenticationsItems0TypeJwt captures enum value "jwt"
	CreateDeviceUsingPOSTOKBodyAuthenticationsItems0TypeJwt string = "jwt"
)

// prop value enum
func (o *CreateDeviceUsingPOSTOKBodyAuthenticationsItems0) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, createDeviceUsingPOSTOKBodyAuthenticationsItems0TypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *CreateDeviceUsingPOSTOKBodyAuthenticationsItems0) validateType(formats strfmt.Registry) error {

	if swag.IsZero(o.Type) { // not required
		return nil
	}

	// value enum
	if err := o.validateTypeEnum("type", "body", o.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateDeviceUsingPOSTOKBodyAuthenticationsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateDeviceUsingPOSTOKBodyAuthenticationsItems0) UnmarshalBinary(b []byte) error {
	var res CreateDeviceUsingPOSTOKBodyAuthenticationsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*CreateDeviceUsingPOSTOKBodyAuthorizationsItems0 AuthorizationBean
swagger:model CreateDeviceUsingPOSTOKBodyAuthorizationsItems0
*/
type CreateDeviceUsingPOSTOKBodyAuthorizationsItems0 struct {

	// The type of device authorization policies
	// Enum: [router]
	Type string `json:"type,omitempty"`
}

// Validate validates this create device using p o s t o k body authorizations items0
func (o *CreateDeviceUsingPOSTOKBodyAuthorizationsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var createDeviceUsingPOSTOKBodyAuthorizationsItems0TypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["router"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		createDeviceUsingPOSTOKBodyAuthorizationsItems0TypeTypePropEnum = append(createDeviceUsingPOSTOKBodyAuthorizationsItems0TypeTypePropEnum, v)
	}
}

const (

	// CreateDeviceUsingPOSTOKBodyAuthorizationsItems0TypeRouter captures enum value "router"
	CreateDeviceUsingPOSTOKBodyAuthorizationsItems0TypeRouter string = "router"
)

// prop value enum
func (o *CreateDeviceUsingPOSTOKBodyAuthorizationsItems0) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, createDeviceUsingPOSTOKBodyAuthorizationsItems0TypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *CreateDeviceUsingPOSTOKBodyAuthorizationsItems0) validateType(formats strfmt.Registry) error {

	if swag.IsZero(o.Type) { // not required
		return nil
	}

	// value enum
	if err := o.validateTypeEnum("type", "body", o.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateDeviceUsingPOSTOKBodyAuthorizationsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateDeviceUsingPOSTOKBodyAuthorizationsItems0) UnmarshalBinary(b []byte) error {
	var res CreateDeviceUsingPOSTOKBodyAuthorizationsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*CreateDeviceUsingPOSTOKBodyCustomPropertiesItems0 CustomPropertyBean
swagger:model CreateDeviceUsingPOSTOKBodyCustomPropertiesItems0
*/
type CreateDeviceUsingPOSTOKBodyCustomPropertiesItems0 struct {

	// A unique identifier of a custom property. Is defined by the user. This field is an immutable.
	// Required: true
	Key *string `json:"key"`

	// Value of the custom property.
	// Required: true
	Value *string `json:"value"`
}

// Validate validates this create device using p o s t o k body custom properties items0
func (o *CreateDeviceUsingPOSTOKBodyCustomPropertiesItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateKey(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateValue(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateDeviceUsingPOSTOKBodyCustomPropertiesItems0) validateKey(formats strfmt.Registry) error {

	if err := validate.Required("key", "body", o.Key); err != nil {
		return err
	}

	return nil
}

func (o *CreateDeviceUsingPOSTOKBodyCustomPropertiesItems0) validateValue(formats strfmt.Registry) error {

	if err := validate.Required("value", "body", o.Value); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateDeviceUsingPOSTOKBodyCustomPropertiesItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateDeviceUsingPOSTOKBodyCustomPropertiesItems0) UnmarshalBinary(b []byte) error {
	var res CreateDeviceUsingPOSTOKBodyCustomPropertiesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*CreateDeviceUsingPOSTOKBodySensorsItems0 SensorBean
swagger:model CreateDeviceUsingPOSTOKBodySensorsItems0
*/
type CreateDeviceUsingPOSTOKBodySensorsItems0 struct {

	// The alternate ID of the sensor. This field is unique across device.
	AlternateID string `json:"alternateId,omitempty"`

	// A set of user defined properties represented as key value pair.
	CustomProperties []*CreateDeviceUsingPOSTOKBodySensorsItems0CustomPropertiesItems0 `json:"customProperties"`

	// The ID of the related device. DeviceId is not required to be given to sensor while creating device and sensor together
	// Required: true
	DeviceID *string `json:"deviceId"`

	// Identifier of a sensor. Is generated by the system and unique across platform tenant. This field is an immutable.
	// Read Only: true
	ID string `json:"id,omitempty"`

	// The name of the sensor
	// Required: true
	Name *string `json:"name"`

	// The ID of the SensorType
	// Required: true
	SensorTypeID *string `json:"sensorTypeId"`
}

// Validate validates this create device using p o s t o k body sensors items0
func (o *CreateDeviceUsingPOSTOKBodySensorsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCustomProperties(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDeviceID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSensorTypeID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateDeviceUsingPOSTOKBodySensorsItems0) validateCustomProperties(formats strfmt.Registry) error {

	if swag.IsZero(o.CustomProperties) { // not required
		return nil
	}

	for i := 0; i < len(o.CustomProperties); i++ {
		if swag.IsZero(o.CustomProperties[i]) { // not required
			continue
		}

		if o.CustomProperties[i] != nil {
			if err := o.CustomProperties[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("customProperties" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *CreateDeviceUsingPOSTOKBodySensorsItems0) validateDeviceID(formats strfmt.Registry) error {

	if err := validate.Required("deviceId", "body", o.DeviceID); err != nil {
		return err
	}

	return nil
}

func (o *CreateDeviceUsingPOSTOKBodySensorsItems0) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", o.Name); err != nil {
		return err
	}

	return nil
}

func (o *CreateDeviceUsingPOSTOKBodySensorsItems0) validateSensorTypeID(formats strfmt.Registry) error {

	if err := validate.Required("sensorTypeId", "body", o.SensorTypeID); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateDeviceUsingPOSTOKBodySensorsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateDeviceUsingPOSTOKBodySensorsItems0) UnmarshalBinary(b []byte) error {
	var res CreateDeviceUsingPOSTOKBodySensorsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*CreateDeviceUsingPOSTOKBodySensorsItems0CustomPropertiesItems0 CustomPropertyBean
swagger:model CreateDeviceUsingPOSTOKBodySensorsItems0CustomPropertiesItems0
*/
type CreateDeviceUsingPOSTOKBodySensorsItems0CustomPropertiesItems0 struct {

	// A unique identifier of a custom property. Is defined by the user. This field is an immutable.
	// Required: true
	Key *string `json:"key"`

	// Value of the custom property.
	// Required: true
	Value *string `json:"value"`
}

// Validate validates this create device using p o s t o k body sensors items0 custom properties items0
func (o *CreateDeviceUsingPOSTOKBodySensorsItems0CustomPropertiesItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateKey(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateValue(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateDeviceUsingPOSTOKBodySensorsItems0CustomPropertiesItems0) validateKey(formats strfmt.Registry) error {

	if err := validate.Required("key", "body", o.Key); err != nil {
		return err
	}

	return nil
}

func (o *CreateDeviceUsingPOSTOKBodySensorsItems0CustomPropertiesItems0) validateValue(formats strfmt.Registry) error {

	if err := validate.Required("value", "body", o.Value); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateDeviceUsingPOSTOKBodySensorsItems0CustomPropertiesItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateDeviceUsingPOSTOKBodySensorsItems0CustomPropertiesItems0) UnmarshalBinary(b []byte) error {
	var res CreateDeviceUsingPOSTOKBodySensorsItems0CustomPropertiesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*CreateDeviceUsingPOSTParamsBodyAuthenticationsItems0 AuthenticationBean
swagger:model CreateDeviceUsingPOSTParamsBodyAuthenticationsItems0
*/
type CreateDeviceUsingPOSTParamsBodyAuthenticationsItems0 struct {

	// The password for the user.
	Password string `json:"password,omitempty"`

	// The authentication type. Not required when updating user password.
	// Enum: [basic clientCertificate jwt]
	Type string `json:"type,omitempty"`
}

// Validate validates this create device using p o s t params body authentications items0
func (o *CreateDeviceUsingPOSTParamsBodyAuthenticationsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var createDeviceUsingPOSTParamsBodyAuthenticationsItems0TypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["basic","clientCertificate","jwt"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		createDeviceUsingPOSTParamsBodyAuthenticationsItems0TypeTypePropEnum = append(createDeviceUsingPOSTParamsBodyAuthenticationsItems0TypeTypePropEnum, v)
	}
}

const (

	// CreateDeviceUsingPOSTParamsBodyAuthenticationsItems0TypeBasic captures enum value "basic"
	CreateDeviceUsingPOSTParamsBodyAuthenticationsItems0TypeBasic string = "basic"

	// CreateDeviceUsingPOSTParamsBodyAuthenticationsItems0TypeClientCertificate captures enum value "clientCertificate"
	CreateDeviceUsingPOSTParamsBodyAuthenticationsItems0TypeClientCertificate string = "clientCertificate"

	// CreateDeviceUsingPOSTParamsBodyAuthenticationsItems0TypeJwt captures enum value "jwt"
	CreateDeviceUsingPOSTParamsBodyAuthenticationsItems0TypeJwt string = "jwt"
)

// prop value enum
func (o *CreateDeviceUsingPOSTParamsBodyAuthenticationsItems0) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, createDeviceUsingPOSTParamsBodyAuthenticationsItems0TypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *CreateDeviceUsingPOSTParamsBodyAuthenticationsItems0) validateType(formats strfmt.Registry) error {

	if swag.IsZero(o.Type) { // not required
		return nil
	}

	// value enum
	if err := o.validateTypeEnum("type", "body", o.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateDeviceUsingPOSTParamsBodyAuthenticationsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateDeviceUsingPOSTParamsBodyAuthenticationsItems0) UnmarshalBinary(b []byte) error {
	var res CreateDeviceUsingPOSTParamsBodyAuthenticationsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*CreateDeviceUsingPOSTParamsBodyAuthorizationsItems0 AuthorizationBean
swagger:model CreateDeviceUsingPOSTParamsBodyAuthorizationsItems0
*/
type CreateDeviceUsingPOSTParamsBodyAuthorizationsItems0 struct {

	// The type of device authorization policies
	// Enum: [router]
	Type string `json:"type,omitempty"`
}

// Validate validates this create device using p o s t params body authorizations items0
func (o *CreateDeviceUsingPOSTParamsBodyAuthorizationsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var createDeviceUsingPOSTParamsBodyAuthorizationsItems0TypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["router"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		createDeviceUsingPOSTParamsBodyAuthorizationsItems0TypeTypePropEnum = append(createDeviceUsingPOSTParamsBodyAuthorizationsItems0TypeTypePropEnum, v)
	}
}

const (

	// CreateDeviceUsingPOSTParamsBodyAuthorizationsItems0TypeRouter captures enum value "router"
	CreateDeviceUsingPOSTParamsBodyAuthorizationsItems0TypeRouter string = "router"
)

// prop value enum
func (o *CreateDeviceUsingPOSTParamsBodyAuthorizationsItems0) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, createDeviceUsingPOSTParamsBodyAuthorizationsItems0TypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *CreateDeviceUsingPOSTParamsBodyAuthorizationsItems0) validateType(formats strfmt.Registry) error {

	if swag.IsZero(o.Type) { // not required
		return nil
	}

	// value enum
	if err := o.validateTypeEnum("type", "body", o.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateDeviceUsingPOSTParamsBodyAuthorizationsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateDeviceUsingPOSTParamsBodyAuthorizationsItems0) UnmarshalBinary(b []byte) error {
	var res CreateDeviceUsingPOSTParamsBodyAuthorizationsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*CreateDeviceUsingPOSTParamsBodyCustomPropertiesItems0 CustomPropertyBean
swagger:model CreateDeviceUsingPOSTParamsBodyCustomPropertiesItems0
*/
type CreateDeviceUsingPOSTParamsBodyCustomPropertiesItems0 struct {

	// A unique identifier of a custom property. Is defined by the user. This field is an immutable.
	// Required: true
	Key *string `json:"key"`

	// Value of the custom property.
	// Required: true
	Value *string `json:"value"`
}

// Validate validates this create device using p o s t params body custom properties items0
func (o *CreateDeviceUsingPOSTParamsBodyCustomPropertiesItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateKey(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateValue(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateDeviceUsingPOSTParamsBodyCustomPropertiesItems0) validateKey(formats strfmt.Registry) error {

	if err := validate.Required("key", "body", o.Key); err != nil {
		return err
	}

	return nil
}

func (o *CreateDeviceUsingPOSTParamsBodyCustomPropertiesItems0) validateValue(formats strfmt.Registry) error {

	if err := validate.Required("value", "body", o.Value); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateDeviceUsingPOSTParamsBodyCustomPropertiesItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateDeviceUsingPOSTParamsBodyCustomPropertiesItems0) UnmarshalBinary(b []byte) error {
	var res CreateDeviceUsingPOSTParamsBodyCustomPropertiesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*CreateDeviceUsingPOSTParamsBodySensorsItems0 SensorBean
swagger:model CreateDeviceUsingPOSTParamsBodySensorsItems0
*/
type CreateDeviceUsingPOSTParamsBodySensorsItems0 struct {

	// The alternate ID of the sensor. This field is unique across device.
	AlternateID string `json:"alternateId,omitempty"`

	// A set of user defined properties represented as key value pair.
	CustomProperties []*CreateDeviceUsingPOSTParamsBodySensorsItems0CustomPropertiesItems0 `json:"customProperties"`

	// The ID of the related device. DeviceId is not required to be given to sensor while creating device and sensor together
	// Required: true
	DeviceID *string `json:"deviceId"`

	// Identifier of a sensor. Is generated by the system and unique across platform tenant. This field is an immutable.
	// Read Only: true
	ID string `json:"id,omitempty"`

	// The name of the sensor
	// Required: true
	Name *string `json:"name"`

	// The ID of the SensorType
	// Required: true
	SensorTypeID *string `json:"sensorTypeId"`
}

// Validate validates this create device using p o s t params body sensors items0
func (o *CreateDeviceUsingPOSTParamsBodySensorsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCustomProperties(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDeviceID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSensorTypeID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateDeviceUsingPOSTParamsBodySensorsItems0) validateCustomProperties(formats strfmt.Registry) error {

	if swag.IsZero(o.CustomProperties) { // not required
		return nil
	}

	for i := 0; i < len(o.CustomProperties); i++ {
		if swag.IsZero(o.CustomProperties[i]) { // not required
			continue
		}

		if o.CustomProperties[i] != nil {
			if err := o.CustomProperties[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("customProperties" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *CreateDeviceUsingPOSTParamsBodySensorsItems0) validateDeviceID(formats strfmt.Registry) error {

	if err := validate.Required("deviceId", "body", o.DeviceID); err != nil {
		return err
	}

	return nil
}

func (o *CreateDeviceUsingPOSTParamsBodySensorsItems0) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", o.Name); err != nil {
		return err
	}

	return nil
}

func (o *CreateDeviceUsingPOSTParamsBodySensorsItems0) validateSensorTypeID(formats strfmt.Registry) error {

	if err := validate.Required("sensorTypeId", "body", o.SensorTypeID); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateDeviceUsingPOSTParamsBodySensorsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateDeviceUsingPOSTParamsBodySensorsItems0) UnmarshalBinary(b []byte) error {
	var res CreateDeviceUsingPOSTParamsBodySensorsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*CreateDeviceUsingPOSTParamsBodySensorsItems0CustomPropertiesItems0 CustomPropertyBean
swagger:model CreateDeviceUsingPOSTParamsBodySensorsItems0CustomPropertiesItems0
*/
type CreateDeviceUsingPOSTParamsBodySensorsItems0CustomPropertiesItems0 struct {

	// A unique identifier of a custom property. Is defined by the user. This field is an immutable.
	// Required: true
	Key *string `json:"key"`

	// Value of the custom property.
	// Required: true
	Value *string `json:"value"`
}

// Validate validates this create device using p o s t params body sensors items0 custom properties items0
func (o *CreateDeviceUsingPOSTParamsBodySensorsItems0CustomPropertiesItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateKey(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateValue(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateDeviceUsingPOSTParamsBodySensorsItems0CustomPropertiesItems0) validateKey(formats strfmt.Registry) error {

	if err := validate.Required("key", "body", o.Key); err != nil {
		return err
	}

	return nil
}

func (o *CreateDeviceUsingPOSTParamsBodySensorsItems0CustomPropertiesItems0) validateValue(formats strfmt.Registry) error {

	if err := validate.Required("value", "body", o.Value); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateDeviceUsingPOSTParamsBodySensorsItems0CustomPropertiesItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateDeviceUsingPOSTParamsBodySensorsItems0CustomPropertiesItems0) UnmarshalBinary(b []byte) error {
	var res CreateDeviceUsingPOSTParamsBodySensorsItems0CustomPropertiesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
