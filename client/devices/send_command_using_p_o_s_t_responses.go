// Code generated by go-swagger; DO NOT EDIT.

package devices

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SendCommandUsingPOSTReader is a Reader for the SendCommandUsingPOST structure.
type SendCommandUsingPOSTReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SendCommandUsingPOSTReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 202:
		result := NewSendCommandUsingPOSTAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewSendCommandUsingPOSTBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewSendCommandUsingPOSTNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewSendCommandUsingPOSTConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewSendCommandUsingPOSTAccepted creates a SendCommandUsingPOSTAccepted with default headers values
func NewSendCommandUsingPOSTAccepted() *SendCommandUsingPOSTAccepted {
	return &SendCommandUsingPOSTAccepted{}
}

/*SendCommandUsingPOSTAccepted handles this case with default header values.

Successfully sent command to gateway.
*/
type SendCommandUsingPOSTAccepted struct {
	Payload *SendCommandUsingPOSTAcceptedBody
}

func (o *SendCommandUsingPOSTAccepted) Error() string {
	return fmt.Sprintf("[POST /v1/tenant/{tenantId}/devices/{deviceId}/commands][%d] sendCommandUsingPOSTAccepted  %+v", 202, o.Payload)
}

func (o *SendCommandUsingPOSTAccepted) GetPayload() *SendCommandUsingPOSTAcceptedBody {
	return o.Payload
}

func (o *SendCommandUsingPOSTAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(SendCommandUsingPOSTAcceptedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSendCommandUsingPOSTBadRequest creates a SendCommandUsingPOSTBadRequest with default headers values
func NewSendCommandUsingPOSTBadRequest() *SendCommandUsingPOSTBadRequest {
	return &SendCommandUsingPOSTBadRequest{}
}

/*SendCommandUsingPOSTBadRequest handles this case with default header values.

HTTP request is malformed.
*/
type SendCommandUsingPOSTBadRequest struct {
	Payload *SendCommandUsingPOSTBadRequestBody
}

func (o *SendCommandUsingPOSTBadRequest) Error() string {
	return fmt.Sprintf("[POST /v1/tenant/{tenantId}/devices/{deviceId}/commands][%d] sendCommandUsingPOSTBadRequest  %+v", 400, o.Payload)
}

func (o *SendCommandUsingPOSTBadRequest) GetPayload() *SendCommandUsingPOSTBadRequestBody {
	return o.Payload
}

func (o *SendCommandUsingPOSTBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(SendCommandUsingPOSTBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSendCommandUsingPOSTNotFound creates a SendCommandUsingPOSTNotFound with default headers values
func NewSendCommandUsingPOSTNotFound() *SendCommandUsingPOSTNotFound {
	return &SendCommandUsingPOSTNotFound{}
}

/*SendCommandUsingPOSTNotFound handles this case with default header values.

Device, sensor, or capability with specified id does not exist.
*/
type SendCommandUsingPOSTNotFound struct {
	Payload *SendCommandUsingPOSTNotFoundBody
}

func (o *SendCommandUsingPOSTNotFound) Error() string {
	return fmt.Sprintf("[POST /v1/tenant/{tenantId}/devices/{deviceId}/commands][%d] sendCommandUsingPOSTNotFound  %+v", 404, o.Payload)
}

func (o *SendCommandUsingPOSTNotFound) GetPayload() *SendCommandUsingPOSTNotFoundBody {
	return o.Payload
}

func (o *SendCommandUsingPOSTNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(SendCommandUsingPOSTNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSendCommandUsingPOSTConflict creates a SendCommandUsingPOSTConflict with default headers values
func NewSendCommandUsingPOSTConflict() *SendCommandUsingPOSTConflict {
	return &SendCommandUsingPOSTConflict{}
}

/*SendCommandUsingPOSTConflict handles this case with default header values.

Command could not be send to the device.
*/
type SendCommandUsingPOSTConflict struct {
	Payload *SendCommandUsingPOSTConflictBody
}

func (o *SendCommandUsingPOSTConflict) Error() string {
	return fmt.Sprintf("[POST /v1/tenant/{tenantId}/devices/{deviceId}/commands][%d] sendCommandUsingPOSTConflict  %+v", 409, o.Payload)
}

func (o *SendCommandUsingPOSTConflict) GetPayload() *SendCommandUsingPOSTConflictBody {
	return o.Payload
}

func (o *SendCommandUsingPOSTConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(SendCommandUsingPOSTConflictBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*SendCommandUsingPOSTAcceptedBody Response
swagger:model SendCommandUsingPOSTAcceptedBody
*/
type SendCommandUsingPOSTAcceptedBody struct {

	// message
	// Required: true
	Message *string `json:"message"`
}

// Validate validates this send command using p o s t accepted body
func (o *SendCommandUsingPOSTAcceptedBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *SendCommandUsingPOSTAcceptedBody) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("sendCommandUsingPOSTAccepted"+"."+"message", "body", o.Message); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *SendCommandUsingPOSTAcceptedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SendCommandUsingPOSTAcceptedBody) UnmarshalBinary(b []byte) error {
	var res SendCommandUsingPOSTAcceptedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*SendCommandUsingPOSTBadRequestBody Response
swagger:model SendCommandUsingPOSTBadRequestBody
*/
type SendCommandUsingPOSTBadRequestBody struct {

	// message
	// Required: true
	Message *string `json:"message"`
}

// Validate validates this send command using p o s t bad request body
func (o *SendCommandUsingPOSTBadRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *SendCommandUsingPOSTBadRequestBody) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("sendCommandUsingPOSTBadRequest"+"."+"message", "body", o.Message); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *SendCommandUsingPOSTBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SendCommandUsingPOSTBadRequestBody) UnmarshalBinary(b []byte) error {
	var res SendCommandUsingPOSTBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*SendCommandUsingPOSTBody CommandBean
swagger:model SendCommandUsingPOSTBody
*/
type SendCommandUsingPOSTBody struct {

	// capability Id
	CapabilityID string `json:"capabilityId,omitempty"`

	// command
	Command interface{} `json:"command,omitempty"`

	// sensor Id
	SensorID string `json:"sensorId,omitempty"`
}

// Validate validates this send command using p o s t body
func (o *SendCommandUsingPOSTBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *SendCommandUsingPOSTBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SendCommandUsingPOSTBody) UnmarshalBinary(b []byte) error {
	var res SendCommandUsingPOSTBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*SendCommandUsingPOSTConflictBody Response
swagger:model SendCommandUsingPOSTConflictBody
*/
type SendCommandUsingPOSTConflictBody struct {

	// message
	// Required: true
	Message *string `json:"message"`
}

// Validate validates this send command using p o s t conflict body
func (o *SendCommandUsingPOSTConflictBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *SendCommandUsingPOSTConflictBody) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("sendCommandUsingPOSTConflict"+"."+"message", "body", o.Message); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *SendCommandUsingPOSTConflictBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SendCommandUsingPOSTConflictBody) UnmarshalBinary(b []byte) error {
	var res SendCommandUsingPOSTConflictBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*SendCommandUsingPOSTNotFoundBody Response
swagger:model SendCommandUsingPOSTNotFoundBody
*/
type SendCommandUsingPOSTNotFoundBody struct {

	// message
	// Required: true
	Message *string `json:"message"`
}

// Validate validates this send command using p o s t not found body
func (o *SendCommandUsingPOSTNotFoundBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *SendCommandUsingPOSTNotFoundBody) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("sendCommandUsingPOSTNotFound"+"."+"message", "body", o.Message); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *SendCommandUsingPOSTNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SendCommandUsingPOSTNotFoundBody) UnmarshalBinary(b []byte) error {
	var res SendCommandUsingPOSTNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
