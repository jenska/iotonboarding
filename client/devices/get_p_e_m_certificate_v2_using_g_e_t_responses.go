// Code generated by go-swagger; DO NOT EDIT.

package devices

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GetPEMCertificateV2UsingGETReader is a Reader for the GetPEMCertificateV2UsingGET structure.
type GetPEMCertificateV2UsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetPEMCertificateV2UsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetPEMCertificateV2UsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetPEMCertificateV2UsingGETBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetPEMCertificateV2UsingGETNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetPEMCertificateV2UsingGETOK creates a GetPEMCertificateV2UsingGETOK with default headers values
func NewGetPEMCertificateV2UsingGETOK() *GetPEMCertificateV2UsingGETOK {
	return &GetPEMCertificateV2UsingGETOK{}
}

/*GetPEMCertificateV2UsingGETOK handles this case with default header values.

Successfully created device certificate.
*/
type GetPEMCertificateV2UsingGETOK struct {
	Payload *GetPEMCertificateV2UsingGETOKBody
}

func (o *GetPEMCertificateV2UsingGETOK) Error() string {
	return fmt.Sprintf("[GET /v2/tenant/{tenantId}/devices/{deviceId}/authentications/clientCertificate/pem][%d] getPEMCertificateV2UsingGETOK  %+v", 200, o.Payload)
}

func (o *GetPEMCertificateV2UsingGETOK) GetPayload() *GetPEMCertificateV2UsingGETOKBody {
	return o.Payload
}

func (o *GetPEMCertificateV2UsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetPEMCertificateV2UsingGETOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetPEMCertificateV2UsingGETBadRequest creates a GetPEMCertificateV2UsingGETBadRequest with default headers values
func NewGetPEMCertificateV2UsingGETBadRequest() *GetPEMCertificateV2UsingGETBadRequest {
	return &GetPEMCertificateV2UsingGETBadRequest{}
}

/*GetPEMCertificateV2UsingGETBadRequest handles this case with default header values.

HTTP request is malformed.
*/
type GetPEMCertificateV2UsingGETBadRequest struct {
	Payload *GetPEMCertificateV2UsingGETBadRequestBody
}

func (o *GetPEMCertificateV2UsingGETBadRequest) Error() string {
	return fmt.Sprintf("[GET /v2/tenant/{tenantId}/devices/{deviceId}/authentications/clientCertificate/pem][%d] getPEMCertificateV2UsingGETBadRequest  %+v", 400, o.Payload)
}

func (o *GetPEMCertificateV2UsingGETBadRequest) GetPayload() *GetPEMCertificateV2UsingGETBadRequestBody {
	return o.Payload
}

func (o *GetPEMCertificateV2UsingGETBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetPEMCertificateV2UsingGETBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetPEMCertificateV2UsingGETNotFound creates a GetPEMCertificateV2UsingGETNotFound with default headers values
func NewGetPEMCertificateV2UsingGETNotFound() *GetPEMCertificateV2UsingGETNotFound {
	return &GetPEMCertificateV2UsingGETNotFound{}
}

/*GetPEMCertificateV2UsingGETNotFound handles this case with default header values.

Device with specified id does not exist.
*/
type GetPEMCertificateV2UsingGETNotFound struct {
	Payload *GetPEMCertificateV2UsingGETNotFoundBody
}

func (o *GetPEMCertificateV2UsingGETNotFound) Error() string {
	return fmt.Sprintf("[GET /v2/tenant/{tenantId}/devices/{deviceId}/authentications/clientCertificate/pem][%d] getPEMCertificateV2UsingGETNotFound  %+v", 404, o.Payload)
}

func (o *GetPEMCertificateV2UsingGETNotFound) GetPayload() *GetPEMCertificateV2UsingGETNotFoundBody {
	return o.Payload
}

func (o *GetPEMCertificateV2UsingGETNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetPEMCertificateV2UsingGETNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*GetPEMCertificateV2UsingGETBadRequestBody Response
swagger:model GetPEMCertificateV2UsingGETBadRequestBody
*/
type GetPEMCertificateV2UsingGETBadRequestBody struct {

	// message
	// Required: true
	Message *string `json:"message"`
}

// Validate validates this get p e m certificate v2 using g e t bad request body
func (o *GetPEMCertificateV2UsingGETBadRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetPEMCertificateV2UsingGETBadRequestBody) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("getPEMCertificateV2UsingGETBadRequest"+"."+"message", "body", o.Message); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetPEMCertificateV2UsingGETBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetPEMCertificateV2UsingGETBadRequestBody) UnmarshalBinary(b []byte) error {
	var res GetPEMCertificateV2UsingGETBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetPEMCertificateV2UsingGETNotFoundBody Response
swagger:model GetPEMCertificateV2UsingGETNotFoundBody
*/
type GetPEMCertificateV2UsingGETNotFoundBody struct {

	// message
	// Required: true
	Message *string `json:"message"`
}

// Validate validates this get p e m certificate v2 using g e t not found body
func (o *GetPEMCertificateV2UsingGETNotFoundBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetPEMCertificateV2UsingGETNotFoundBody) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("getPEMCertificateV2UsingGETNotFound"+"."+"message", "body", o.Message); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetPEMCertificateV2UsingGETNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetPEMCertificateV2UsingGETNotFoundBody) UnmarshalBinary(b []byte) error {
	var res GetPEMCertificateV2UsingGETNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetPEMCertificateV2UsingGETOKBody ClientCertificateAuthenticationBean
swagger:model GetPEMCertificateV2UsingGETOKBody
*/
type GetPEMCertificateV2UsingGETOKBody struct {

	// csr
	Csr string `json:"csr,omitempty"`

	// p12
	// Read Only: true
	P12 string `json:"p12,omitempty"`

	// pem
	// Read Only: true
	Pem string `json:"pem,omitempty"`

	// secret
	// Read Only: true
	Secret string `json:"secret,omitempty"`

	// The type of the authentication mechanism
	// Required: true
	// Enum: [clientCertificate]
	Type *string `json:"type"`
}

// Validate validates this get p e m certificate v2 using g e t o k body
func (o *GetPEMCertificateV2UsingGETOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var getPEMCertificateV2UsingGETOKBodyTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["clientCertificate"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		getPEMCertificateV2UsingGETOKBodyTypeTypePropEnum = append(getPEMCertificateV2UsingGETOKBodyTypeTypePropEnum, v)
	}
}

const (

	// GetPEMCertificateV2UsingGETOKBodyTypeClientCertificate captures enum value "clientCertificate"
	GetPEMCertificateV2UsingGETOKBodyTypeClientCertificate string = "clientCertificate"
)

// prop value enum
func (o *GetPEMCertificateV2UsingGETOKBody) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, getPEMCertificateV2UsingGETOKBodyTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *GetPEMCertificateV2UsingGETOKBody) validateType(formats strfmt.Registry) error {

	if err := validate.Required("getPEMCertificateV2UsingGETOK"+"."+"type", "body", o.Type); err != nil {
		return err
	}

	// value enum
	if err := o.validateTypeEnum("getPEMCertificateV2UsingGETOK"+"."+"type", "body", *o.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetPEMCertificateV2UsingGETOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetPEMCertificateV2UsingGETOKBody) UnmarshalBinary(b []byte) error {
	var res GetPEMCertificateV2UsingGETOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
