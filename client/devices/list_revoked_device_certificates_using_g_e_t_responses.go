// Code generated by go-swagger; DO NOT EDIT.

package devices

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ListRevokedDeviceCertificatesUsingGETReader is a Reader for the ListRevokedDeviceCertificatesUsingGET structure.
type ListRevokedDeviceCertificatesUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ListRevokedDeviceCertificatesUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewListRevokedDeviceCertificatesUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewListRevokedDeviceCertificatesUsingGETBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewListRevokedDeviceCertificatesUsingGETNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewListRevokedDeviceCertificatesUsingGETOK creates a ListRevokedDeviceCertificatesUsingGETOK with default headers values
func NewListRevokedDeviceCertificatesUsingGETOK() *ListRevokedDeviceCertificatesUsingGETOK {
	return &ListRevokedDeviceCertificatesUsingGETOK{}
}

/*ListRevokedDeviceCertificatesUsingGETOK handles this case with default header values.

Successfully returned revoked device certificate fingerprints.
*/
type ListRevokedDeviceCertificatesUsingGETOK struct {
	Payload []*ListRevokedDeviceCertificatesUsingGETOKBodyItems0
}

func (o *ListRevokedDeviceCertificatesUsingGETOK) Error() string {
	return fmt.Sprintf("[GET /v1/tenant/{tenantId}/devices/{deviceId}/authentications/clientCertificate/listRevoked][%d] listRevokedDeviceCertificatesUsingGETOK  %+v", 200, o.Payload)
}

func (o *ListRevokedDeviceCertificatesUsingGETOK) GetPayload() []*ListRevokedDeviceCertificatesUsingGETOKBodyItems0 {
	return o.Payload
}

func (o *ListRevokedDeviceCertificatesUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListRevokedDeviceCertificatesUsingGETBadRequest creates a ListRevokedDeviceCertificatesUsingGETBadRequest with default headers values
func NewListRevokedDeviceCertificatesUsingGETBadRequest() *ListRevokedDeviceCertificatesUsingGETBadRequest {
	return &ListRevokedDeviceCertificatesUsingGETBadRequest{}
}

/*ListRevokedDeviceCertificatesUsingGETBadRequest handles this case with default header values.

HTTP request is malformed.
*/
type ListRevokedDeviceCertificatesUsingGETBadRequest struct {
	Payload *ListRevokedDeviceCertificatesUsingGETBadRequestBody
}

func (o *ListRevokedDeviceCertificatesUsingGETBadRequest) Error() string {
	return fmt.Sprintf("[GET /v1/tenant/{tenantId}/devices/{deviceId}/authentications/clientCertificate/listRevoked][%d] listRevokedDeviceCertificatesUsingGETBadRequest  %+v", 400, o.Payload)
}

func (o *ListRevokedDeviceCertificatesUsingGETBadRequest) GetPayload() *ListRevokedDeviceCertificatesUsingGETBadRequestBody {
	return o.Payload
}

func (o *ListRevokedDeviceCertificatesUsingGETBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(ListRevokedDeviceCertificatesUsingGETBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListRevokedDeviceCertificatesUsingGETNotFound creates a ListRevokedDeviceCertificatesUsingGETNotFound with default headers values
func NewListRevokedDeviceCertificatesUsingGETNotFound() *ListRevokedDeviceCertificatesUsingGETNotFound {
	return &ListRevokedDeviceCertificatesUsingGETNotFound{}
}

/*ListRevokedDeviceCertificatesUsingGETNotFound handles this case with default header values.

Device does not exist.
*/
type ListRevokedDeviceCertificatesUsingGETNotFound struct {
	Payload *ListRevokedDeviceCertificatesUsingGETNotFoundBody
}

func (o *ListRevokedDeviceCertificatesUsingGETNotFound) Error() string {
	return fmt.Sprintf("[GET /v1/tenant/{tenantId}/devices/{deviceId}/authentications/clientCertificate/listRevoked][%d] listRevokedDeviceCertificatesUsingGETNotFound  %+v", 404, o.Payload)
}

func (o *ListRevokedDeviceCertificatesUsingGETNotFound) GetPayload() *ListRevokedDeviceCertificatesUsingGETNotFoundBody {
	return o.Payload
}

func (o *ListRevokedDeviceCertificatesUsingGETNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(ListRevokedDeviceCertificatesUsingGETNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*ListRevokedDeviceCertificatesUsingGETBadRequestBody Response
swagger:model ListRevokedDeviceCertificatesUsingGETBadRequestBody
*/
type ListRevokedDeviceCertificatesUsingGETBadRequestBody struct {

	// message
	// Required: true
	Message *string `json:"message"`
}

// Validate validates this list revoked device certificates using g e t bad request body
func (o *ListRevokedDeviceCertificatesUsingGETBadRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ListRevokedDeviceCertificatesUsingGETBadRequestBody) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("listRevokedDeviceCertificatesUsingGETBadRequest"+"."+"message", "body", o.Message); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *ListRevokedDeviceCertificatesUsingGETBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ListRevokedDeviceCertificatesUsingGETBadRequestBody) UnmarshalBinary(b []byte) error {
	var res ListRevokedDeviceCertificatesUsingGETBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ListRevokedDeviceCertificatesUsingGETNotFoundBody Response
swagger:model ListRevokedDeviceCertificatesUsingGETNotFoundBody
*/
type ListRevokedDeviceCertificatesUsingGETNotFoundBody struct {

	// message
	// Required: true
	Message *string `json:"message"`
}

// Validate validates this list revoked device certificates using g e t not found body
func (o *ListRevokedDeviceCertificatesUsingGETNotFoundBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ListRevokedDeviceCertificatesUsingGETNotFoundBody) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("listRevokedDeviceCertificatesUsingGETNotFound"+"."+"message", "body", o.Message); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *ListRevokedDeviceCertificatesUsingGETNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ListRevokedDeviceCertificatesUsingGETNotFoundBody) UnmarshalBinary(b []byte) error {
	var res ListRevokedDeviceCertificatesUsingGETNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ListRevokedDeviceCertificatesUsingGETOKBodyItems0 RevokedCertificateFingerprintBean
swagger:model ListRevokedDeviceCertificatesUsingGETOKBodyItems0
*/
type ListRevokedDeviceCertificatesUsingGETOKBodyItems0 struct {

	// The end validity date of the certificate. This field is an immutable.
	// Read Only: true
	// Format: date-time
	Expires strfmt.DateTime `json:"expires,omitempty"`

	// A unique identifier of the certificate. It is calculated by hashing the certificate with SHA-256 and is unique across the system.
	// Required: true
	Fingerprint *string `json:"fingerprint"`

	// Unix time in milliseconds. The timestamp indicates when the certificate was revoked. This field is an immutable.
	// Read Only: true
	// Format: date-time
	RevokedTimestamp strfmt.DateTime `json:"revokedTimestamp,omitempty"`
}

// Validate validates this list revoked device certificates using g e t o k body items0
func (o *ListRevokedDeviceCertificatesUsingGETOKBodyItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateExpires(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateFingerprint(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateRevokedTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ListRevokedDeviceCertificatesUsingGETOKBodyItems0) validateExpires(formats strfmt.Registry) error {

	if swag.IsZero(o.Expires) { // not required
		return nil
	}

	if err := validate.FormatOf("expires", "body", "date-time", o.Expires.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *ListRevokedDeviceCertificatesUsingGETOKBodyItems0) validateFingerprint(formats strfmt.Registry) error {

	if err := validate.Required("fingerprint", "body", o.Fingerprint); err != nil {
		return err
	}

	return nil
}

func (o *ListRevokedDeviceCertificatesUsingGETOKBodyItems0) validateRevokedTimestamp(formats strfmt.Registry) error {

	if swag.IsZero(o.RevokedTimestamp) { // not required
		return nil
	}

	if err := validate.FormatOf("revokedTimestamp", "body", "date-time", o.RevokedTimestamp.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *ListRevokedDeviceCertificatesUsingGETOKBodyItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ListRevokedDeviceCertificatesUsingGETOKBodyItems0) UnmarshalBinary(b []byte) error {
	var res ListRevokedDeviceCertificatesUsingGETOKBodyItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
