// Code generated by go-swagger; DO NOT EDIT.

package devices

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GetP12CertificateUsingGETReader is a Reader for the GetP12CertificateUsingGET structure.
type GetP12CertificateUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetP12CertificateUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetP12CertificateUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetP12CertificateUsingGETBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetP12CertificateUsingGETNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetP12CertificateUsingGETOK creates a GetP12CertificateUsingGETOK with default headers values
func NewGetP12CertificateUsingGETOK() *GetP12CertificateUsingGETOK {
	return &GetP12CertificateUsingGETOK{}
}

/*GetP12CertificateUsingGETOK handles this case with default header values.

Successfully downloaded device p12 file.
*/
type GetP12CertificateUsingGETOK struct {
	Payload *GetP12CertificateUsingGETOKBody
}

func (o *GetP12CertificateUsingGETOK) Error() string {
	return fmt.Sprintf("[GET /v1/tenant/{tenantId}/devices/{deviceId}/authentications/clientCertificate/p12][%d] getP12CertificateUsingGETOK  %+v", 200, o.Payload)
}

func (o *GetP12CertificateUsingGETOK) GetPayload() *GetP12CertificateUsingGETOKBody {
	return o.Payload
}

func (o *GetP12CertificateUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetP12CertificateUsingGETOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetP12CertificateUsingGETBadRequest creates a GetP12CertificateUsingGETBadRequest with default headers values
func NewGetP12CertificateUsingGETBadRequest() *GetP12CertificateUsingGETBadRequest {
	return &GetP12CertificateUsingGETBadRequest{}
}

/*GetP12CertificateUsingGETBadRequest handles this case with default header values.

HTTP request is malformed.
*/
type GetP12CertificateUsingGETBadRequest struct {
	Payload *GetP12CertificateUsingGETBadRequestBody
}

func (o *GetP12CertificateUsingGETBadRequest) Error() string {
	return fmt.Sprintf("[GET /v1/tenant/{tenantId}/devices/{deviceId}/authentications/clientCertificate/p12][%d] getP12CertificateUsingGETBadRequest  %+v", 400, o.Payload)
}

func (o *GetP12CertificateUsingGETBadRequest) GetPayload() *GetP12CertificateUsingGETBadRequestBody {
	return o.Payload
}

func (o *GetP12CertificateUsingGETBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetP12CertificateUsingGETBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetP12CertificateUsingGETNotFound creates a GetP12CertificateUsingGETNotFound with default headers values
func NewGetP12CertificateUsingGETNotFound() *GetP12CertificateUsingGETNotFound {
	return &GetP12CertificateUsingGETNotFound{}
}

/*GetP12CertificateUsingGETNotFound handles this case with default header values.

Device with specified id does not exist.
*/
type GetP12CertificateUsingGETNotFound struct {
	Payload *GetP12CertificateUsingGETNotFoundBody
}

func (o *GetP12CertificateUsingGETNotFound) Error() string {
	return fmt.Sprintf("[GET /v1/tenant/{tenantId}/devices/{deviceId}/authentications/clientCertificate/p12][%d] getP12CertificateUsingGETNotFound  %+v", 404, o.Payload)
}

func (o *GetP12CertificateUsingGETNotFound) GetPayload() *GetP12CertificateUsingGETNotFoundBody {
	return o.Payload
}

func (o *GetP12CertificateUsingGETNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetP12CertificateUsingGETNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*GetP12CertificateUsingGETBadRequestBody Response
swagger:model GetP12CertificateUsingGETBadRequestBody
*/
type GetP12CertificateUsingGETBadRequestBody struct {

	// message
	// Required: true
	Message *string `json:"message"`
}

// Validate validates this get p12 certificate using g e t bad request body
func (o *GetP12CertificateUsingGETBadRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetP12CertificateUsingGETBadRequestBody) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("getP12CertificateUsingGETBadRequest"+"."+"message", "body", o.Message); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetP12CertificateUsingGETBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetP12CertificateUsingGETBadRequestBody) UnmarshalBinary(b []byte) error {
	var res GetP12CertificateUsingGETBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetP12CertificateUsingGETNotFoundBody Response
swagger:model GetP12CertificateUsingGETNotFoundBody
*/
type GetP12CertificateUsingGETNotFoundBody struct {

	// message
	// Required: true
	Message *string `json:"message"`
}

// Validate validates this get p12 certificate using g e t not found body
func (o *GetP12CertificateUsingGETNotFoundBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetP12CertificateUsingGETNotFoundBody) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("getP12CertificateUsingGETNotFound"+"."+"message", "body", o.Message); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetP12CertificateUsingGETNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetP12CertificateUsingGETNotFoundBody) UnmarshalBinary(b []byte) error {
	var res GetP12CertificateUsingGETNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetP12CertificateUsingGETOKBody ClientCertificateAuthenticationBean
swagger:model GetP12CertificateUsingGETOKBody
*/
type GetP12CertificateUsingGETOKBody struct {

	// csr
	Csr string `json:"csr,omitempty"`

	// p12
	// Read Only: true
	P12 string `json:"p12,omitempty"`

	// pem
	// Read Only: true
	Pem string `json:"pem,omitempty"`

	// secret
	// Read Only: true
	Secret string `json:"secret,omitempty"`

	// The type of the authentication mechanism
	// Required: true
	// Enum: [clientCertificate]
	Type *string `json:"type"`
}

// Validate validates this get p12 certificate using g e t o k body
func (o *GetP12CertificateUsingGETOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var getP12CertificateUsingGETOKBodyTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["clientCertificate"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		getP12CertificateUsingGETOKBodyTypeTypePropEnum = append(getP12CertificateUsingGETOKBodyTypeTypePropEnum, v)
	}
}

const (

	// GetP12CertificateUsingGETOKBodyTypeClientCertificate captures enum value "clientCertificate"
	GetP12CertificateUsingGETOKBodyTypeClientCertificate string = "clientCertificate"
)

// prop value enum
func (o *GetP12CertificateUsingGETOKBody) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, getP12CertificateUsingGETOKBodyTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *GetP12CertificateUsingGETOKBody) validateType(formats strfmt.Registry) error {

	if err := validate.Required("getP12CertificateUsingGETOK"+"."+"type", "body", o.Type); err != nil {
		return err
	}

	// value enum
	if err := o.validateTypeEnum("getP12CertificateUsingGETOK"+"."+"type", "body", *o.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetP12CertificateUsingGETOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetP12CertificateUsingGETOKBody) UnmarshalBinary(b []byte) error {
	var res GetP12CertificateUsingGETOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
