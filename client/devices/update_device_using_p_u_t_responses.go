// Code generated by go-swagger; DO NOT EDIT.

package devices

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UpdateDeviceUsingPUTReader is a Reader for the UpdateDeviceUsingPUT structure.
type UpdateDeviceUsingPUTReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateDeviceUsingPUTReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateDeviceUsingPUTOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateDeviceUsingPUTBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateDeviceUsingPUTNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUpdateDeviceUsingPUTOK creates a UpdateDeviceUsingPUTOK with default headers values
func NewUpdateDeviceUsingPUTOK() *UpdateDeviceUsingPUTOK {
	return &UpdateDeviceUsingPUTOK{}
}

/*UpdateDeviceUsingPUTOK handles this case with default header values.

Successfully updated device.
*/
type UpdateDeviceUsingPUTOK struct {
	Payload *UpdateDeviceUsingPUTOKBody
}

func (o *UpdateDeviceUsingPUTOK) Error() string {
	return fmt.Sprintf("[PUT /v1/tenant/{tenantId}/devices/{deviceId}][%d] updateDeviceUsingPUTOK  %+v", 200, o.Payload)
}

func (o *UpdateDeviceUsingPUTOK) GetPayload() *UpdateDeviceUsingPUTOKBody {
	return o.Payload
}

func (o *UpdateDeviceUsingPUTOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(UpdateDeviceUsingPUTOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateDeviceUsingPUTBadRequest creates a UpdateDeviceUsingPUTBadRequest with default headers values
func NewUpdateDeviceUsingPUTBadRequest() *UpdateDeviceUsingPUTBadRequest {
	return &UpdateDeviceUsingPUTBadRequest{}
}

/*UpdateDeviceUsingPUTBadRequest handles this case with default header values.

HTTP request is malformed.
*/
type UpdateDeviceUsingPUTBadRequest struct {
	Payload *UpdateDeviceUsingPUTBadRequestBody
}

func (o *UpdateDeviceUsingPUTBadRequest) Error() string {
	return fmt.Sprintf("[PUT /v1/tenant/{tenantId}/devices/{deviceId}][%d] updateDeviceUsingPUTBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateDeviceUsingPUTBadRequest) GetPayload() *UpdateDeviceUsingPUTBadRequestBody {
	return o.Payload
}

func (o *UpdateDeviceUsingPUTBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(UpdateDeviceUsingPUTBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateDeviceUsingPUTNotFound creates a UpdateDeviceUsingPUTNotFound with default headers values
func NewUpdateDeviceUsingPUTNotFound() *UpdateDeviceUsingPUTNotFound {
	return &UpdateDeviceUsingPUTNotFound{}
}

/*UpdateDeviceUsingPUTNotFound handles this case with default header values.

Device with specified id does not exist.
*/
type UpdateDeviceUsingPUTNotFound struct {
	Payload *UpdateDeviceUsingPUTNotFoundBody
}

func (o *UpdateDeviceUsingPUTNotFound) Error() string {
	return fmt.Sprintf("[PUT /v1/tenant/{tenantId}/devices/{deviceId}][%d] updateDeviceUsingPUTNotFound  %+v", 404, o.Payload)
}

func (o *UpdateDeviceUsingPUTNotFound) GetPayload() *UpdateDeviceUsingPUTNotFoundBody {
	return o.Payload
}

func (o *UpdateDeviceUsingPUTNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(UpdateDeviceUsingPUTNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*UpdateDeviceUsingPUTBadRequestBody Response
swagger:model UpdateDeviceUsingPUTBadRequestBody
*/
type UpdateDeviceUsingPUTBadRequestBody struct {

	// message
	// Required: true
	Message *string `json:"message"`
}

// Validate validates this update device using p u t bad request body
func (o *UpdateDeviceUsingPUTBadRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateDeviceUsingPUTBadRequestBody) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("updateDeviceUsingPUTBadRequest"+"."+"message", "body", o.Message); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateDeviceUsingPUTBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateDeviceUsingPUTBadRequestBody) UnmarshalBinary(b []byte) error {
	var res UpdateDeviceUsingPUTBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdateDeviceUsingPUTBody DeviceBean
swagger:model UpdateDeviceUsingPUTBody
*/
type UpdateDeviceUsingPUTBody struct {

	// The alternate ID of the device (e.g., serial number crafted into the device). This field is unique across gateway.
	AlternateID string `json:"alternateId,omitempty"`

	// Authentications of the device.
	// Read Only: true
	Authentications []*UpdateDeviceUsingPUTParamsBodyAuthenticationsItems0 `json:"authentications"`

	// Authorizations of the device.
	// Read Only: true
	Authorizations []*UpdateDeviceUsingPUTParamsBodyAuthorizationsItems0 `json:"authorizations"`

	// Unix time in milliseconds. The timestamp indicates when the device was added to the the platform. This field is an immutable.
	// Read Only: true
	// Format: date-time
	// CreationTimestamp strfmt.DateTime `json:"creationTimestamp,omitempty"`

	// A set of user defined properties represented as key value pair.
	CustomProperties []*UpdateDeviceUsingPUTParamsBodyCustomPropertiesItems0 `json:"customProperties"`

	// The ID of the associated gateway. This field is an immutable.
	// Required: true
	GatewayID *string `json:"gatewayId"`

	// A unique identifier of a device. Is generated by the system and unique across platform tenant. This field is an immutable.
	// Read Only: true
	ID string `json:"id,omitempty"`

	// The name of the device.
	// Required: true
	Name *string `json:"name"`

	// The online status
	// Read Only: true
	Online *bool `json:"online,omitempty"`

	// The set of sensors that compose the device. DeviceId is not required to be given to sensor while creating device and sensor together
	Sensors []*UpdateDeviceUsingPUTParamsBodySensorsItems0 `json:"sensors"`
}

// Validate validates this update device using p u t body
func (o *UpdateDeviceUsingPUTBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAuthentications(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateAuthorizations(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCreationTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCustomProperties(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateGatewayID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSensors(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateDeviceUsingPUTBody) validateAuthentications(formats strfmt.Registry) error {

	if swag.IsZero(o.Authentications) { // not required
		return nil
	}

	for i := 0; i < len(o.Authentications); i++ {
		if swag.IsZero(o.Authentications[i]) { // not required
			continue
		}

		if o.Authentications[i] != nil {
			if err := o.Authentications[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("request" + "." + "authentications" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *UpdateDeviceUsingPUTBody) validateAuthorizations(formats strfmt.Registry) error {

	if swag.IsZero(o.Authorizations) { // not required
		return nil
	}

	for i := 0; i < len(o.Authorizations); i++ {
		if swag.IsZero(o.Authorizations[i]) { // not required
			continue
		}

		if o.Authorizations[i] != nil {
			if err := o.Authorizations[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("request" + "." + "authorizations" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *UpdateDeviceUsingPUTBody) validateCreationTimestamp(formats strfmt.Registry) error {
	/*
		if swag.IsZero(o.CreationTimestamp) { // not required
			return nil
		}

		if err := validate.FormatOf("request"+"."+"creationTimestamp", "body", "date-time", o.CreationTimestamp.String(), formats); err != nil {
			return err
		}
	*/
	return nil
}

func (o *UpdateDeviceUsingPUTBody) validateCustomProperties(formats strfmt.Registry) error {

	if swag.IsZero(o.CustomProperties) { // not required
		return nil
	}

	for i := 0; i < len(o.CustomProperties); i++ {
		if swag.IsZero(o.CustomProperties[i]) { // not required
			continue
		}

		if o.CustomProperties[i] != nil {
			if err := o.CustomProperties[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("request" + "." + "customProperties" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *UpdateDeviceUsingPUTBody) validateGatewayID(formats strfmt.Registry) error {

	if err := validate.Required("request"+"."+"gatewayId", "body", o.GatewayID); err != nil {
		return err
	}

	return nil
}

func (o *UpdateDeviceUsingPUTBody) validateName(formats strfmt.Registry) error {

	if err := validate.Required("request"+"."+"name", "body", o.Name); err != nil {
		return err
	}

	return nil
}

func (o *UpdateDeviceUsingPUTBody) validateSensors(formats strfmt.Registry) error {

	if swag.IsZero(o.Sensors) { // not required
		return nil
	}

	for i := 0; i < len(o.Sensors); i++ {
		if swag.IsZero(o.Sensors[i]) { // not required
			continue
		}

		if o.Sensors[i] != nil {
			if err := o.Sensors[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("request" + "." + "sensors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateDeviceUsingPUTBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateDeviceUsingPUTBody) UnmarshalBinary(b []byte) error {
	var res UpdateDeviceUsingPUTBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdateDeviceUsingPUTNotFoundBody Response
swagger:model UpdateDeviceUsingPUTNotFoundBody
*/
type UpdateDeviceUsingPUTNotFoundBody struct {

	// message
	// Required: true
	Message *string `json:"message"`
}

// Validate validates this update device using p u t not found body
func (o *UpdateDeviceUsingPUTNotFoundBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateDeviceUsingPUTNotFoundBody) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("updateDeviceUsingPUTNotFound"+"."+"message", "body", o.Message); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateDeviceUsingPUTNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateDeviceUsingPUTNotFoundBody) UnmarshalBinary(b []byte) error {
	var res UpdateDeviceUsingPUTNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdateDeviceUsingPUTOKBody DeviceBean
swagger:model UpdateDeviceUsingPUTOKBody
*/
type UpdateDeviceUsingPUTOKBody struct {

	// The alternate ID of the device (e.g., serial number crafted into the device). This field is unique across gateway.
	AlternateID string `json:"alternateId,omitempty"`

	// Authentications of the device.
	// Read Only: true
	Authentications []*UpdateDeviceUsingPUTOKBodyAuthenticationsItems0 `json:"authentications"`

	// Authorizations of the device.
	// Read Only: true
	Authorizations []*UpdateDeviceUsingPUTOKBodyAuthorizationsItems0 `json:"authorizations"`

	// Unix time in milliseconds. The timestamp indicates when the device was added to the the platform. This field is an immutable.
	// Read Only: true
	// Format: date-time
	// CreationTimestamp strfmt.DateTime `json:"creationTimestamp,omitempty"`

	// A set of user defined properties represented as key value pair.
	CustomProperties []*UpdateDeviceUsingPUTOKBodyCustomPropertiesItems0 `json:"customProperties"`

	// The ID of the associated gateway. This field is an immutable.
	// Required: true
	GatewayID *string `json:"gatewayId"`

	// A unique identifier of a device. Is generated by the system and unique across platform tenant. This field is an immutable.
	// Read Only: true
	ID string `json:"id,omitempty"`

	// The name of the device.
	// Required: true
	Name *string `json:"name"`

	// The online status
	// Read Only: true
	Online *bool `json:"online,omitempty"`

	// The set of sensors that compose the device. DeviceId is not required to be given to sensor while creating device and sensor together
	Sensors []*UpdateDeviceUsingPUTOKBodySensorsItems0 `json:"sensors"`
}

// Validate validates this update device using p u t o k body
func (o *UpdateDeviceUsingPUTOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAuthentications(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateAuthorizations(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCreationTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCustomProperties(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateGatewayID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSensors(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateDeviceUsingPUTOKBody) validateAuthentications(formats strfmt.Registry) error {

	if swag.IsZero(o.Authentications) { // not required
		return nil
	}

	for i := 0; i < len(o.Authentications); i++ {
		if swag.IsZero(o.Authentications[i]) { // not required
			continue
		}

		if o.Authentications[i] != nil {
			if err := o.Authentications[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("updateDeviceUsingPUTOK" + "." + "authentications" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *UpdateDeviceUsingPUTOKBody) validateAuthorizations(formats strfmt.Registry) error {

	if swag.IsZero(o.Authorizations) { // not required
		return nil
	}

	for i := 0; i < len(o.Authorizations); i++ {
		if swag.IsZero(o.Authorizations[i]) { // not required
			continue
		}

		if o.Authorizations[i] != nil {
			if err := o.Authorizations[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("updateDeviceUsingPUTOK" + "." + "authorizations" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *UpdateDeviceUsingPUTOKBody) validateCreationTimestamp(formats strfmt.Registry) error {
	/*
		if swag.IsZero(o.CreationTimestamp) { // not required
			return nil
		}

		if err := validate.FormatOf("updateDeviceUsingPUTOK"+"."+"creationTimestamp", "body", "date-time", o.CreationTimestamp.String(), formats); err != nil {
			return err
		}
	*/
	return nil
}

func (o *UpdateDeviceUsingPUTOKBody) validateCustomProperties(formats strfmt.Registry) error {

	if swag.IsZero(o.CustomProperties) { // not required
		return nil
	}

	for i := 0; i < len(o.CustomProperties); i++ {
		if swag.IsZero(o.CustomProperties[i]) { // not required
			continue
		}

		if o.CustomProperties[i] != nil {
			if err := o.CustomProperties[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("updateDeviceUsingPUTOK" + "." + "customProperties" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *UpdateDeviceUsingPUTOKBody) validateGatewayID(formats strfmt.Registry) error {

	if err := validate.Required("updateDeviceUsingPUTOK"+"."+"gatewayId", "body", o.GatewayID); err != nil {
		return err
	}

	return nil
}

func (o *UpdateDeviceUsingPUTOKBody) validateName(formats strfmt.Registry) error {

	if err := validate.Required("updateDeviceUsingPUTOK"+"."+"name", "body", o.Name); err != nil {
		return err
	}

	return nil
}

func (o *UpdateDeviceUsingPUTOKBody) validateSensors(formats strfmt.Registry) error {

	if swag.IsZero(o.Sensors) { // not required
		return nil
	}

	for i := 0; i < len(o.Sensors); i++ {
		if swag.IsZero(o.Sensors[i]) { // not required
			continue
		}

		if o.Sensors[i] != nil {
			if err := o.Sensors[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("updateDeviceUsingPUTOK" + "." + "sensors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateDeviceUsingPUTOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateDeviceUsingPUTOKBody) UnmarshalBinary(b []byte) error {
	var res UpdateDeviceUsingPUTOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdateDeviceUsingPUTOKBodyAuthenticationsItems0 AuthenticationBean
swagger:model UpdateDeviceUsingPUTOKBodyAuthenticationsItems0
*/
type UpdateDeviceUsingPUTOKBodyAuthenticationsItems0 struct {

	// The password for the user.
	Password string `json:"password,omitempty"`

	// The authentication type. Not required when updating user password.
	// Enum: [basic clientCertificate jwt]
	Type string `json:"type,omitempty"`
}

// Validate validates this update device using p u t o k body authentications items0
func (o *UpdateDeviceUsingPUTOKBodyAuthenticationsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var updateDeviceUsingPUTOKBodyAuthenticationsItems0TypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["basic","clientCertificate","jwt"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		updateDeviceUsingPUTOKBodyAuthenticationsItems0TypeTypePropEnum = append(updateDeviceUsingPUTOKBodyAuthenticationsItems0TypeTypePropEnum, v)
	}
}

const (

	// UpdateDeviceUsingPUTOKBodyAuthenticationsItems0TypeBasic captures enum value "basic"
	UpdateDeviceUsingPUTOKBodyAuthenticationsItems0TypeBasic string = "basic"

	// UpdateDeviceUsingPUTOKBodyAuthenticationsItems0TypeClientCertificate captures enum value "clientCertificate"
	UpdateDeviceUsingPUTOKBodyAuthenticationsItems0TypeClientCertificate string = "clientCertificate"

	// UpdateDeviceUsingPUTOKBodyAuthenticationsItems0TypeJwt captures enum value "jwt"
	UpdateDeviceUsingPUTOKBodyAuthenticationsItems0TypeJwt string = "jwt"
)

// prop value enum
func (o *UpdateDeviceUsingPUTOKBodyAuthenticationsItems0) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, updateDeviceUsingPUTOKBodyAuthenticationsItems0TypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *UpdateDeviceUsingPUTOKBodyAuthenticationsItems0) validateType(formats strfmt.Registry) error {

	if swag.IsZero(o.Type) { // not required
		return nil
	}

	// value enum
	if err := o.validateTypeEnum("type", "body", o.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateDeviceUsingPUTOKBodyAuthenticationsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateDeviceUsingPUTOKBodyAuthenticationsItems0) UnmarshalBinary(b []byte) error {
	var res UpdateDeviceUsingPUTOKBodyAuthenticationsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdateDeviceUsingPUTOKBodyAuthorizationsItems0 AuthorizationBean
swagger:model UpdateDeviceUsingPUTOKBodyAuthorizationsItems0
*/
type UpdateDeviceUsingPUTOKBodyAuthorizationsItems0 struct {

	// The type of device authorization policies
	// Enum: [router]
	Type string `json:"type,omitempty"`
}

// Validate validates this update device using p u t o k body authorizations items0
func (o *UpdateDeviceUsingPUTOKBodyAuthorizationsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var updateDeviceUsingPUTOKBodyAuthorizationsItems0TypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["router"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		updateDeviceUsingPUTOKBodyAuthorizationsItems0TypeTypePropEnum = append(updateDeviceUsingPUTOKBodyAuthorizationsItems0TypeTypePropEnum, v)
	}
}

const (

	// UpdateDeviceUsingPUTOKBodyAuthorizationsItems0TypeRouter captures enum value "router"
	UpdateDeviceUsingPUTOKBodyAuthorizationsItems0TypeRouter string = "router"
)

// prop value enum
func (o *UpdateDeviceUsingPUTOKBodyAuthorizationsItems0) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, updateDeviceUsingPUTOKBodyAuthorizationsItems0TypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *UpdateDeviceUsingPUTOKBodyAuthorizationsItems0) validateType(formats strfmt.Registry) error {

	if swag.IsZero(o.Type) { // not required
		return nil
	}

	// value enum
	if err := o.validateTypeEnum("type", "body", o.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateDeviceUsingPUTOKBodyAuthorizationsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateDeviceUsingPUTOKBodyAuthorizationsItems0) UnmarshalBinary(b []byte) error {
	var res UpdateDeviceUsingPUTOKBodyAuthorizationsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdateDeviceUsingPUTOKBodyCustomPropertiesItems0 CustomPropertyBean
swagger:model UpdateDeviceUsingPUTOKBodyCustomPropertiesItems0
*/
type UpdateDeviceUsingPUTOKBodyCustomPropertiesItems0 struct {

	// A unique identifier of a custom property. Is defined by the user. This field is an immutable.
	// Required: true
	Key *string `json:"key"`

	// Value of the custom property.
	// Required: true
	Value *string `json:"value"`
}

// Validate validates this update device using p u t o k body custom properties items0
func (o *UpdateDeviceUsingPUTOKBodyCustomPropertiesItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateKey(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateValue(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateDeviceUsingPUTOKBodyCustomPropertiesItems0) validateKey(formats strfmt.Registry) error {

	if err := validate.Required("key", "body", o.Key); err != nil {
		return err
	}

	return nil
}

func (o *UpdateDeviceUsingPUTOKBodyCustomPropertiesItems0) validateValue(formats strfmt.Registry) error {

	if err := validate.Required("value", "body", o.Value); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateDeviceUsingPUTOKBodyCustomPropertiesItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateDeviceUsingPUTOKBodyCustomPropertiesItems0) UnmarshalBinary(b []byte) error {
	var res UpdateDeviceUsingPUTOKBodyCustomPropertiesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdateDeviceUsingPUTOKBodySensorsItems0 SensorBean
swagger:model UpdateDeviceUsingPUTOKBodySensorsItems0
*/
type UpdateDeviceUsingPUTOKBodySensorsItems0 struct {

	// The alternate ID of the sensor. This field is unique across device.
	AlternateID string `json:"alternateId,omitempty"`

	// A set of user defined properties represented as key value pair.
	CustomProperties []*UpdateDeviceUsingPUTOKBodySensorsItems0CustomPropertiesItems0 `json:"customProperties"`

	// The ID of the related device. DeviceId is not required to be given to sensor while creating device and sensor together
	// Required: true
	DeviceID *string `json:"deviceId"`

	// Identifier of a sensor. Is generated by the system and unique across platform tenant. This field is an immutable.
	// Read Only: true
	ID string `json:"id,omitempty"`

	// The name of the sensor
	// Required: true
	Name *string `json:"name"`

	// The ID of the SensorType
	// Required: true
	SensorTypeID *string `json:"sensorTypeId"`
}

// Validate validates this update device using p u t o k body sensors items0
func (o *UpdateDeviceUsingPUTOKBodySensorsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCustomProperties(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDeviceID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSensorTypeID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateDeviceUsingPUTOKBodySensorsItems0) validateCustomProperties(formats strfmt.Registry) error {

	if swag.IsZero(o.CustomProperties) { // not required
		return nil
	}

	for i := 0; i < len(o.CustomProperties); i++ {
		if swag.IsZero(o.CustomProperties[i]) { // not required
			continue
		}

		if o.CustomProperties[i] != nil {
			if err := o.CustomProperties[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("customProperties" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *UpdateDeviceUsingPUTOKBodySensorsItems0) validateDeviceID(formats strfmt.Registry) error {

	if err := validate.Required("deviceId", "body", o.DeviceID); err != nil {
		return err
	}

	return nil
}

func (o *UpdateDeviceUsingPUTOKBodySensorsItems0) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", o.Name); err != nil {
		return err
	}

	return nil
}

func (o *UpdateDeviceUsingPUTOKBodySensorsItems0) validateSensorTypeID(formats strfmt.Registry) error {

	if err := validate.Required("sensorTypeId", "body", o.SensorTypeID); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateDeviceUsingPUTOKBodySensorsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateDeviceUsingPUTOKBodySensorsItems0) UnmarshalBinary(b []byte) error {
	var res UpdateDeviceUsingPUTOKBodySensorsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdateDeviceUsingPUTOKBodySensorsItems0CustomPropertiesItems0 CustomPropertyBean
swagger:model UpdateDeviceUsingPUTOKBodySensorsItems0CustomPropertiesItems0
*/
type UpdateDeviceUsingPUTOKBodySensorsItems0CustomPropertiesItems0 struct {

	// A unique identifier of a custom property. Is defined by the user. This field is an immutable.
	// Required: true
	Key *string `json:"key"`

	// Value of the custom property.
	// Required: true
	Value *string `json:"value"`
}

// Validate validates this update device using p u t o k body sensors items0 custom properties items0
func (o *UpdateDeviceUsingPUTOKBodySensorsItems0CustomPropertiesItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateKey(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateValue(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateDeviceUsingPUTOKBodySensorsItems0CustomPropertiesItems0) validateKey(formats strfmt.Registry) error {

	if err := validate.Required("key", "body", o.Key); err != nil {
		return err
	}

	return nil
}

func (o *UpdateDeviceUsingPUTOKBodySensorsItems0CustomPropertiesItems0) validateValue(formats strfmt.Registry) error {

	if err := validate.Required("value", "body", o.Value); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateDeviceUsingPUTOKBodySensorsItems0CustomPropertiesItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateDeviceUsingPUTOKBodySensorsItems0CustomPropertiesItems0) UnmarshalBinary(b []byte) error {
	var res UpdateDeviceUsingPUTOKBodySensorsItems0CustomPropertiesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdateDeviceUsingPUTParamsBodyAuthenticationsItems0 AuthenticationBean
swagger:model UpdateDeviceUsingPUTParamsBodyAuthenticationsItems0
*/
type UpdateDeviceUsingPUTParamsBodyAuthenticationsItems0 struct {

	// The password for the user.
	Password string `json:"password,omitempty"`

	// The authentication type. Not required when updating user password.
	// Enum: [basic clientCertificate jwt]
	Type string `json:"type,omitempty"`
}

// Validate validates this update device using p u t params body authentications items0
func (o *UpdateDeviceUsingPUTParamsBodyAuthenticationsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var updateDeviceUsingPUTParamsBodyAuthenticationsItems0TypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["basic","clientCertificate","jwt"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		updateDeviceUsingPUTParamsBodyAuthenticationsItems0TypeTypePropEnum = append(updateDeviceUsingPUTParamsBodyAuthenticationsItems0TypeTypePropEnum, v)
	}
}

const (

	// UpdateDeviceUsingPUTParamsBodyAuthenticationsItems0TypeBasic captures enum value "basic"
	UpdateDeviceUsingPUTParamsBodyAuthenticationsItems0TypeBasic string = "basic"

	// UpdateDeviceUsingPUTParamsBodyAuthenticationsItems0TypeClientCertificate captures enum value "clientCertificate"
	UpdateDeviceUsingPUTParamsBodyAuthenticationsItems0TypeClientCertificate string = "clientCertificate"

	// UpdateDeviceUsingPUTParamsBodyAuthenticationsItems0TypeJwt captures enum value "jwt"
	UpdateDeviceUsingPUTParamsBodyAuthenticationsItems0TypeJwt string = "jwt"
)

// prop value enum
func (o *UpdateDeviceUsingPUTParamsBodyAuthenticationsItems0) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, updateDeviceUsingPUTParamsBodyAuthenticationsItems0TypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *UpdateDeviceUsingPUTParamsBodyAuthenticationsItems0) validateType(formats strfmt.Registry) error {

	if swag.IsZero(o.Type) { // not required
		return nil
	}

	// value enum
	if err := o.validateTypeEnum("type", "body", o.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateDeviceUsingPUTParamsBodyAuthenticationsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateDeviceUsingPUTParamsBodyAuthenticationsItems0) UnmarshalBinary(b []byte) error {
	var res UpdateDeviceUsingPUTParamsBodyAuthenticationsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdateDeviceUsingPUTParamsBodyAuthorizationsItems0 AuthorizationBean
swagger:model UpdateDeviceUsingPUTParamsBodyAuthorizationsItems0
*/
type UpdateDeviceUsingPUTParamsBodyAuthorizationsItems0 struct {

	// The type of device authorization policies
	// Enum: [router]
	Type string `json:"type,omitempty"`
}

// Validate validates this update device using p u t params body authorizations items0
func (o *UpdateDeviceUsingPUTParamsBodyAuthorizationsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var updateDeviceUsingPUTParamsBodyAuthorizationsItems0TypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["router"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		updateDeviceUsingPUTParamsBodyAuthorizationsItems0TypeTypePropEnum = append(updateDeviceUsingPUTParamsBodyAuthorizationsItems0TypeTypePropEnum, v)
	}
}

const (

	// UpdateDeviceUsingPUTParamsBodyAuthorizationsItems0TypeRouter captures enum value "router"
	UpdateDeviceUsingPUTParamsBodyAuthorizationsItems0TypeRouter string = "router"
)

// prop value enum
func (o *UpdateDeviceUsingPUTParamsBodyAuthorizationsItems0) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, updateDeviceUsingPUTParamsBodyAuthorizationsItems0TypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *UpdateDeviceUsingPUTParamsBodyAuthorizationsItems0) validateType(formats strfmt.Registry) error {

	if swag.IsZero(o.Type) { // not required
		return nil
	}

	// value enum
	if err := o.validateTypeEnum("type", "body", o.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateDeviceUsingPUTParamsBodyAuthorizationsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateDeviceUsingPUTParamsBodyAuthorizationsItems0) UnmarshalBinary(b []byte) error {
	var res UpdateDeviceUsingPUTParamsBodyAuthorizationsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdateDeviceUsingPUTParamsBodyCustomPropertiesItems0 CustomPropertyBean
swagger:model UpdateDeviceUsingPUTParamsBodyCustomPropertiesItems0
*/
type UpdateDeviceUsingPUTParamsBodyCustomPropertiesItems0 struct {

	// A unique identifier of a custom property. Is defined by the user. This field is an immutable.
	// Required: true
	Key *string `json:"key"`

	// Value of the custom property.
	// Required: true
	Value *string `json:"value"`
}

// Validate validates this update device using p u t params body custom properties items0
func (o *UpdateDeviceUsingPUTParamsBodyCustomPropertiesItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateKey(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateValue(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateDeviceUsingPUTParamsBodyCustomPropertiesItems0) validateKey(formats strfmt.Registry) error {

	if err := validate.Required("key", "body", o.Key); err != nil {
		return err
	}

	return nil
}

func (o *UpdateDeviceUsingPUTParamsBodyCustomPropertiesItems0) validateValue(formats strfmt.Registry) error {

	if err := validate.Required("value", "body", o.Value); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateDeviceUsingPUTParamsBodyCustomPropertiesItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateDeviceUsingPUTParamsBodyCustomPropertiesItems0) UnmarshalBinary(b []byte) error {
	var res UpdateDeviceUsingPUTParamsBodyCustomPropertiesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdateDeviceUsingPUTParamsBodySensorsItems0 SensorBean
swagger:model UpdateDeviceUsingPUTParamsBodySensorsItems0
*/
type UpdateDeviceUsingPUTParamsBodySensorsItems0 struct {

	// The alternate ID of the sensor. This field is unique across device.
	AlternateID string `json:"alternateId,omitempty"`

	// A set of user defined properties represented as key value pair.
	CustomProperties []*UpdateDeviceUsingPUTParamsBodySensorsItems0CustomPropertiesItems0 `json:"customProperties"`

	// The ID of the related device. DeviceId is not required to be given to sensor while creating device and sensor together
	// Required: true
	DeviceID *string `json:"deviceId"`

	// Identifier of a sensor. Is generated by the system and unique across platform tenant. This field is an immutable.
	// Read Only: true
	ID string `json:"id,omitempty"`

	// The name of the sensor
	// Required: true
	Name *string `json:"name"`

	// The ID of the SensorType
	// Required: true
	SensorTypeID *string `json:"sensorTypeId"`
}

// Validate validates this update device using p u t params body sensors items0
func (o *UpdateDeviceUsingPUTParamsBodySensorsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCustomProperties(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDeviceID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSensorTypeID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateDeviceUsingPUTParamsBodySensorsItems0) validateCustomProperties(formats strfmt.Registry) error {

	if swag.IsZero(o.CustomProperties) { // not required
		return nil
	}

	for i := 0; i < len(o.CustomProperties); i++ {
		if swag.IsZero(o.CustomProperties[i]) { // not required
			continue
		}

		if o.CustomProperties[i] != nil {
			if err := o.CustomProperties[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("customProperties" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *UpdateDeviceUsingPUTParamsBodySensorsItems0) validateDeviceID(formats strfmt.Registry) error {

	if err := validate.Required("deviceId", "body", o.DeviceID); err != nil {
		return err
	}

	return nil
}

func (o *UpdateDeviceUsingPUTParamsBodySensorsItems0) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", o.Name); err != nil {
		return err
	}

	return nil
}

func (o *UpdateDeviceUsingPUTParamsBodySensorsItems0) validateSensorTypeID(formats strfmt.Registry) error {

	if err := validate.Required("sensorTypeId", "body", o.SensorTypeID); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateDeviceUsingPUTParamsBodySensorsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateDeviceUsingPUTParamsBodySensorsItems0) UnmarshalBinary(b []byte) error {
	var res UpdateDeviceUsingPUTParamsBodySensorsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdateDeviceUsingPUTParamsBodySensorsItems0CustomPropertiesItems0 CustomPropertyBean
swagger:model UpdateDeviceUsingPUTParamsBodySensorsItems0CustomPropertiesItems0
*/
type UpdateDeviceUsingPUTParamsBodySensorsItems0CustomPropertiesItems0 struct {

	// A unique identifier of a custom property. Is defined by the user. This field is an immutable.
	// Required: true
	Key *string `json:"key"`

	// Value of the custom property.
	// Required: true
	Value *string `json:"value"`
}

// Validate validates this update device using p u t params body sensors items0 custom properties items0
func (o *UpdateDeviceUsingPUTParamsBodySensorsItems0CustomPropertiesItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateKey(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateValue(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateDeviceUsingPUTParamsBodySensorsItems0CustomPropertiesItems0) validateKey(formats strfmt.Registry) error {

	if err := validate.Required("key", "body", o.Key); err != nil {
		return err
	}

	return nil
}

func (o *UpdateDeviceUsingPUTParamsBodySensorsItems0CustomPropertiesItems0) validateValue(formats strfmt.Registry) error {

	if err := validate.Required("value", "body", o.Value); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateDeviceUsingPUTParamsBodySensorsItems0CustomPropertiesItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateDeviceUsingPUTParamsBodySensorsItems0CustomPropertiesItems0) UnmarshalBinary(b []byte) error {
	var res UpdateDeviceUsingPUTParamsBodySensorsItems0CustomPropertiesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
