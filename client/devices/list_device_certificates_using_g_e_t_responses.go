// Code generated by go-swagger; DO NOT EDIT.

package devices

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ListDeviceCertificatesUsingGETReader is a Reader for the ListDeviceCertificatesUsingGET structure.
type ListDeviceCertificatesUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ListDeviceCertificatesUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewListDeviceCertificatesUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewListDeviceCertificatesUsingGETBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewListDeviceCertificatesUsingGETNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewListDeviceCertificatesUsingGETOK creates a ListDeviceCertificatesUsingGETOK with default headers values
func NewListDeviceCertificatesUsingGETOK() *ListDeviceCertificatesUsingGETOK {
	return &ListDeviceCertificatesUsingGETOK{}
}

/*ListDeviceCertificatesUsingGETOK handles this case with default header values.

Successfully returned device certificate fingerprints.
*/
type ListDeviceCertificatesUsingGETOK struct {
	Payload []*ListDeviceCertificatesUsingGETOKBodyItems0
}

func (o *ListDeviceCertificatesUsingGETOK) Error() string {
	return fmt.Sprintf("[GET /v1/tenant/{tenantId}/devices/{deviceId}/authentications/clientCertificate][%d] listDeviceCertificatesUsingGETOK  %+v", 200, o.Payload)
}

func (o *ListDeviceCertificatesUsingGETOK) GetPayload() []*ListDeviceCertificatesUsingGETOKBodyItems0 {
	return o.Payload
}

func (o *ListDeviceCertificatesUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListDeviceCertificatesUsingGETBadRequest creates a ListDeviceCertificatesUsingGETBadRequest with default headers values
func NewListDeviceCertificatesUsingGETBadRequest() *ListDeviceCertificatesUsingGETBadRequest {
	return &ListDeviceCertificatesUsingGETBadRequest{}
}

/*ListDeviceCertificatesUsingGETBadRequest handles this case with default header values.

HTTP request is malformed.
*/
type ListDeviceCertificatesUsingGETBadRequest struct {
	Payload *ListDeviceCertificatesUsingGETBadRequestBody
}

func (o *ListDeviceCertificatesUsingGETBadRequest) Error() string {
	return fmt.Sprintf("[GET /v1/tenant/{tenantId}/devices/{deviceId}/authentications/clientCertificate][%d] listDeviceCertificatesUsingGETBadRequest  %+v", 400, o.Payload)
}

func (o *ListDeviceCertificatesUsingGETBadRequest) GetPayload() *ListDeviceCertificatesUsingGETBadRequestBody {
	return o.Payload
}

func (o *ListDeviceCertificatesUsingGETBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(ListDeviceCertificatesUsingGETBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListDeviceCertificatesUsingGETNotFound creates a ListDeviceCertificatesUsingGETNotFound with default headers values
func NewListDeviceCertificatesUsingGETNotFound() *ListDeviceCertificatesUsingGETNotFound {
	return &ListDeviceCertificatesUsingGETNotFound{}
}

/*ListDeviceCertificatesUsingGETNotFound handles this case with default header values.

Device does not exist.
*/
type ListDeviceCertificatesUsingGETNotFound struct {
	Payload *ListDeviceCertificatesUsingGETNotFoundBody
}

func (o *ListDeviceCertificatesUsingGETNotFound) Error() string {
	return fmt.Sprintf("[GET /v1/tenant/{tenantId}/devices/{deviceId}/authentications/clientCertificate][%d] listDeviceCertificatesUsingGETNotFound  %+v", 404, o.Payload)
}

func (o *ListDeviceCertificatesUsingGETNotFound) GetPayload() *ListDeviceCertificatesUsingGETNotFoundBody {
	return o.Payload
}

func (o *ListDeviceCertificatesUsingGETNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(ListDeviceCertificatesUsingGETNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*ListDeviceCertificatesUsingGETBadRequestBody Response
swagger:model ListDeviceCertificatesUsingGETBadRequestBody
*/
type ListDeviceCertificatesUsingGETBadRequestBody struct {

	// message
	// Required: true
	Message *string `json:"message"`
}

// Validate validates this list device certificates using g e t bad request body
func (o *ListDeviceCertificatesUsingGETBadRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ListDeviceCertificatesUsingGETBadRequestBody) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("listDeviceCertificatesUsingGETBadRequest"+"."+"message", "body", o.Message); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *ListDeviceCertificatesUsingGETBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ListDeviceCertificatesUsingGETBadRequestBody) UnmarshalBinary(b []byte) error {
	var res ListDeviceCertificatesUsingGETBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ListDeviceCertificatesUsingGETNotFoundBody Response
swagger:model ListDeviceCertificatesUsingGETNotFoundBody
*/
type ListDeviceCertificatesUsingGETNotFoundBody struct {

	// message
	// Required: true
	Message *string `json:"message"`
}

// Validate validates this list device certificates using g e t not found body
func (o *ListDeviceCertificatesUsingGETNotFoundBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ListDeviceCertificatesUsingGETNotFoundBody) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("listDeviceCertificatesUsingGETNotFound"+"."+"message", "body", o.Message); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *ListDeviceCertificatesUsingGETNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ListDeviceCertificatesUsingGETNotFoundBody) UnmarshalBinary(b []byte) error {
	var res ListDeviceCertificatesUsingGETNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ListDeviceCertificatesUsingGETOKBodyItems0 CertificateFingerprintBean
swagger:model ListDeviceCertificatesUsingGETOKBodyItems0
*/
type ListDeviceCertificatesUsingGETOKBodyItems0 struct {

	// The end validity date of the certificate. This field is an immutable.
	// Read Only: true
	// Format: date-time
	Expires strfmt.DateTime `json:"expires,omitempty"`

	// A unique identifier of the certificate. It is calculated by hashing the certificate with SHA-256 and is unique across the system.
	// Required: true
	Fingerprint *string `json:"fingerprint"`
}

// Validate validates this list device certificates using g e t o k body items0
func (o *ListDeviceCertificatesUsingGETOKBodyItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateExpires(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateFingerprint(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ListDeviceCertificatesUsingGETOKBodyItems0) validateExpires(formats strfmt.Registry) error {

	if swag.IsZero(o.Expires) { // not required
		return nil
	}

	if err := validate.FormatOf("expires", "body", "date-time", o.Expires.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *ListDeviceCertificatesUsingGETOKBodyItems0) validateFingerprint(formats strfmt.Registry) error {

	if err := validate.Required("fingerprint", "body", o.Fingerprint); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *ListDeviceCertificatesUsingGETOKBodyItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ListDeviceCertificatesUsingGETOKBodyItems0) UnmarshalBinary(b []byte) error {
	var res ListDeviceCertificatesUsingGETOKBodyItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
