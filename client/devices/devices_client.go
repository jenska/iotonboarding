// Code generated by go-swagger; DO NOT EDIT.

package devices

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new devices API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for devices API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	CreateCustomPropertyForDevice(params *CreateCustomPropertyForDeviceParams, authInfo runtime.ClientAuthInfoWriter) (*CreateCustomPropertyForDeviceOK, error)

	CreateDevicePEMCertificateUsingPOST(params *CreateDevicePEMCertificateUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter) (*CreateDevicePEMCertificateUsingPOSTOK, error)

	CreateDeviceUsingPOST(params *CreateDeviceUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter) (*CreateDeviceUsingPOSTOK, error)

	DeleteCustomPropertyForDevice(params *DeleteCustomPropertyForDeviceParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteCustomPropertyForDeviceOK, error)

	DeleteDeviceUsingDELETE(params *DeleteDeviceUsingDELETEParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteDeviceUsingDELETEOK, error)

	GetDeviceUsingGET(params *GetDeviceUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*GetDeviceUsingGETOK, error)

	GetDevicesCountUsingGET(params *GetDevicesCountUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*GetDevicesCountUsingGETOK, error)

	GetDevicesUsingGET(params *GetDevicesUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*GetDevicesUsingGETOK, error)

	GetMeasuresByDeviceUsingGET(params *GetMeasuresByDeviceUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*GetMeasuresByDeviceUsingGETOK, error)

	GetP12CertificateUsingGET(params *GetP12CertificateUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*GetP12CertificateUsingGETOK, error)

	GetPEMCertificateUsingGET(params *GetPEMCertificateUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*GetPEMCertificateUsingGETOK, error)

	GetPEMCertificateV2UsingGET(params *GetPEMCertificateV2UsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*GetPEMCertificateV2UsingGETOK, error)

	ListDeviceCertificatesUsingGET(params *ListDeviceCertificatesUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*ListDeviceCertificatesUsingGETOK, error)

	ListRevokedDeviceCertificatesUsingGET(params *ListRevokedDeviceCertificatesUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*ListRevokedDeviceCertificatesUsingGETOK, error)

	RevokeDeviceCertificateUsingDELETE(params *RevokeDeviceCertificateUsingDELETEParams, authInfo runtime.ClientAuthInfoWriter) (*RevokeDeviceCertificateUsingDELETEOK, error)

	SendCommandUsingPOST(params *SendCommandUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter) (*SendCommandUsingPOSTAccepted, error)

	UpdateCustomPropertyForDevice(params *UpdateCustomPropertyForDeviceParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateCustomPropertyForDeviceOK, error)

	UpdateDeviceUsingPUT(params *UpdateDeviceUsingPUTParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateDeviceUsingPUTOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateCustomPropertyForDevice adds a custom property to a device

  The endpoint is used to add a custom property to the device associated to the given id.
*/
func (a *Client) CreateCustomPropertyForDevice(params *CreateCustomPropertyForDeviceParams, authInfo runtime.ClientAuthInfoWriter) (*CreateCustomPropertyForDeviceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateCustomPropertyForDeviceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createCustomPropertyForDevice",
		Method:             "POST",
		PathPattern:        "/v1/tenant/{tenantId}/devices/{deviceId}/customProperties",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateCustomPropertyForDeviceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateCustomPropertyForDeviceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createCustomPropertyForDevice: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateDevicePEMCertificateUsingPOST creates a device certificate in p e m format

  The endpoint is used to create a device specific certificate in PEM format for authentication.
*/
func (a *Client) CreateDevicePEMCertificateUsingPOST(params *CreateDevicePEMCertificateUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter) (*CreateDevicePEMCertificateUsingPOSTOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateDevicePEMCertificateUsingPOSTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createDevicePEMCertificateUsingPOST",
		Method:             "POST",
		PathPattern:        "/v1/tenant/{tenantId}/devices/{deviceId}/authentications/clientCertificate/pem",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateDevicePEMCertificateUsingPOSTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateDevicePEMCertificateUsingPOSTOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createDevicePEMCertificateUsingPOST: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateDeviceUsingPOST creates a device

  This endpoint is used to create a device.
*/
func (a *Client) CreateDeviceUsingPOST(params *CreateDeviceUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter) (*CreateDeviceUsingPOSTOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateDeviceUsingPOSTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createDeviceUsingPOST",
		Method:             "POST",
		PathPattern:        "/v1/tenant/{tenantId}/devices",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateDeviceUsingPOSTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateDeviceUsingPOSTOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createDeviceUsingPOST: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteCustomPropertyForDevice deletes a custom property from a device

  This endpoint is used to delete a custom property from the device associated to the given id.
*/
func (a *Client) DeleteCustomPropertyForDevice(params *DeleteCustomPropertyForDeviceParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteCustomPropertyForDeviceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteCustomPropertyForDeviceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteCustomPropertyForDevice",
		Method:             "DELETE",
		PathPattern:        "/v1/tenant/{tenantId}/devices/{deviceId}/customProperties/{key}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteCustomPropertyForDeviceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteCustomPropertyForDeviceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteCustomPropertyForDevice: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteDeviceUsingDELETE deletes a device

  The endpoint is used to delete the device associated to the given id.
*/
func (a *Client) DeleteDeviceUsingDELETE(params *DeleteDeviceUsingDELETEParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteDeviceUsingDELETEOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteDeviceUsingDELETEParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteDeviceUsingDELETE",
		Method:             "DELETE",
		PathPattern:        "/v1/tenant/{tenantId}/devices/{deviceId}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteDeviceUsingDELETEReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteDeviceUsingDELETEOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteDeviceUsingDELETE: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDeviceUsingGET returns a device

  The endpoint returns the device associated to the given id.
*/
func (a *Client) GetDeviceUsingGET(params *GetDeviceUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*GetDeviceUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDeviceUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDeviceUsingGET",
		Method:             "GET",
		PathPattern:        "/v1/tenant/{tenantId}/devices/{deviceId}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDeviceUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDeviceUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDeviceUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDevicesCountUsingGET returns the count of all devices

  The endpoint returns the count of all devices.
*/
func (a *Client) GetDevicesCountUsingGET(params *GetDevicesCountUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*GetDevicesCountUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDevicesCountUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDevicesCountUsingGET",
		Method:             "GET",
		PathPattern:        "/v1/tenant/{tenantId}/devices/count",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDevicesCountUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDevicesCountUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDevicesCountUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDevicesUsingGET returns all devices

  The endpoint returns a list of devices.
*/
func (a *Client) GetDevicesUsingGET(params *GetDevicesUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*GetDevicesUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDevicesUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDevicesUsingGET",
		Method:             "GET",
		PathPattern:        "/v1/tenant/{tenantId}/devices",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDevicesUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDevicesUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDevicesUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetMeasuresByDeviceUsingGET returns measures
*/
func (a *Client) GetMeasuresByDeviceUsingGET(params *GetMeasuresByDeviceUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*GetMeasuresByDeviceUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMeasuresByDeviceUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getMeasuresByDeviceUsingGET",
		Method:             "GET",
		PathPattern:        "/v1/tenant/{tenantId}/devices/{deviceId}/measures",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetMeasuresByDeviceUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetMeasuresByDeviceUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getMeasuresByDeviceUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetP12CertificateUsingGET downloads device p12 file

  The endpoint is used to download device specific p12 file for authentication.
*/
func (a *Client) GetP12CertificateUsingGET(params *GetP12CertificateUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*GetP12CertificateUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetP12CertificateUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getP12CertificateUsingGET",
		Method:             "GET",
		PathPattern:        "/v1/tenant/{tenantId}/devices/{deviceId}/authentications/clientCertificate/p12",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetP12CertificateUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetP12CertificateUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getP12CertificateUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetPEMCertificateUsingGET downloads a device private key and certificate in p e m format

  The endpoint is used to download a device specific private key and certificate in PEM format for authentication.
*/
func (a *Client) GetPEMCertificateUsingGET(params *GetPEMCertificateUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*GetPEMCertificateUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPEMCertificateUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getPEMCertificateUsingGET",
		Method:             "GET",
		PathPattern:        "/v1/tenant/{tenantId}/devices/{deviceId}/authentications/clientCertificate/pem",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPEMCertificateUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPEMCertificateUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getPEMCertificateUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetPEMCertificateV2UsingGET downloads a device private key and certificate in v2 p e m format

  The endpoint is used to download a device specific private key and certificate in V2 PEM format for authentication.
*/
func (a *Client) GetPEMCertificateV2UsingGET(params *GetPEMCertificateV2UsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*GetPEMCertificateV2UsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPEMCertificateV2UsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getPEMCertificateV2UsingGET",
		Method:             "GET",
		PathPattern:        "/v2/tenant/{tenantId}/devices/{deviceId}/authentications/clientCertificate/pem",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPEMCertificateV2UsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPEMCertificateV2UsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getPEMCertificateV2UsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListDeviceCertificatesUsingGET shows the device certificate fingerprints and expiration dates

  The endpoint is used to list the fingerprints and expiration dates for device certificates of the given device.
*/
func (a *Client) ListDeviceCertificatesUsingGET(params *ListDeviceCertificatesUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*ListDeviceCertificatesUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListDeviceCertificatesUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listDeviceCertificatesUsingGET",
		Method:             "GET",
		PathPattern:        "/v1/tenant/{tenantId}/devices/{deviceId}/authentications/clientCertificate",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListDeviceCertificatesUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListDeviceCertificatesUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listDeviceCertificatesUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListRevokedDeviceCertificatesUsingGET shows the revoked device certificate fingerprints and expiration dates

  The endpoint is used to list the fingerprints and expiration dates for revoked device certificates of the given device.
*/
func (a *Client) ListRevokedDeviceCertificatesUsingGET(params *ListRevokedDeviceCertificatesUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*ListRevokedDeviceCertificatesUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListRevokedDeviceCertificatesUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listRevokedDeviceCertificatesUsingGET",
		Method:             "GET",
		PathPattern:        "/v1/tenant/{tenantId}/devices/{deviceId}/authentications/clientCertificate/listRevoked",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListRevokedDeviceCertificatesUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListRevokedDeviceCertificatesUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listRevokedDeviceCertificatesUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  RevokeDeviceCertificateUsingDELETE revokes a device certificate

  The endpoint is used to revoke a certificate of the given device.
*/
func (a *Client) RevokeDeviceCertificateUsingDELETE(params *RevokeDeviceCertificateUsingDELETEParams, authInfo runtime.ClientAuthInfoWriter) (*RevokeDeviceCertificateUsingDELETEOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRevokeDeviceCertificateUsingDELETEParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "revokeDeviceCertificateUsingDELETE",
		Method:             "DELETE",
		PathPattern:        "/v1/tenant/{tenantId}/devices/{deviceId}/authentications/clientCertificate/{fingerprint}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RevokeDeviceCertificateUsingDELETEReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RevokeDeviceCertificateUsingDELETEOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for revokeDeviceCertificateUsingDELETE: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SendCommandUsingPOST sends a command

  This endpoint is used to send the command specified in the request body to the device associated to the given id.
*/
func (a *Client) SendCommandUsingPOST(params *SendCommandUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter) (*SendCommandUsingPOSTAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSendCommandUsingPOSTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "sendCommandUsingPOST",
		Method:             "POST",
		PathPattern:        "/v1/tenant/{tenantId}/devices/{deviceId}/commands",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SendCommandUsingPOSTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SendCommandUsingPOSTAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for sendCommandUsingPOST: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateCustomPropertyForDevice updates a custom property of a device

  The endpoint is used to update a custom property of the device associated to the given id. The 'key' attribute cannot be modified.
*/
func (a *Client) UpdateCustomPropertyForDevice(params *UpdateCustomPropertyForDeviceParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateCustomPropertyForDeviceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateCustomPropertyForDeviceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateCustomPropertyForDevice",
		Method:             "PUT",
		PathPattern:        "/v1/tenant/{tenantId}/devices/{deviceId}/customProperties/{key}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateCustomPropertyForDeviceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateCustomPropertyForDeviceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateCustomPropertyForDevice: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateDeviceUsingPUT updates a device

  This endpoint is used to update the device associated to the given id with details specified in the request body. This endpoint can only be used to modify a devices name. To update custom properties, sensors or authentications, use the respective APIs.
*/
func (a *Client) UpdateDeviceUsingPUT(params *UpdateDeviceUsingPUTParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateDeviceUsingPUTOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateDeviceUsingPUTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateDeviceUsingPUT",
		Method:             "PUT",
		PathPattern:        "/v1/tenant/{tenantId}/devices/{deviceId}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateDeviceUsingPUTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateDeviceUsingPUTOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateDeviceUsingPUT: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
