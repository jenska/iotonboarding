// Code generated by go-swagger; DO NOT EDIT.

package capabilities

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new capabilities API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for capabilities API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	CreateCapabilityUsingPOST(params *CreateCapabilityUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter) (*CreateCapabilityUsingPOSTOK, error)

	DeleteCapabilityUsingDELETE(params *DeleteCapabilityUsingDELETEParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteCapabilityUsingDELETEOK, error)

	GetCapabilitiesCountUsingGET(params *GetCapabilitiesCountUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*GetCapabilitiesCountUsingGETOK, error)

	GetCapabilitiesUsingGET(params *GetCapabilitiesUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*GetCapabilitiesUsingGETOK, error)

	GetCapabilityUsingGET(params *GetCapabilityUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*GetCapabilityUsingGETOK, error)

	UpdateCapabilityUsingPUT(params *UpdateCapabilityUsingPUTParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateCapabilityUsingPUTOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateCapabilityUsingPOST creates a capability

  This endpoint is used to create a capability.
*/
func (a *Client) CreateCapabilityUsingPOST(params *CreateCapabilityUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter) (*CreateCapabilityUsingPOSTOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateCapabilityUsingPOSTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createCapabilityUsingPOST",
		Method:             "POST",
		PathPattern:        "/v1/tenant/{tenantId}/capabilities",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateCapabilityUsingPOSTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateCapabilityUsingPOSTOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createCapabilityUsingPOST: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteCapabilityUsingDELETE deletes a capability

  The endpoint is used to delete the capability associated to the given id.
*/
func (a *Client) DeleteCapabilityUsingDELETE(params *DeleteCapabilityUsingDELETEParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteCapabilityUsingDELETEOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteCapabilityUsingDELETEParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteCapabilityUsingDELETE",
		Method:             "DELETE",
		PathPattern:        "/v1/tenant/{tenantId}/capabilities/{capabilityId}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteCapabilityUsingDELETEReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteCapabilityUsingDELETEOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteCapabilityUsingDELETE: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetCapabilitiesCountUsingGET returns the count of all capabilities

  The endpoint returns the count of all capabilities.
*/
func (a *Client) GetCapabilitiesCountUsingGET(params *GetCapabilitiesCountUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*GetCapabilitiesCountUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCapabilitiesCountUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getCapabilitiesCountUsingGET",
		Method:             "GET",
		PathPattern:        "/v1/tenant/{tenantId}/capabilities/count",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetCapabilitiesCountUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCapabilitiesCountUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getCapabilitiesCountUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetCapabilitiesUsingGET returns all capabilities

  The endpoint returns a list of capabilities.
*/
func (a *Client) GetCapabilitiesUsingGET(params *GetCapabilitiesUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*GetCapabilitiesUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCapabilitiesUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getCapabilitiesUsingGET",
		Method:             "GET",
		PathPattern:        "/v1/tenant/{tenantId}/capabilities",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetCapabilitiesUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCapabilitiesUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getCapabilitiesUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetCapabilityUsingGET returns a capability

  The endpoint returns the capability associated to the given id.
*/
func (a *Client) GetCapabilityUsingGET(params *GetCapabilityUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*GetCapabilityUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCapabilityUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getCapabilityUsingGET",
		Method:             "GET",
		PathPattern:        "/v1/tenant/{tenantId}/capabilities/{capabilityId}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetCapabilityUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCapabilityUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getCapabilityUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateCapabilityUsingPUT updates a capability

  This endpoint is used to update the capability associated to the given id with details specified in the request body.
*/
func (a *Client) UpdateCapabilityUsingPUT(params *UpdateCapabilityUsingPUTParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateCapabilityUsingPUTOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateCapabilityUsingPUTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateCapabilityUsingPUT",
		Method:             "PUT",
		PathPattern:        "/v1/tenant/{tenantId}/capabilities/{capabilityId}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateCapabilityUsingPUTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateCapabilityUsingPUTOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateCapabilityUsingPUT: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
