// Code generated by go-swagger; DO NOT EDIT.

package capabilities

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GetCapabilitiesUsingGETReader is a Reader for the GetCapabilitiesUsingGET structure.
type GetCapabilitiesUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetCapabilitiesUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetCapabilitiesUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetCapabilitiesUsingGETOK creates a GetCapabilitiesUsingGETOK with default headers values
func NewGetCapabilitiesUsingGETOK() *GetCapabilitiesUsingGETOK {
	return &GetCapabilitiesUsingGETOK{}
}

/*GetCapabilitiesUsingGETOK handles this case with default header values.

Successfully returned capabilities.
*/
type GetCapabilitiesUsingGETOK struct {
	Payload []*GetCapabilitiesUsingGETOKBodyItems0
}

func (o *GetCapabilitiesUsingGETOK) Error() string {
	return fmt.Sprintf("[GET /v1/tenant/{tenantId}/capabilities][%d] getCapabilitiesUsingGETOK  %+v", 200, o.Payload)
}

func (o *GetCapabilitiesUsingGETOK) GetPayload() []*GetCapabilitiesUsingGETOKBodyItems0 {
	return o.Payload
}

func (o *GetCapabilitiesUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*GetCapabilitiesUsingGETOKBodyItems0 CapabilityBean
swagger:model GetCapabilitiesUsingGETOKBodyItems0
*/
type GetCapabilitiesUsingGETOKBodyItems0 struct {

	// The alternate ID of the capability. This field is unique across sensor type.
	AlternateID string `json:"alternateId,omitempty"`

	// Identifier of a capability. Is generated by the system and unique across platform tenant. This field is an immutable.
	// Read Only: true
	ID string `json:"id,omitempty"`

	// The name of the capability.
	// Required: true
	Name *string `json:"name"`

	// The set of properties that compose the capability
	// Required: true
	Properties []*GetCapabilitiesUsingGETOKBodyItems0PropertiesItems0 `json:"properties"`
}

// Validate validates this get capabilities using g e t o k body items0
func (o *GetCapabilitiesUsingGETOKBodyItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetCapabilitiesUsingGETOKBodyItems0) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", o.Name); err != nil {
		return err
	}

	return nil
}

func (o *GetCapabilitiesUsingGETOKBodyItems0) validateProperties(formats strfmt.Registry) error {

	if err := validate.Required("properties", "body", o.Properties); err != nil {
		return err
	}

	for i := 0; i < len(o.Properties); i++ {
		if swag.IsZero(o.Properties[i]) { // not required
			continue
		}

		if o.Properties[i] != nil {
			if err := o.Properties[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("properties" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetCapabilitiesUsingGETOKBodyItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetCapabilitiesUsingGETOKBodyItems0) UnmarshalBinary(b []byte) error {
	var res GetCapabilitiesUsingGETOKBodyItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetCapabilitiesUsingGETOKBodyItems0PropertiesItems0 PropertyBean
swagger:model GetCapabilitiesUsingGETOKBodyItems0PropertiesItems0
*/
type GetCapabilitiesUsingGETOKBodyItems0PropertiesItems0 struct {

	// The data type of the property's value
	// Required: true
	// Enum: [integer long float double boolean date binary string]
	DataType *string `json:"dataType"`

	// formatter
	Formatter *GetCapabilitiesUsingGETOKBodyItems0PropertiesItems0Formatter `json:"formatter,omitempty"`

	// The name of the property
	// Required: true
	Name *string `json:"name"`

	// The unit of measure of the property's value
	UnitOfMeasure string `json:"unitOfMeasure,omitempty"`
}

// Validate validates this get capabilities using g e t o k body items0 properties items0
func (o *GetCapabilitiesUsingGETOKBodyItems0PropertiesItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDataType(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateFormatter(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var getCapabilitiesUsingGETOKBodyItems0PropertiesItems0TypeDataTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["integer","long","float","double","boolean","date","binary","string"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		getCapabilitiesUsingGETOKBodyItems0PropertiesItems0TypeDataTypePropEnum = append(getCapabilitiesUsingGETOKBodyItems0PropertiesItems0TypeDataTypePropEnum, v)
	}
}

const (

	// GetCapabilitiesUsingGETOKBodyItems0PropertiesItems0DataTypeInteger captures enum value "integer"
	GetCapabilitiesUsingGETOKBodyItems0PropertiesItems0DataTypeInteger string = "integer"

	// GetCapabilitiesUsingGETOKBodyItems0PropertiesItems0DataTypeLong captures enum value "long"
	GetCapabilitiesUsingGETOKBodyItems0PropertiesItems0DataTypeLong string = "long"

	// GetCapabilitiesUsingGETOKBodyItems0PropertiesItems0DataTypeFloat captures enum value "float"
	GetCapabilitiesUsingGETOKBodyItems0PropertiesItems0DataTypeFloat string = "float"

	// GetCapabilitiesUsingGETOKBodyItems0PropertiesItems0DataTypeDouble captures enum value "double"
	GetCapabilitiesUsingGETOKBodyItems0PropertiesItems0DataTypeDouble string = "double"

	// GetCapabilitiesUsingGETOKBodyItems0PropertiesItems0DataTypeBoolean captures enum value "boolean"
	GetCapabilitiesUsingGETOKBodyItems0PropertiesItems0DataTypeBoolean string = "boolean"

	// GetCapabilitiesUsingGETOKBodyItems0PropertiesItems0DataTypeDate captures enum value "date"
	GetCapabilitiesUsingGETOKBodyItems0PropertiesItems0DataTypeDate string = "date"

	// GetCapabilitiesUsingGETOKBodyItems0PropertiesItems0DataTypeBinary captures enum value "binary"
	GetCapabilitiesUsingGETOKBodyItems0PropertiesItems0DataTypeBinary string = "binary"

	// GetCapabilitiesUsingGETOKBodyItems0PropertiesItems0DataTypeString captures enum value "string"
	GetCapabilitiesUsingGETOKBodyItems0PropertiesItems0DataTypeString string = "string"
)

// prop value enum
func (o *GetCapabilitiesUsingGETOKBodyItems0PropertiesItems0) validateDataTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, getCapabilitiesUsingGETOKBodyItems0PropertiesItems0TypeDataTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *GetCapabilitiesUsingGETOKBodyItems0PropertiesItems0) validateDataType(formats strfmt.Registry) error {

	if err := validate.Required("dataType", "body", o.DataType); err != nil {
		return err
	}

	// value enum
	if err := o.validateDataTypeEnum("dataType", "body", *o.DataType); err != nil {
		return err
	}

	return nil
}

func (o *GetCapabilitiesUsingGETOKBodyItems0PropertiesItems0) validateFormatter(formats strfmt.Registry) error {

	if swag.IsZero(o.Formatter) { // not required
		return nil
	}

	if o.Formatter != nil {
		if err := o.Formatter.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("formatter")
			}
			return err
		}
	}

	return nil
}

func (o *GetCapabilitiesUsingGETOKBodyItems0PropertiesItems0) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", o.Name); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetCapabilitiesUsingGETOKBodyItems0PropertiesItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetCapabilitiesUsingGETOKBodyItems0PropertiesItems0) UnmarshalBinary(b []byte) error {
	var res GetCapabilitiesUsingGETOKBodyItems0PropertiesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetCapabilitiesUsingGETOKBodyItems0PropertiesItems0Formatter NumberFormatterBean
swagger:model GetCapabilitiesUsingGETOKBodyItems0PropertiesItems0Formatter
*/
type GetCapabilitiesUsingGETOKBodyItems0PropertiesItems0Formatter struct {

	// The input data type
	// Required: true
	// Enum: [integer long float double boolean date binary string]
	DataType *string `json:"dataType"`

	// The power of 10 which the input value should be multiplied to, in order to get the final output value
	Scale int32 `json:"scale,omitempty"`

	// The quantity which the input value should be added to to get the final output value
	Shift float32 `json:"shift,omitempty"`

	// Is swap byte values
	Swap bool `json:"swap,omitempty"`
}

// Validate validates this get capabilities using g e t o k body items0 properties items0 formatter
func (o *GetCapabilitiesUsingGETOKBodyItems0PropertiesItems0Formatter) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDataType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var getCapabilitiesUsingGETOKBodyItems0PropertiesItems0FormatterTypeDataTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["integer","long","float","double","boolean","date","binary","string"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		getCapabilitiesUsingGETOKBodyItems0PropertiesItems0FormatterTypeDataTypePropEnum = append(getCapabilitiesUsingGETOKBodyItems0PropertiesItems0FormatterTypeDataTypePropEnum, v)
	}
}

const (

	// GetCapabilitiesUsingGETOKBodyItems0PropertiesItems0FormatterDataTypeInteger captures enum value "integer"
	GetCapabilitiesUsingGETOKBodyItems0PropertiesItems0FormatterDataTypeInteger string = "integer"

	// GetCapabilitiesUsingGETOKBodyItems0PropertiesItems0FormatterDataTypeLong captures enum value "long"
	GetCapabilitiesUsingGETOKBodyItems0PropertiesItems0FormatterDataTypeLong string = "long"

	// GetCapabilitiesUsingGETOKBodyItems0PropertiesItems0FormatterDataTypeFloat captures enum value "float"
	GetCapabilitiesUsingGETOKBodyItems0PropertiesItems0FormatterDataTypeFloat string = "float"

	// GetCapabilitiesUsingGETOKBodyItems0PropertiesItems0FormatterDataTypeDouble captures enum value "double"
	GetCapabilitiesUsingGETOKBodyItems0PropertiesItems0FormatterDataTypeDouble string = "double"

	// GetCapabilitiesUsingGETOKBodyItems0PropertiesItems0FormatterDataTypeBoolean captures enum value "boolean"
	GetCapabilitiesUsingGETOKBodyItems0PropertiesItems0FormatterDataTypeBoolean string = "boolean"

	// GetCapabilitiesUsingGETOKBodyItems0PropertiesItems0FormatterDataTypeDate captures enum value "date"
	GetCapabilitiesUsingGETOKBodyItems0PropertiesItems0FormatterDataTypeDate string = "date"

	// GetCapabilitiesUsingGETOKBodyItems0PropertiesItems0FormatterDataTypeBinary captures enum value "binary"
	GetCapabilitiesUsingGETOKBodyItems0PropertiesItems0FormatterDataTypeBinary string = "binary"

	// GetCapabilitiesUsingGETOKBodyItems0PropertiesItems0FormatterDataTypeString captures enum value "string"
	GetCapabilitiesUsingGETOKBodyItems0PropertiesItems0FormatterDataTypeString string = "string"
)

// prop value enum
func (o *GetCapabilitiesUsingGETOKBodyItems0PropertiesItems0Formatter) validateDataTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, getCapabilitiesUsingGETOKBodyItems0PropertiesItems0FormatterTypeDataTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *GetCapabilitiesUsingGETOKBodyItems0PropertiesItems0Formatter) validateDataType(formats strfmt.Registry) error {

	if err := validate.Required("formatter"+"."+"dataType", "body", o.DataType); err != nil {
		return err
	}

	// value enum
	if err := o.validateDataTypeEnum("formatter"+"."+"dataType", "body", *o.DataType); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetCapabilitiesUsingGETOKBodyItems0PropertiesItems0Formatter) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetCapabilitiesUsingGETOKBodyItems0PropertiesItems0Formatter) UnmarshalBinary(b []byte) error {
	var res GetCapabilitiesUsingGETOKBodyItems0PropertiesItems0Formatter
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
