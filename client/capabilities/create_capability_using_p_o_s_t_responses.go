// Code generated by go-swagger; DO NOT EDIT.

package capabilities

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateCapabilityUsingPOSTReader is a Reader for the CreateCapabilityUsingPOST structure.
type CreateCapabilityUsingPOSTReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateCapabilityUsingPOSTReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCreateCapabilityUsingPOSTOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCreateCapabilityUsingPOSTBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewCreateCapabilityUsingPOSTConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewCreateCapabilityUsingPOSTOK creates a CreateCapabilityUsingPOSTOK with default headers values
func NewCreateCapabilityUsingPOSTOK() *CreateCapabilityUsingPOSTOK {
	return &CreateCapabilityUsingPOSTOK{}
}

/*CreateCapabilityUsingPOSTOK handles this case with default header values.

Successfully created capability.
*/
type CreateCapabilityUsingPOSTOK struct {
	Payload *CreateCapabilityUsingPOSTOKBody
}

func (o *CreateCapabilityUsingPOSTOK) Error() string {
	return fmt.Sprintf("[POST /v1/tenant/{tenantId}/capabilities][%d] createCapabilityUsingPOSTOK  %+v", 200, o.Payload)
}

func (o *CreateCapabilityUsingPOSTOK) GetPayload() *CreateCapabilityUsingPOSTOKBody {
	return o.Payload
}

func (o *CreateCapabilityUsingPOSTOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(CreateCapabilityUsingPOSTOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateCapabilityUsingPOSTBadRequest creates a CreateCapabilityUsingPOSTBadRequest with default headers values
func NewCreateCapabilityUsingPOSTBadRequest() *CreateCapabilityUsingPOSTBadRequest {
	return &CreateCapabilityUsingPOSTBadRequest{}
}

/*CreateCapabilityUsingPOSTBadRequest handles this case with default header values.

HTTP request is malformed.
*/
type CreateCapabilityUsingPOSTBadRequest struct {
	Payload *CreateCapabilityUsingPOSTBadRequestBody
}

func (o *CreateCapabilityUsingPOSTBadRequest) Error() string {
	return fmt.Sprintf("[POST /v1/tenant/{tenantId}/capabilities][%d] createCapabilityUsingPOSTBadRequest  %+v", 400, o.Payload)
}

func (o *CreateCapabilityUsingPOSTBadRequest) GetPayload() *CreateCapabilityUsingPOSTBadRequestBody {
	return o.Payload
}

func (o *CreateCapabilityUsingPOSTBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(CreateCapabilityUsingPOSTBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateCapabilityUsingPOSTConflict creates a CreateCapabilityUsingPOSTConflict with default headers values
func NewCreateCapabilityUsingPOSTConflict() *CreateCapabilityUsingPOSTConflict {
	return &CreateCapabilityUsingPOSTConflict{}
}

/*CreateCapabilityUsingPOSTConflict handles this case with default header values.

Capability already exists.
*/
type CreateCapabilityUsingPOSTConflict struct {
	Payload *CreateCapabilityUsingPOSTConflictBody
}

func (o *CreateCapabilityUsingPOSTConflict) Error() string {
	return fmt.Sprintf("[POST /v1/tenant/{tenantId}/capabilities][%d] createCapabilityUsingPOSTConflict  %+v", 409, o.Payload)
}

func (o *CreateCapabilityUsingPOSTConflict) GetPayload() *CreateCapabilityUsingPOSTConflictBody {
	return o.Payload
}

func (o *CreateCapabilityUsingPOSTConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(CreateCapabilityUsingPOSTConflictBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*CreateCapabilityUsingPOSTBadRequestBody Response
swagger:model CreateCapabilityUsingPOSTBadRequestBody
*/
type CreateCapabilityUsingPOSTBadRequestBody struct {

	// message
	// Required: true
	Message *string `json:"message"`
}

// Validate validates this create capability using p o s t bad request body
func (o *CreateCapabilityUsingPOSTBadRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateCapabilityUsingPOSTBadRequestBody) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("createCapabilityUsingPOSTBadRequest"+"."+"message", "body", o.Message); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateCapabilityUsingPOSTBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateCapabilityUsingPOSTBadRequestBody) UnmarshalBinary(b []byte) error {
	var res CreateCapabilityUsingPOSTBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*CreateCapabilityUsingPOSTBody CapabilityBean
swagger:model CreateCapabilityUsingPOSTBody
*/
type CreateCapabilityUsingPOSTBody struct {

	// The alternate ID of the capability. This field is unique across sensor type.
	AlternateID string `json:"alternateId,omitempty"`

	// Identifier of a capability. Is generated by the system and unique across platform tenant. This field is an immutable.
	// Read Only: true
	ID string `json:"id,omitempty"`

	// The name of the capability.
	// Required: true
	Name *string `json:"name"`

	// The set of properties that compose the capability
	// Required: true
	Properties []*CreateCapabilityUsingPOSTParamsBodyPropertiesItems0 `json:"properties"`
}

// Validate validates this create capability using p o s t body
func (o *CreateCapabilityUsingPOSTBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateCapabilityUsingPOSTBody) validateName(formats strfmt.Registry) error {

	if err := validate.Required("request"+"."+"name", "body", o.Name); err != nil {
		return err
	}

	return nil
}

func (o *CreateCapabilityUsingPOSTBody) validateProperties(formats strfmt.Registry) error {

	if err := validate.Required("request"+"."+"properties", "body", o.Properties); err != nil {
		return err
	}

	for i := 0; i < len(o.Properties); i++ {
		if swag.IsZero(o.Properties[i]) { // not required
			continue
		}

		if o.Properties[i] != nil {
			if err := o.Properties[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("request" + "." + "properties" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateCapabilityUsingPOSTBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateCapabilityUsingPOSTBody) UnmarshalBinary(b []byte) error {
	var res CreateCapabilityUsingPOSTBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*CreateCapabilityUsingPOSTConflictBody Response
swagger:model CreateCapabilityUsingPOSTConflictBody
*/
type CreateCapabilityUsingPOSTConflictBody struct {

	// message
	// Required: true
	Message *string `json:"message"`
}

// Validate validates this create capability using p o s t conflict body
func (o *CreateCapabilityUsingPOSTConflictBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateCapabilityUsingPOSTConflictBody) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("createCapabilityUsingPOSTConflict"+"."+"message", "body", o.Message); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateCapabilityUsingPOSTConflictBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateCapabilityUsingPOSTConflictBody) UnmarshalBinary(b []byte) error {
	var res CreateCapabilityUsingPOSTConflictBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*CreateCapabilityUsingPOSTOKBody CapabilityBean
swagger:model CreateCapabilityUsingPOSTOKBody
*/
type CreateCapabilityUsingPOSTOKBody struct {

	// The alternate ID of the capability. This field is unique across sensor type.
	AlternateID string `json:"alternateId,omitempty"`

	// Identifier of a capability. Is generated by the system and unique across platform tenant. This field is an immutable.
	// Read Only: true
	ID string `json:"id,omitempty"`

	// The name of the capability.
	// Required: true
	Name *string `json:"name"`

	// The set of properties that compose the capability
	// Required: true
	Properties []*CreateCapabilityUsingPOSTOKBodyPropertiesItems0 `json:"properties"`
}

// Validate validates this create capability using p o s t o k body
func (o *CreateCapabilityUsingPOSTOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateCapabilityUsingPOSTOKBody) validateName(formats strfmt.Registry) error {

	if err := validate.Required("createCapabilityUsingPOSTOK"+"."+"name", "body", o.Name); err != nil {
		return err
	}

	return nil
}

func (o *CreateCapabilityUsingPOSTOKBody) validateProperties(formats strfmt.Registry) error {

	if err := validate.Required("createCapabilityUsingPOSTOK"+"."+"properties", "body", o.Properties); err != nil {
		return err
	}

	for i := 0; i < len(o.Properties); i++ {
		if swag.IsZero(o.Properties[i]) { // not required
			continue
		}

		if o.Properties[i] != nil {
			if err := o.Properties[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("createCapabilityUsingPOSTOK" + "." + "properties" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateCapabilityUsingPOSTOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateCapabilityUsingPOSTOKBody) UnmarshalBinary(b []byte) error {
	var res CreateCapabilityUsingPOSTOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*CreateCapabilityUsingPOSTOKBodyPropertiesItems0 PropertyBean
swagger:model CreateCapabilityUsingPOSTOKBodyPropertiesItems0
*/
type CreateCapabilityUsingPOSTOKBodyPropertiesItems0 struct {

	// The data type of the property's value
	// Required: true
	// Enum: [integer long float double boolean date binary string]
	DataType *string `json:"dataType"`

	// formatter
	Formatter *CreateCapabilityUsingPOSTOKBodyPropertiesItems0Formatter `json:"formatter,omitempty"`

	// The name of the property
	// Required: true
	Name *string `json:"name"`

	// The unit of measure of the property's value
	UnitOfMeasure string `json:"unitOfMeasure,omitempty"`
}

// Validate validates this create capability using p o s t o k body properties items0
func (o *CreateCapabilityUsingPOSTOKBodyPropertiesItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDataType(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateFormatter(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var createCapabilityUsingPOSTOKBodyPropertiesItems0TypeDataTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["integer","long","float","double","boolean","date","binary","string"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		createCapabilityUsingPOSTOKBodyPropertiesItems0TypeDataTypePropEnum = append(createCapabilityUsingPOSTOKBodyPropertiesItems0TypeDataTypePropEnum, v)
	}
}

const (

	// CreateCapabilityUsingPOSTOKBodyPropertiesItems0DataTypeInteger captures enum value "integer"
	CreateCapabilityUsingPOSTOKBodyPropertiesItems0DataTypeInteger string = "integer"

	// CreateCapabilityUsingPOSTOKBodyPropertiesItems0DataTypeLong captures enum value "long"
	CreateCapabilityUsingPOSTOKBodyPropertiesItems0DataTypeLong string = "long"

	// CreateCapabilityUsingPOSTOKBodyPropertiesItems0DataTypeFloat captures enum value "float"
	CreateCapabilityUsingPOSTOKBodyPropertiesItems0DataTypeFloat string = "float"

	// CreateCapabilityUsingPOSTOKBodyPropertiesItems0DataTypeDouble captures enum value "double"
	CreateCapabilityUsingPOSTOKBodyPropertiesItems0DataTypeDouble string = "double"

	// CreateCapabilityUsingPOSTOKBodyPropertiesItems0DataTypeBoolean captures enum value "boolean"
	CreateCapabilityUsingPOSTOKBodyPropertiesItems0DataTypeBoolean string = "boolean"

	// CreateCapabilityUsingPOSTOKBodyPropertiesItems0DataTypeDate captures enum value "date"
	CreateCapabilityUsingPOSTOKBodyPropertiesItems0DataTypeDate string = "date"

	// CreateCapabilityUsingPOSTOKBodyPropertiesItems0DataTypeBinary captures enum value "binary"
	CreateCapabilityUsingPOSTOKBodyPropertiesItems0DataTypeBinary string = "binary"

	// CreateCapabilityUsingPOSTOKBodyPropertiesItems0DataTypeString captures enum value "string"
	CreateCapabilityUsingPOSTOKBodyPropertiesItems0DataTypeString string = "string"
)

// prop value enum
func (o *CreateCapabilityUsingPOSTOKBodyPropertiesItems0) validateDataTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, createCapabilityUsingPOSTOKBodyPropertiesItems0TypeDataTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *CreateCapabilityUsingPOSTOKBodyPropertiesItems0) validateDataType(formats strfmt.Registry) error {

	if err := validate.Required("dataType", "body", o.DataType); err != nil {
		return err
	}

	// value enum
	if err := o.validateDataTypeEnum("dataType", "body", *o.DataType); err != nil {
		return err
	}

	return nil
}

func (o *CreateCapabilityUsingPOSTOKBodyPropertiesItems0) validateFormatter(formats strfmt.Registry) error {

	if swag.IsZero(o.Formatter) { // not required
		return nil
	}

	if o.Formatter != nil {
		if err := o.Formatter.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("formatter")
			}
			return err
		}
	}

	return nil
}

func (o *CreateCapabilityUsingPOSTOKBodyPropertiesItems0) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", o.Name); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateCapabilityUsingPOSTOKBodyPropertiesItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateCapabilityUsingPOSTOKBodyPropertiesItems0) UnmarshalBinary(b []byte) error {
	var res CreateCapabilityUsingPOSTOKBodyPropertiesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*CreateCapabilityUsingPOSTOKBodyPropertiesItems0Formatter NumberFormatterBean
swagger:model CreateCapabilityUsingPOSTOKBodyPropertiesItems0Formatter
*/
type CreateCapabilityUsingPOSTOKBodyPropertiesItems0Formatter struct {

	// The input data type
	// Required: true
	// Enum: [integer long float double boolean date binary string]
	DataType *string `json:"dataType"`

	// The power of 10 which the input value should be multiplied to, in order to get the final output value
	Scale int32 `json:"scale,omitempty"`

	// The quantity which the input value should be added to to get the final output value
	Shift float32 `json:"shift,omitempty"`

	// Is swap byte values
	Swap bool `json:"swap,omitempty"`
}

// Validate validates this create capability using p o s t o k body properties items0 formatter
func (o *CreateCapabilityUsingPOSTOKBodyPropertiesItems0Formatter) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDataType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var createCapabilityUsingPOSTOKBodyPropertiesItems0FormatterTypeDataTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["integer","long","float","double","boolean","date","binary","string"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		createCapabilityUsingPOSTOKBodyPropertiesItems0FormatterTypeDataTypePropEnum = append(createCapabilityUsingPOSTOKBodyPropertiesItems0FormatterTypeDataTypePropEnum, v)
	}
}

const (

	// CreateCapabilityUsingPOSTOKBodyPropertiesItems0FormatterDataTypeInteger captures enum value "integer"
	CreateCapabilityUsingPOSTOKBodyPropertiesItems0FormatterDataTypeInteger string = "integer"

	// CreateCapabilityUsingPOSTOKBodyPropertiesItems0FormatterDataTypeLong captures enum value "long"
	CreateCapabilityUsingPOSTOKBodyPropertiesItems0FormatterDataTypeLong string = "long"

	// CreateCapabilityUsingPOSTOKBodyPropertiesItems0FormatterDataTypeFloat captures enum value "float"
	CreateCapabilityUsingPOSTOKBodyPropertiesItems0FormatterDataTypeFloat string = "float"

	// CreateCapabilityUsingPOSTOKBodyPropertiesItems0FormatterDataTypeDouble captures enum value "double"
	CreateCapabilityUsingPOSTOKBodyPropertiesItems0FormatterDataTypeDouble string = "double"

	// CreateCapabilityUsingPOSTOKBodyPropertiesItems0FormatterDataTypeBoolean captures enum value "boolean"
	CreateCapabilityUsingPOSTOKBodyPropertiesItems0FormatterDataTypeBoolean string = "boolean"

	// CreateCapabilityUsingPOSTOKBodyPropertiesItems0FormatterDataTypeDate captures enum value "date"
	CreateCapabilityUsingPOSTOKBodyPropertiesItems0FormatterDataTypeDate string = "date"

	// CreateCapabilityUsingPOSTOKBodyPropertiesItems0FormatterDataTypeBinary captures enum value "binary"
	CreateCapabilityUsingPOSTOKBodyPropertiesItems0FormatterDataTypeBinary string = "binary"

	// CreateCapabilityUsingPOSTOKBodyPropertiesItems0FormatterDataTypeString captures enum value "string"
	CreateCapabilityUsingPOSTOKBodyPropertiesItems0FormatterDataTypeString string = "string"
)

// prop value enum
func (o *CreateCapabilityUsingPOSTOKBodyPropertiesItems0Formatter) validateDataTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, createCapabilityUsingPOSTOKBodyPropertiesItems0FormatterTypeDataTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *CreateCapabilityUsingPOSTOKBodyPropertiesItems0Formatter) validateDataType(formats strfmt.Registry) error {

	if err := validate.Required("formatter"+"."+"dataType", "body", o.DataType); err != nil {
		return err
	}

	// value enum
	if err := o.validateDataTypeEnum("formatter"+"."+"dataType", "body", *o.DataType); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateCapabilityUsingPOSTOKBodyPropertiesItems0Formatter) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateCapabilityUsingPOSTOKBodyPropertiesItems0Formatter) UnmarshalBinary(b []byte) error {
	var res CreateCapabilityUsingPOSTOKBodyPropertiesItems0Formatter
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*CreateCapabilityUsingPOSTParamsBodyPropertiesItems0 PropertyBean
swagger:model CreateCapabilityUsingPOSTParamsBodyPropertiesItems0
*/
type CreateCapabilityUsingPOSTParamsBodyPropertiesItems0 struct {

	// The data type of the property's value
	// Required: true
	// Enum: [integer long float double boolean date binary string]
	DataType *string `json:"dataType"`

	// formatter
	Formatter *CreateCapabilityUsingPOSTParamsBodyPropertiesItems0Formatter `json:"formatter,omitempty"`

	// The name of the property
	// Required: true
	Name *string `json:"name"`

	// The unit of measure of the property's value
	UnitOfMeasure string `json:"unitOfMeasure,omitempty"`
}

// Validate validates this create capability using p o s t params body properties items0
func (o *CreateCapabilityUsingPOSTParamsBodyPropertiesItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDataType(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateFormatter(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var createCapabilityUsingPOSTParamsBodyPropertiesItems0TypeDataTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["integer","long","float","double","boolean","date","binary","string"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		createCapabilityUsingPOSTParamsBodyPropertiesItems0TypeDataTypePropEnum = append(createCapabilityUsingPOSTParamsBodyPropertiesItems0TypeDataTypePropEnum, v)
	}
}

const (

	// CreateCapabilityUsingPOSTParamsBodyPropertiesItems0DataTypeInteger captures enum value "integer"
	CreateCapabilityUsingPOSTParamsBodyPropertiesItems0DataTypeInteger string = "integer"

	// CreateCapabilityUsingPOSTParamsBodyPropertiesItems0DataTypeLong captures enum value "long"
	CreateCapabilityUsingPOSTParamsBodyPropertiesItems0DataTypeLong string = "long"

	// CreateCapabilityUsingPOSTParamsBodyPropertiesItems0DataTypeFloat captures enum value "float"
	CreateCapabilityUsingPOSTParamsBodyPropertiesItems0DataTypeFloat string = "float"

	// CreateCapabilityUsingPOSTParamsBodyPropertiesItems0DataTypeDouble captures enum value "double"
	CreateCapabilityUsingPOSTParamsBodyPropertiesItems0DataTypeDouble string = "double"

	// CreateCapabilityUsingPOSTParamsBodyPropertiesItems0DataTypeBoolean captures enum value "boolean"
	CreateCapabilityUsingPOSTParamsBodyPropertiesItems0DataTypeBoolean string = "boolean"

	// CreateCapabilityUsingPOSTParamsBodyPropertiesItems0DataTypeDate captures enum value "date"
	CreateCapabilityUsingPOSTParamsBodyPropertiesItems0DataTypeDate string = "date"

	// CreateCapabilityUsingPOSTParamsBodyPropertiesItems0DataTypeBinary captures enum value "binary"
	CreateCapabilityUsingPOSTParamsBodyPropertiesItems0DataTypeBinary string = "binary"

	// CreateCapabilityUsingPOSTParamsBodyPropertiesItems0DataTypeString captures enum value "string"
	CreateCapabilityUsingPOSTParamsBodyPropertiesItems0DataTypeString string = "string"
)

// prop value enum
func (o *CreateCapabilityUsingPOSTParamsBodyPropertiesItems0) validateDataTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, createCapabilityUsingPOSTParamsBodyPropertiesItems0TypeDataTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *CreateCapabilityUsingPOSTParamsBodyPropertiesItems0) validateDataType(formats strfmt.Registry) error {

	if err := validate.Required("dataType", "body", o.DataType); err != nil {
		return err
	}

	// value enum
	if err := o.validateDataTypeEnum("dataType", "body", *o.DataType); err != nil {
		return err
	}

	return nil
}

func (o *CreateCapabilityUsingPOSTParamsBodyPropertiesItems0) validateFormatter(formats strfmt.Registry) error {

	if swag.IsZero(o.Formatter) { // not required
		return nil
	}

	if o.Formatter != nil {
		if err := o.Formatter.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("formatter")
			}
			return err
		}
	}

	return nil
}

func (o *CreateCapabilityUsingPOSTParamsBodyPropertiesItems0) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", o.Name); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateCapabilityUsingPOSTParamsBodyPropertiesItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateCapabilityUsingPOSTParamsBodyPropertiesItems0) UnmarshalBinary(b []byte) error {
	var res CreateCapabilityUsingPOSTParamsBodyPropertiesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*CreateCapabilityUsingPOSTParamsBodyPropertiesItems0Formatter NumberFormatterBean
swagger:model CreateCapabilityUsingPOSTParamsBodyPropertiesItems0Formatter
*/
type CreateCapabilityUsingPOSTParamsBodyPropertiesItems0Formatter struct {

	// The input data type
	// Required: true
	// Enum: [integer long float double boolean date binary string]
	DataType *string `json:"dataType"`

	// The power of 10 which the input value should be multiplied to, in order to get the final output value
	Scale int32 `json:"scale,omitempty"`

	// The quantity which the input value should be added to to get the final output value
	Shift float32 `json:"shift,omitempty"`

	// Is swap byte values
	Swap bool `json:"swap,omitempty"`
}

// Validate validates this create capability using p o s t params body properties items0 formatter
func (o *CreateCapabilityUsingPOSTParamsBodyPropertiesItems0Formatter) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDataType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var createCapabilityUsingPOSTParamsBodyPropertiesItems0FormatterTypeDataTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["integer","long","float","double","boolean","date","binary","string"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		createCapabilityUsingPOSTParamsBodyPropertiesItems0FormatterTypeDataTypePropEnum = append(createCapabilityUsingPOSTParamsBodyPropertiesItems0FormatterTypeDataTypePropEnum, v)
	}
}

const (

	// CreateCapabilityUsingPOSTParamsBodyPropertiesItems0FormatterDataTypeInteger captures enum value "integer"
	CreateCapabilityUsingPOSTParamsBodyPropertiesItems0FormatterDataTypeInteger string = "integer"

	// CreateCapabilityUsingPOSTParamsBodyPropertiesItems0FormatterDataTypeLong captures enum value "long"
	CreateCapabilityUsingPOSTParamsBodyPropertiesItems0FormatterDataTypeLong string = "long"

	// CreateCapabilityUsingPOSTParamsBodyPropertiesItems0FormatterDataTypeFloat captures enum value "float"
	CreateCapabilityUsingPOSTParamsBodyPropertiesItems0FormatterDataTypeFloat string = "float"

	// CreateCapabilityUsingPOSTParamsBodyPropertiesItems0FormatterDataTypeDouble captures enum value "double"
	CreateCapabilityUsingPOSTParamsBodyPropertiesItems0FormatterDataTypeDouble string = "double"

	// CreateCapabilityUsingPOSTParamsBodyPropertiesItems0FormatterDataTypeBoolean captures enum value "boolean"
	CreateCapabilityUsingPOSTParamsBodyPropertiesItems0FormatterDataTypeBoolean string = "boolean"

	// CreateCapabilityUsingPOSTParamsBodyPropertiesItems0FormatterDataTypeDate captures enum value "date"
	CreateCapabilityUsingPOSTParamsBodyPropertiesItems0FormatterDataTypeDate string = "date"

	// CreateCapabilityUsingPOSTParamsBodyPropertiesItems0FormatterDataTypeBinary captures enum value "binary"
	CreateCapabilityUsingPOSTParamsBodyPropertiesItems0FormatterDataTypeBinary string = "binary"

	// CreateCapabilityUsingPOSTParamsBodyPropertiesItems0FormatterDataTypeString captures enum value "string"
	CreateCapabilityUsingPOSTParamsBodyPropertiesItems0FormatterDataTypeString string = "string"
)

// prop value enum
func (o *CreateCapabilityUsingPOSTParamsBodyPropertiesItems0Formatter) validateDataTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, createCapabilityUsingPOSTParamsBodyPropertiesItems0FormatterTypeDataTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *CreateCapabilityUsingPOSTParamsBodyPropertiesItems0Formatter) validateDataType(formats strfmt.Registry) error {

	if err := validate.Required("formatter"+"."+"dataType", "body", o.DataType); err != nil {
		return err
	}

	// value enum
	if err := o.validateDataTypeEnum("formatter"+"."+"dataType", "body", *o.DataType); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateCapabilityUsingPOSTParamsBodyPropertiesItems0Formatter) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateCapabilityUsingPOSTParamsBodyPropertiesItems0Formatter) UnmarshalBinary(b []byte) error {
	var res CreateCapabilityUsingPOSTParamsBodyPropertiesItems0Formatter
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
