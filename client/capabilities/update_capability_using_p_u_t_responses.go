// Code generated by go-swagger; DO NOT EDIT.

package capabilities

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UpdateCapabilityUsingPUTReader is a Reader for the UpdateCapabilityUsingPUT structure.
type UpdateCapabilityUsingPUTReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateCapabilityUsingPUTReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateCapabilityUsingPUTOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateCapabilityUsingPUTBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateCapabilityUsingPUTNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewUpdateCapabilityUsingPUTConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUpdateCapabilityUsingPUTOK creates a UpdateCapabilityUsingPUTOK with default headers values
func NewUpdateCapabilityUsingPUTOK() *UpdateCapabilityUsingPUTOK {
	return &UpdateCapabilityUsingPUTOK{}
}

/*UpdateCapabilityUsingPUTOK handles this case with default header values.

Successfully updated capability.
*/
type UpdateCapabilityUsingPUTOK struct {
	Payload *UpdateCapabilityUsingPUTOKBody
}

func (o *UpdateCapabilityUsingPUTOK) Error() string {
	return fmt.Sprintf("[PUT /v1/tenant/{tenantId}/capabilities/{capabilityId}][%d] updateCapabilityUsingPUTOK  %+v", 200, o.Payload)
}

func (o *UpdateCapabilityUsingPUTOK) GetPayload() *UpdateCapabilityUsingPUTOKBody {
	return o.Payload
}

func (o *UpdateCapabilityUsingPUTOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(UpdateCapabilityUsingPUTOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateCapabilityUsingPUTBadRequest creates a UpdateCapabilityUsingPUTBadRequest with default headers values
func NewUpdateCapabilityUsingPUTBadRequest() *UpdateCapabilityUsingPUTBadRequest {
	return &UpdateCapabilityUsingPUTBadRequest{}
}

/*UpdateCapabilityUsingPUTBadRequest handles this case with default header values.

HTTP request is malformed.
*/
type UpdateCapabilityUsingPUTBadRequest struct {
	Payload *UpdateCapabilityUsingPUTBadRequestBody
}

func (o *UpdateCapabilityUsingPUTBadRequest) Error() string {
	return fmt.Sprintf("[PUT /v1/tenant/{tenantId}/capabilities/{capabilityId}][%d] updateCapabilityUsingPUTBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateCapabilityUsingPUTBadRequest) GetPayload() *UpdateCapabilityUsingPUTBadRequestBody {
	return o.Payload
}

func (o *UpdateCapabilityUsingPUTBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(UpdateCapabilityUsingPUTBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateCapabilityUsingPUTNotFound creates a UpdateCapabilityUsingPUTNotFound with default headers values
func NewUpdateCapabilityUsingPUTNotFound() *UpdateCapabilityUsingPUTNotFound {
	return &UpdateCapabilityUsingPUTNotFound{}
}

/*UpdateCapabilityUsingPUTNotFound handles this case with default header values.

Capability with specified id does not exist.
*/
type UpdateCapabilityUsingPUTNotFound struct {
	Payload *UpdateCapabilityUsingPUTNotFoundBody
}

func (o *UpdateCapabilityUsingPUTNotFound) Error() string {
	return fmt.Sprintf("[PUT /v1/tenant/{tenantId}/capabilities/{capabilityId}][%d] updateCapabilityUsingPUTNotFound  %+v", 404, o.Payload)
}

func (o *UpdateCapabilityUsingPUTNotFound) GetPayload() *UpdateCapabilityUsingPUTNotFoundBody {
	return o.Payload
}

func (o *UpdateCapabilityUsingPUTNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(UpdateCapabilityUsingPUTNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateCapabilityUsingPUTConflict creates a UpdateCapabilityUsingPUTConflict with default headers values
func NewUpdateCapabilityUsingPUTConflict() *UpdateCapabilityUsingPUTConflict {
	return &UpdateCapabilityUsingPUTConflict{}
}

/*UpdateCapabilityUsingPUTConflict handles this case with default header values.

Capability is still used by sensor types.
*/
type UpdateCapabilityUsingPUTConflict struct {
	Payload *UpdateCapabilityUsingPUTConflictBody
}

func (o *UpdateCapabilityUsingPUTConflict) Error() string {
	return fmt.Sprintf("[PUT /v1/tenant/{tenantId}/capabilities/{capabilityId}][%d] updateCapabilityUsingPUTConflict  %+v", 409, o.Payload)
}

func (o *UpdateCapabilityUsingPUTConflict) GetPayload() *UpdateCapabilityUsingPUTConflictBody {
	return o.Payload
}

func (o *UpdateCapabilityUsingPUTConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(UpdateCapabilityUsingPUTConflictBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*UpdateCapabilityUsingPUTBadRequestBody Response
swagger:model UpdateCapabilityUsingPUTBadRequestBody
*/
type UpdateCapabilityUsingPUTBadRequestBody struct {

	// message
	// Required: true
	Message *string `json:"message"`
}

// Validate validates this update capability using p u t bad request body
func (o *UpdateCapabilityUsingPUTBadRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateCapabilityUsingPUTBadRequestBody) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("updateCapabilityUsingPUTBadRequest"+"."+"message", "body", o.Message); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateCapabilityUsingPUTBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateCapabilityUsingPUTBadRequestBody) UnmarshalBinary(b []byte) error {
	var res UpdateCapabilityUsingPUTBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdateCapabilityUsingPUTBody CapabilityUpdateBean
swagger:model UpdateCapabilityUsingPUTBody
*/
type UpdateCapabilityUsingPUTBody struct {

	// The alternate ID of the capability. This field is unique across sensor type.
	AlternateID string `json:"alternateId,omitempty"`

	// Identifier of a capability. Is generated by the system and unique across platform tenant. This field is an immutable.
	// Read Only: true
	ID string `json:"id,omitempty"`

	// The name of the capability.
	// Required: true
	Name *string `json:"name"`

	// properties
	// Read Only: true
	Properties []*UpdateCapabilityUsingPUTParamsBodyPropertiesItems0 `json:"properties"`
}

// Validate validates this update capability using p u t body
func (o *UpdateCapabilityUsingPUTBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateCapabilityUsingPUTBody) validateName(formats strfmt.Registry) error {

	if err := validate.Required("request"+"."+"name", "body", o.Name); err != nil {
		return err
	}

	return nil
}

func (o *UpdateCapabilityUsingPUTBody) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(o.Properties) { // not required
		return nil
	}

	for i := 0; i < len(o.Properties); i++ {
		if swag.IsZero(o.Properties[i]) { // not required
			continue
		}

		if o.Properties[i] != nil {
			if err := o.Properties[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("request" + "." + "properties" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateCapabilityUsingPUTBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateCapabilityUsingPUTBody) UnmarshalBinary(b []byte) error {
	var res UpdateCapabilityUsingPUTBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdateCapabilityUsingPUTConflictBody Response
swagger:model UpdateCapabilityUsingPUTConflictBody
*/
type UpdateCapabilityUsingPUTConflictBody struct {

	// message
	// Required: true
	Message *string `json:"message"`
}

// Validate validates this update capability using p u t conflict body
func (o *UpdateCapabilityUsingPUTConflictBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateCapabilityUsingPUTConflictBody) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("updateCapabilityUsingPUTConflict"+"."+"message", "body", o.Message); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateCapabilityUsingPUTConflictBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateCapabilityUsingPUTConflictBody) UnmarshalBinary(b []byte) error {
	var res UpdateCapabilityUsingPUTConflictBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdateCapabilityUsingPUTNotFoundBody Response
swagger:model UpdateCapabilityUsingPUTNotFoundBody
*/
type UpdateCapabilityUsingPUTNotFoundBody struct {

	// message
	// Required: true
	Message *string `json:"message"`
}

// Validate validates this update capability using p u t not found body
func (o *UpdateCapabilityUsingPUTNotFoundBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateCapabilityUsingPUTNotFoundBody) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("updateCapabilityUsingPUTNotFound"+"."+"message", "body", o.Message); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateCapabilityUsingPUTNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateCapabilityUsingPUTNotFoundBody) UnmarshalBinary(b []byte) error {
	var res UpdateCapabilityUsingPUTNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdateCapabilityUsingPUTOKBody CapabilityBean
swagger:model UpdateCapabilityUsingPUTOKBody
*/
type UpdateCapabilityUsingPUTOKBody struct {

	// The alternate ID of the capability. This field is unique across sensor type.
	AlternateID string `json:"alternateId,omitempty"`

	// Identifier of a capability. Is generated by the system and unique across platform tenant. This field is an immutable.
	// Read Only: true
	ID string `json:"id,omitempty"`

	// The name of the capability.
	// Required: true
	Name *string `json:"name"`

	// The set of properties that compose the capability
	// Required: true
	Properties []*UpdateCapabilityUsingPUTOKBodyPropertiesItems0 `json:"properties"`
}

// Validate validates this update capability using p u t o k body
func (o *UpdateCapabilityUsingPUTOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateCapabilityUsingPUTOKBody) validateName(formats strfmt.Registry) error {

	if err := validate.Required("updateCapabilityUsingPUTOK"+"."+"name", "body", o.Name); err != nil {
		return err
	}

	return nil
}

func (o *UpdateCapabilityUsingPUTOKBody) validateProperties(formats strfmt.Registry) error {

	if err := validate.Required("updateCapabilityUsingPUTOK"+"."+"properties", "body", o.Properties); err != nil {
		return err
	}

	for i := 0; i < len(o.Properties); i++ {
		if swag.IsZero(o.Properties[i]) { // not required
			continue
		}

		if o.Properties[i] != nil {
			if err := o.Properties[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("updateCapabilityUsingPUTOK" + "." + "properties" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateCapabilityUsingPUTOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateCapabilityUsingPUTOKBody) UnmarshalBinary(b []byte) error {
	var res UpdateCapabilityUsingPUTOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdateCapabilityUsingPUTOKBodyPropertiesItems0 PropertyBean
swagger:model UpdateCapabilityUsingPUTOKBodyPropertiesItems0
*/
type UpdateCapabilityUsingPUTOKBodyPropertiesItems0 struct {

	// The data type of the property's value
	// Required: true
	// Enum: [integer long float double boolean date binary string]
	DataType *string `json:"dataType"`

	// formatter
	Formatter *UpdateCapabilityUsingPUTOKBodyPropertiesItems0Formatter `json:"formatter,omitempty"`

	// The name of the property
	// Required: true
	Name *string `json:"name"`

	// The unit of measure of the property's value
	UnitOfMeasure string `json:"unitOfMeasure,omitempty"`
}

// Validate validates this update capability using p u t o k body properties items0
func (o *UpdateCapabilityUsingPUTOKBodyPropertiesItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDataType(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateFormatter(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var updateCapabilityUsingPUTOKBodyPropertiesItems0TypeDataTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["integer","long","float","double","boolean","date","binary","string"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		updateCapabilityUsingPUTOKBodyPropertiesItems0TypeDataTypePropEnum = append(updateCapabilityUsingPUTOKBodyPropertiesItems0TypeDataTypePropEnum, v)
	}
}

const (

	// UpdateCapabilityUsingPUTOKBodyPropertiesItems0DataTypeInteger captures enum value "integer"
	UpdateCapabilityUsingPUTOKBodyPropertiesItems0DataTypeInteger string = "integer"

	// UpdateCapabilityUsingPUTOKBodyPropertiesItems0DataTypeLong captures enum value "long"
	UpdateCapabilityUsingPUTOKBodyPropertiesItems0DataTypeLong string = "long"

	// UpdateCapabilityUsingPUTOKBodyPropertiesItems0DataTypeFloat captures enum value "float"
	UpdateCapabilityUsingPUTOKBodyPropertiesItems0DataTypeFloat string = "float"

	// UpdateCapabilityUsingPUTOKBodyPropertiesItems0DataTypeDouble captures enum value "double"
	UpdateCapabilityUsingPUTOKBodyPropertiesItems0DataTypeDouble string = "double"

	// UpdateCapabilityUsingPUTOKBodyPropertiesItems0DataTypeBoolean captures enum value "boolean"
	UpdateCapabilityUsingPUTOKBodyPropertiesItems0DataTypeBoolean string = "boolean"

	// UpdateCapabilityUsingPUTOKBodyPropertiesItems0DataTypeDate captures enum value "date"
	UpdateCapabilityUsingPUTOKBodyPropertiesItems0DataTypeDate string = "date"

	// UpdateCapabilityUsingPUTOKBodyPropertiesItems0DataTypeBinary captures enum value "binary"
	UpdateCapabilityUsingPUTOKBodyPropertiesItems0DataTypeBinary string = "binary"

	// UpdateCapabilityUsingPUTOKBodyPropertiesItems0DataTypeString captures enum value "string"
	UpdateCapabilityUsingPUTOKBodyPropertiesItems0DataTypeString string = "string"
)

// prop value enum
func (o *UpdateCapabilityUsingPUTOKBodyPropertiesItems0) validateDataTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, updateCapabilityUsingPUTOKBodyPropertiesItems0TypeDataTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *UpdateCapabilityUsingPUTOKBodyPropertiesItems0) validateDataType(formats strfmt.Registry) error {

	if err := validate.Required("dataType", "body", o.DataType); err != nil {
		return err
	}

	// value enum
	if err := o.validateDataTypeEnum("dataType", "body", *o.DataType); err != nil {
		return err
	}

	return nil
}

func (o *UpdateCapabilityUsingPUTOKBodyPropertiesItems0) validateFormatter(formats strfmt.Registry) error {

	if swag.IsZero(o.Formatter) { // not required
		return nil
	}

	if o.Formatter != nil {
		if err := o.Formatter.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("formatter")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateCapabilityUsingPUTOKBodyPropertiesItems0) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", o.Name); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateCapabilityUsingPUTOKBodyPropertiesItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateCapabilityUsingPUTOKBodyPropertiesItems0) UnmarshalBinary(b []byte) error {
	var res UpdateCapabilityUsingPUTOKBodyPropertiesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdateCapabilityUsingPUTOKBodyPropertiesItems0Formatter NumberFormatterBean
swagger:model UpdateCapabilityUsingPUTOKBodyPropertiesItems0Formatter
*/
type UpdateCapabilityUsingPUTOKBodyPropertiesItems0Formatter struct {

	// The input data type
	// Required: true
	// Enum: [integer long float double boolean date binary string]
	DataType *string `json:"dataType"`

	// The power of 10 which the input value should be multiplied to, in order to get the final output value
	Scale int32 `json:"scale,omitempty"`

	// The quantity which the input value should be added to to get the final output value
	Shift float32 `json:"shift,omitempty"`

	// Is swap byte values
	Swap bool `json:"swap,omitempty"`
}

// Validate validates this update capability using p u t o k body properties items0 formatter
func (o *UpdateCapabilityUsingPUTOKBodyPropertiesItems0Formatter) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDataType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var updateCapabilityUsingPUTOKBodyPropertiesItems0FormatterTypeDataTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["integer","long","float","double","boolean","date","binary","string"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		updateCapabilityUsingPUTOKBodyPropertiesItems0FormatterTypeDataTypePropEnum = append(updateCapabilityUsingPUTOKBodyPropertiesItems0FormatterTypeDataTypePropEnum, v)
	}
}

const (

	// UpdateCapabilityUsingPUTOKBodyPropertiesItems0FormatterDataTypeInteger captures enum value "integer"
	UpdateCapabilityUsingPUTOKBodyPropertiesItems0FormatterDataTypeInteger string = "integer"

	// UpdateCapabilityUsingPUTOKBodyPropertiesItems0FormatterDataTypeLong captures enum value "long"
	UpdateCapabilityUsingPUTOKBodyPropertiesItems0FormatterDataTypeLong string = "long"

	// UpdateCapabilityUsingPUTOKBodyPropertiesItems0FormatterDataTypeFloat captures enum value "float"
	UpdateCapabilityUsingPUTOKBodyPropertiesItems0FormatterDataTypeFloat string = "float"

	// UpdateCapabilityUsingPUTOKBodyPropertiesItems0FormatterDataTypeDouble captures enum value "double"
	UpdateCapabilityUsingPUTOKBodyPropertiesItems0FormatterDataTypeDouble string = "double"

	// UpdateCapabilityUsingPUTOKBodyPropertiesItems0FormatterDataTypeBoolean captures enum value "boolean"
	UpdateCapabilityUsingPUTOKBodyPropertiesItems0FormatterDataTypeBoolean string = "boolean"

	// UpdateCapabilityUsingPUTOKBodyPropertiesItems0FormatterDataTypeDate captures enum value "date"
	UpdateCapabilityUsingPUTOKBodyPropertiesItems0FormatterDataTypeDate string = "date"

	// UpdateCapabilityUsingPUTOKBodyPropertiesItems0FormatterDataTypeBinary captures enum value "binary"
	UpdateCapabilityUsingPUTOKBodyPropertiesItems0FormatterDataTypeBinary string = "binary"

	// UpdateCapabilityUsingPUTOKBodyPropertiesItems0FormatterDataTypeString captures enum value "string"
	UpdateCapabilityUsingPUTOKBodyPropertiesItems0FormatterDataTypeString string = "string"
)

// prop value enum
func (o *UpdateCapabilityUsingPUTOKBodyPropertiesItems0Formatter) validateDataTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, updateCapabilityUsingPUTOKBodyPropertiesItems0FormatterTypeDataTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *UpdateCapabilityUsingPUTOKBodyPropertiesItems0Formatter) validateDataType(formats strfmt.Registry) error {

	if err := validate.Required("formatter"+"."+"dataType", "body", o.DataType); err != nil {
		return err
	}

	// value enum
	if err := o.validateDataTypeEnum("formatter"+"."+"dataType", "body", *o.DataType); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateCapabilityUsingPUTOKBodyPropertiesItems0Formatter) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateCapabilityUsingPUTOKBodyPropertiesItems0Formatter) UnmarshalBinary(b []byte) error {
	var res UpdateCapabilityUsingPUTOKBodyPropertiesItems0Formatter
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdateCapabilityUsingPUTParamsBodyPropertiesItems0 PropertyBean
swagger:model UpdateCapabilityUsingPUTParamsBodyPropertiesItems0
*/
type UpdateCapabilityUsingPUTParamsBodyPropertiesItems0 struct {

	// The data type of the property's value
	// Required: true
	// Enum: [integer long float double boolean date binary string]
	DataType *string `json:"dataType"`

	// formatter
	Formatter *UpdateCapabilityUsingPUTParamsBodyPropertiesItems0Formatter `json:"formatter,omitempty"`

	// The name of the property
	// Required: true
	Name *string `json:"name"`

	// The unit of measure of the property's value
	UnitOfMeasure string `json:"unitOfMeasure,omitempty"`
}

// Validate validates this update capability using p u t params body properties items0
func (o *UpdateCapabilityUsingPUTParamsBodyPropertiesItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDataType(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateFormatter(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var updateCapabilityUsingPUTParamsBodyPropertiesItems0TypeDataTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["integer","long","float","double","boolean","date","binary","string"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		updateCapabilityUsingPUTParamsBodyPropertiesItems0TypeDataTypePropEnum = append(updateCapabilityUsingPUTParamsBodyPropertiesItems0TypeDataTypePropEnum, v)
	}
}

const (

	// UpdateCapabilityUsingPUTParamsBodyPropertiesItems0DataTypeInteger captures enum value "integer"
	UpdateCapabilityUsingPUTParamsBodyPropertiesItems0DataTypeInteger string = "integer"

	// UpdateCapabilityUsingPUTParamsBodyPropertiesItems0DataTypeLong captures enum value "long"
	UpdateCapabilityUsingPUTParamsBodyPropertiesItems0DataTypeLong string = "long"

	// UpdateCapabilityUsingPUTParamsBodyPropertiesItems0DataTypeFloat captures enum value "float"
	UpdateCapabilityUsingPUTParamsBodyPropertiesItems0DataTypeFloat string = "float"

	// UpdateCapabilityUsingPUTParamsBodyPropertiesItems0DataTypeDouble captures enum value "double"
	UpdateCapabilityUsingPUTParamsBodyPropertiesItems0DataTypeDouble string = "double"

	// UpdateCapabilityUsingPUTParamsBodyPropertiesItems0DataTypeBoolean captures enum value "boolean"
	UpdateCapabilityUsingPUTParamsBodyPropertiesItems0DataTypeBoolean string = "boolean"

	// UpdateCapabilityUsingPUTParamsBodyPropertiesItems0DataTypeDate captures enum value "date"
	UpdateCapabilityUsingPUTParamsBodyPropertiesItems0DataTypeDate string = "date"

	// UpdateCapabilityUsingPUTParamsBodyPropertiesItems0DataTypeBinary captures enum value "binary"
	UpdateCapabilityUsingPUTParamsBodyPropertiesItems0DataTypeBinary string = "binary"

	// UpdateCapabilityUsingPUTParamsBodyPropertiesItems0DataTypeString captures enum value "string"
	UpdateCapabilityUsingPUTParamsBodyPropertiesItems0DataTypeString string = "string"
)

// prop value enum
func (o *UpdateCapabilityUsingPUTParamsBodyPropertiesItems0) validateDataTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, updateCapabilityUsingPUTParamsBodyPropertiesItems0TypeDataTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *UpdateCapabilityUsingPUTParamsBodyPropertiesItems0) validateDataType(formats strfmt.Registry) error {

	if err := validate.Required("dataType", "body", o.DataType); err != nil {
		return err
	}

	// value enum
	if err := o.validateDataTypeEnum("dataType", "body", *o.DataType); err != nil {
		return err
	}

	return nil
}

func (o *UpdateCapabilityUsingPUTParamsBodyPropertiesItems0) validateFormatter(formats strfmt.Registry) error {

	if swag.IsZero(o.Formatter) { // not required
		return nil
	}

	if o.Formatter != nil {
		if err := o.Formatter.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("formatter")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateCapabilityUsingPUTParamsBodyPropertiesItems0) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", o.Name); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateCapabilityUsingPUTParamsBodyPropertiesItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateCapabilityUsingPUTParamsBodyPropertiesItems0) UnmarshalBinary(b []byte) error {
	var res UpdateCapabilityUsingPUTParamsBodyPropertiesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdateCapabilityUsingPUTParamsBodyPropertiesItems0Formatter NumberFormatterBean
swagger:model UpdateCapabilityUsingPUTParamsBodyPropertiesItems0Formatter
*/
type UpdateCapabilityUsingPUTParamsBodyPropertiesItems0Formatter struct {

	// The input data type
	// Required: true
	// Enum: [integer long float double boolean date binary string]
	DataType *string `json:"dataType"`

	// The power of 10 which the input value should be multiplied to, in order to get the final output value
	Scale int32 `json:"scale,omitempty"`

	// The quantity which the input value should be added to to get the final output value
	Shift float32 `json:"shift,omitempty"`

	// Is swap byte values
	Swap bool `json:"swap,omitempty"`
}

// Validate validates this update capability using p u t params body properties items0 formatter
func (o *UpdateCapabilityUsingPUTParamsBodyPropertiesItems0Formatter) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDataType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var updateCapabilityUsingPUTParamsBodyPropertiesItems0FormatterTypeDataTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["integer","long","float","double","boolean","date","binary","string"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		updateCapabilityUsingPUTParamsBodyPropertiesItems0FormatterTypeDataTypePropEnum = append(updateCapabilityUsingPUTParamsBodyPropertiesItems0FormatterTypeDataTypePropEnum, v)
	}
}

const (

	// UpdateCapabilityUsingPUTParamsBodyPropertiesItems0FormatterDataTypeInteger captures enum value "integer"
	UpdateCapabilityUsingPUTParamsBodyPropertiesItems0FormatterDataTypeInteger string = "integer"

	// UpdateCapabilityUsingPUTParamsBodyPropertiesItems0FormatterDataTypeLong captures enum value "long"
	UpdateCapabilityUsingPUTParamsBodyPropertiesItems0FormatterDataTypeLong string = "long"

	// UpdateCapabilityUsingPUTParamsBodyPropertiesItems0FormatterDataTypeFloat captures enum value "float"
	UpdateCapabilityUsingPUTParamsBodyPropertiesItems0FormatterDataTypeFloat string = "float"

	// UpdateCapabilityUsingPUTParamsBodyPropertiesItems0FormatterDataTypeDouble captures enum value "double"
	UpdateCapabilityUsingPUTParamsBodyPropertiesItems0FormatterDataTypeDouble string = "double"

	// UpdateCapabilityUsingPUTParamsBodyPropertiesItems0FormatterDataTypeBoolean captures enum value "boolean"
	UpdateCapabilityUsingPUTParamsBodyPropertiesItems0FormatterDataTypeBoolean string = "boolean"

	// UpdateCapabilityUsingPUTParamsBodyPropertiesItems0FormatterDataTypeDate captures enum value "date"
	UpdateCapabilityUsingPUTParamsBodyPropertiesItems0FormatterDataTypeDate string = "date"

	// UpdateCapabilityUsingPUTParamsBodyPropertiesItems0FormatterDataTypeBinary captures enum value "binary"
	UpdateCapabilityUsingPUTParamsBodyPropertiesItems0FormatterDataTypeBinary string = "binary"

	// UpdateCapabilityUsingPUTParamsBodyPropertiesItems0FormatterDataTypeString captures enum value "string"
	UpdateCapabilityUsingPUTParamsBodyPropertiesItems0FormatterDataTypeString string = "string"
)

// prop value enum
func (o *UpdateCapabilityUsingPUTParamsBodyPropertiesItems0Formatter) validateDataTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, updateCapabilityUsingPUTParamsBodyPropertiesItems0FormatterTypeDataTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *UpdateCapabilityUsingPUTParamsBodyPropertiesItems0Formatter) validateDataType(formats strfmt.Registry) error {

	if err := validate.Required("formatter"+"."+"dataType", "body", o.DataType); err != nil {
		return err
	}

	// value enum
	if err := o.validateDataTypeEnum("formatter"+"."+"dataType", "body", *o.DataType); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateCapabilityUsingPUTParamsBodyPropertiesItems0Formatter) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateCapabilityUsingPUTParamsBodyPropertiesItems0Formatter) UnmarshalBinary(b []byte) error {
	var res UpdateCapabilityUsingPUTParamsBodyPropertiesItems0Formatter
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
