// Code generated by go-swagger; DO NOT EDIT.

package capabilities

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GetCapabilitiesCountUsingGETReader is a Reader for the GetCapabilitiesCountUsingGET structure.
type GetCapabilitiesCountUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetCapabilitiesCountUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetCapabilitiesCountUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetCapabilitiesCountUsingGETBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetCapabilitiesCountUsingGETNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetCapabilitiesCountUsingGETOK creates a GetCapabilitiesCountUsingGETOK with default headers values
func NewGetCapabilitiesCountUsingGETOK() *GetCapabilitiesCountUsingGETOK {
	return &GetCapabilitiesCountUsingGETOK{}
}

/*GetCapabilitiesCountUsingGETOK handles this case with default header values.

Successfully returned count of capabilities.
*/
type GetCapabilitiesCountUsingGETOK struct {
	Payload int64
}

func (o *GetCapabilitiesCountUsingGETOK) Error() string {
	return fmt.Sprintf("[GET /v1/tenant/{tenantId}/capabilities/count][%d] getCapabilitiesCountUsingGETOK  %+v", 200, o.Payload)
}

func (o *GetCapabilitiesCountUsingGETOK) GetPayload() int64 {
	return o.Payload
}

func (o *GetCapabilitiesCountUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCapabilitiesCountUsingGETBadRequest creates a GetCapabilitiesCountUsingGETBadRequest with default headers values
func NewGetCapabilitiesCountUsingGETBadRequest() *GetCapabilitiesCountUsingGETBadRequest {
	return &GetCapabilitiesCountUsingGETBadRequest{}
}

/*GetCapabilitiesCountUsingGETBadRequest handles this case with default header values.

HTTP request is malformed.
*/
type GetCapabilitiesCountUsingGETBadRequest struct {
	Payload *GetCapabilitiesCountUsingGETBadRequestBody
}

func (o *GetCapabilitiesCountUsingGETBadRequest) Error() string {
	return fmt.Sprintf("[GET /v1/tenant/{tenantId}/capabilities/count][%d] getCapabilitiesCountUsingGETBadRequest  %+v", 400, o.Payload)
}

func (o *GetCapabilitiesCountUsingGETBadRequest) GetPayload() *GetCapabilitiesCountUsingGETBadRequestBody {
	return o.Payload
}

func (o *GetCapabilitiesCountUsingGETBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetCapabilitiesCountUsingGETBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCapabilitiesCountUsingGETNotFound creates a GetCapabilitiesCountUsingGETNotFound with default headers values
func NewGetCapabilitiesCountUsingGETNotFound() *GetCapabilitiesCountUsingGETNotFound {
	return &GetCapabilitiesCountUsingGETNotFound{}
}

/*GetCapabilitiesCountUsingGETNotFound handles this case with default header values.

Tenant with specified id does not exist.
*/
type GetCapabilitiesCountUsingGETNotFound struct {
	Payload *GetCapabilitiesCountUsingGETNotFoundBody
}

func (o *GetCapabilitiesCountUsingGETNotFound) Error() string {
	return fmt.Sprintf("[GET /v1/tenant/{tenantId}/capabilities/count][%d] getCapabilitiesCountUsingGETNotFound  %+v", 404, o.Payload)
}

func (o *GetCapabilitiesCountUsingGETNotFound) GetPayload() *GetCapabilitiesCountUsingGETNotFoundBody {
	return o.Payload
}

func (o *GetCapabilitiesCountUsingGETNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetCapabilitiesCountUsingGETNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*GetCapabilitiesCountUsingGETBadRequestBody Response
swagger:model GetCapabilitiesCountUsingGETBadRequestBody
*/
type GetCapabilitiesCountUsingGETBadRequestBody struct {

	// message
	// Required: true
	Message *string `json:"message"`
}

// Validate validates this get capabilities count using g e t bad request body
func (o *GetCapabilitiesCountUsingGETBadRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetCapabilitiesCountUsingGETBadRequestBody) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("getCapabilitiesCountUsingGETBadRequest"+"."+"message", "body", o.Message); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetCapabilitiesCountUsingGETBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetCapabilitiesCountUsingGETBadRequestBody) UnmarshalBinary(b []byte) error {
	var res GetCapabilitiesCountUsingGETBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetCapabilitiesCountUsingGETNotFoundBody Response
swagger:model GetCapabilitiesCountUsingGETNotFoundBody
*/
type GetCapabilitiesCountUsingGETNotFoundBody struct {

	// message
	// Required: true
	Message *string `json:"message"`
}

// Validate validates this get capabilities count using g e t not found body
func (o *GetCapabilitiesCountUsingGETNotFoundBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetCapabilitiesCountUsingGETNotFoundBody) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("getCapabilitiesCountUsingGETNotFound"+"."+"message", "body", o.Message); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetCapabilitiesCountUsingGETNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetCapabilitiesCountUsingGETNotFoundBody) UnmarshalBinary(b []byte) error {
	var res GetCapabilitiesCountUsingGETNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
