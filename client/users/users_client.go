// Code generated by go-swagger; DO NOT EDIT.

package users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new users API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for users API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	CreateCustomPropertyForUser(params *CreateCustomPropertyForUserParams, authInfo runtime.ClientAuthInfoWriter) (*CreateCustomPropertyForUserOK, error)

	CreateRoleForUser(params *CreateRoleForUserParams, authInfo runtime.ClientAuthInfoWriter) (*CreateRoleForUserOK, error)

	CreateUserUsingPOST(params *CreateUserUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter) (*CreateUserUsingPOSTOK, error)

	DeleteCustomPropertyForUser(params *DeleteCustomPropertyForUserParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteCustomPropertyForUserOK, error)

	DeleteRoleForUser(params *DeleteRoleForUserParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteRoleForUserOK, error)

	DeleteUserUsingDELETE(params *DeleteUserUsingDELETEParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteUserUsingDELETEOK, error)

	GetUserTenantAssignmentsUsingGET1(params *GetUserTenantAssignmentsUsingGET1Params, authInfo runtime.ClientAuthInfoWriter) (*GetUserTenantAssignmentsUsingGET1OK, error)

	GetUserUsingGET(params *GetUserUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*GetUserUsingGETOK, error)

	GetUsersCountUsingGET(params *GetUsersCountUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*GetUsersCountUsingGETOK, error)

	GetUsersUsingGET(params *GetUsersUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*GetUsersUsingGETOK, error)

	UnlockUser(params *UnlockUserParams, authInfo runtime.ClientAuthInfoWriter) (*UnlockUserOK, error)

	UpdateCustomPropertyForUser(params *UpdateCustomPropertyForUserParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateCustomPropertyForUserOK, error)

	UpdateUserPasswordUsingPUT(params *UpdateUserPasswordUsingPUTParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateUserPasswordUsingPUTOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateCustomPropertyForUser adds a custom property to a user

  The endpoint is used to add a custom property to the user associated to the given id.
*/
func (a *Client) CreateCustomPropertyForUser(params *CreateCustomPropertyForUserParams, authInfo runtime.ClientAuthInfoWriter) (*CreateCustomPropertyForUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateCustomPropertyForUserParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createCustomPropertyForUser",
		Method:             "POST",
		PathPattern:        "/v1/users/{userId}/customProperties",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateCustomPropertyForUserReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateCustomPropertyForUserOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createCustomPropertyForUser: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateRoleForUser adds a role to a user

  The endpoint is used to add a role to the user associated to the given id.
*/
func (a *Client) CreateRoleForUser(params *CreateRoleForUserParams, authInfo runtime.ClientAuthInfoWriter) (*CreateRoleForUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateRoleForUserParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createRoleForUser",
		Method:             "POST",
		PathPattern:        "/v1/users/{userId}/roles",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateRoleForUserReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateRoleForUserOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createRoleForUser: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateUserUsingPOST creates a user

  The endpoint is used to create a user.
*/
func (a *Client) CreateUserUsingPOST(params *CreateUserUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter) (*CreateUserUsingPOSTOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateUserUsingPOSTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createUserUsingPOST",
		Method:             "POST",
		PathPattern:        "/v1/users",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateUserUsingPOSTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateUserUsingPOSTOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createUserUsingPOST: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteCustomPropertyForUser deletes a custom property from a user

  The endpoint is used to delete a custom property from the user associated to the given id.
*/
func (a *Client) DeleteCustomPropertyForUser(params *DeleteCustomPropertyForUserParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteCustomPropertyForUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteCustomPropertyForUserParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteCustomPropertyForUser",
		Method:             "DELETE",
		PathPattern:        "/v1/users/{userId}/customProperties/{key}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteCustomPropertyForUserReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteCustomPropertyForUserOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteCustomPropertyForUser: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteRoleForUser deletes a role from a user

  The endpoint is used to remove a role from the user associated to the given id.
*/
func (a *Client) DeleteRoleForUser(params *DeleteRoleForUserParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteRoleForUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteRoleForUserParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteRoleForUser",
		Method:             "DELETE",
		PathPattern:        "/v1/users/{userId}/roles/{role}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteRoleForUserReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteRoleForUserOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteRoleForUser: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteUserUsingDELETE deletes a user

  The endpoint is used to delete the user associated to the given id.
*/
func (a *Client) DeleteUserUsingDELETE(params *DeleteUserUsingDELETEParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteUserUsingDELETEOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteUserUsingDELETEParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteUserUsingDELETE",
		Method:             "DELETE",
		PathPattern:        "/v1/users/{userId}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteUserUsingDELETEReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteUserUsingDELETEOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteUserUsingDELETE: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetUserTenantAssignmentsUsingGET1 returns all tenants of a user

  The endpoint returns a list of tenants assigned to the user associated with the given id.
*/
func (a *Client) GetUserTenantAssignmentsUsingGET1(params *GetUserTenantAssignmentsUsingGET1Params, authInfo runtime.ClientAuthInfoWriter) (*GetUserTenantAssignmentsUsingGET1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUserTenantAssignmentsUsingGET1Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getUserTenantAssignmentsUsingGET_1",
		Method:             "GET",
		PathPattern:        "/v1/users/{userId}/tenants",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetUserTenantAssignmentsUsingGET1Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetUserTenantAssignmentsUsingGET1OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getUserTenantAssignmentsUsingGET_1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetUserUsingGET returns a user

  The endpoint returns the user associated to the given id.
*/
func (a *Client) GetUserUsingGET(params *GetUserUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*GetUserUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUserUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getUserUsingGET",
		Method:             "GET",
		PathPattern:        "/v1/users/{userId}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetUserUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetUserUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getUserUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetUsersCountUsingGET returns the count of all users

  The endpoint returns the count of all users.
*/
func (a *Client) GetUsersCountUsingGET(params *GetUsersCountUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*GetUsersCountUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUsersCountUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getUsersCountUsingGET",
		Method:             "GET",
		PathPattern:        "/v1/users/count",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetUsersCountUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetUsersCountUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getUsersCountUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetUsersUsingGET returns all users

  The endpoint returns a list of users.
*/
func (a *Client) GetUsersUsingGET(params *GetUsersUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*GetUsersUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUsersUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getUsersUsingGET",
		Method:             "GET",
		PathPattern:        "/v1/users",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetUsersUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetUsersUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getUsersUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UnlockUser unlocks user if user is locked

  The endpoint is used to unlock the user associated to the given id
*/
func (a *Client) UnlockUser(params *UnlockUserParams, authInfo runtime.ClientAuthInfoWriter) (*UnlockUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUnlockUserParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "unlockUser",
		Method:             "PUT",
		PathPattern:        "/v1/users/{userId}/unlock",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UnlockUserReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UnlockUserOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for unlockUser: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateCustomPropertyForUser updates a custom property of a user

  The endpoint is used to update a custom property of the user associated to the given id. The 'key' attribute cannot be modified.
*/
func (a *Client) UpdateCustomPropertyForUser(params *UpdateCustomPropertyForUserParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateCustomPropertyForUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateCustomPropertyForUserParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateCustomPropertyForUser",
		Method:             "PUT",
		PathPattern:        "/v1/users/{userId}/customProperties/{key}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateCustomPropertyForUserReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateCustomPropertyForUserOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateCustomPropertyForUser: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateUserPasswordUsingPUT updates the password of the user

  The endpoint is used to update the password of the user associated to the given id.
*/
func (a *Client) UpdateUserPasswordUsingPUT(params *UpdateUserPasswordUsingPUTParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateUserPasswordUsingPUTOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateUserPasswordUsingPUTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateUserPasswordUsingPUT",
		Method:             "PUT",
		PathPattern:        "/v1/users/{userId}/authentications/basic",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateUserPasswordUsingPUTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateUserPasswordUsingPUTOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateUserPasswordUsingPUT: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
