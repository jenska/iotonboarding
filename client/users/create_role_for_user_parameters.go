// Code generated by go-swagger; DO NOT EDIT.

package users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewCreateRoleForUserParams creates a new CreateRoleForUserParams object
// with the default values initialized.
func NewCreateRoleForUserParams() *CreateRoleForUserParams {
	var ()
	return &CreateRoleForUserParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewCreateRoleForUserParamsWithTimeout creates a new CreateRoleForUserParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewCreateRoleForUserParamsWithTimeout(timeout time.Duration) *CreateRoleForUserParams {
	var ()
	return &CreateRoleForUserParams{

		timeout: timeout,
	}
}

// NewCreateRoleForUserParamsWithContext creates a new CreateRoleForUserParams object
// with the default values initialized, and the ability to set a context for a request
func NewCreateRoleForUserParamsWithContext(ctx context.Context) *CreateRoleForUserParams {
	var ()
	return &CreateRoleForUserParams{

		Context: ctx,
	}
}

// NewCreateRoleForUserParamsWithHTTPClient creates a new CreateRoleForUserParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewCreateRoleForUserParamsWithHTTPClient(client *http.Client) *CreateRoleForUserParams {
	var ()
	return &CreateRoleForUserParams{
		HTTPClient: client,
	}
}

/*CreateRoleForUserParams contains all the parameters to send to the API endpoint
for the create role for user operation typically these are written to a http.Request
*/
type CreateRoleForUserParams struct {

	/*Request
	  Specification of the user role that will be created.

	*/
	Request CreateRoleForUserBody
	/*UserID
	  Unique identifier of a user.

	*/
	UserID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the create role for user params
func (o *CreateRoleForUserParams) WithTimeout(timeout time.Duration) *CreateRoleForUserParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the create role for user params
func (o *CreateRoleForUserParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the create role for user params
func (o *CreateRoleForUserParams) WithContext(ctx context.Context) *CreateRoleForUserParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the create role for user params
func (o *CreateRoleForUserParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the create role for user params
func (o *CreateRoleForUserParams) WithHTTPClient(client *http.Client) *CreateRoleForUserParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the create role for user params
func (o *CreateRoleForUserParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithRequest adds the request to the create role for user params
func (o *CreateRoleForUserParams) WithRequest(request CreateRoleForUserBody) *CreateRoleForUserParams {
	o.SetRequest(request)
	return o
}

// SetRequest adds the request to the create role for user params
func (o *CreateRoleForUserParams) SetRequest(request CreateRoleForUserBody) {
	o.Request = request
}

// WithUserID adds the userID to the create role for user params
func (o *CreateRoleForUserParams) WithUserID(userID string) *CreateRoleForUserParams {
	o.SetUserID(userID)
	return o
}

// SetUserID adds the userId to the create role for user params
func (o *CreateRoleForUserParams) SetUserID(userID string) {
	o.UserID = userID
}

// WriteToRequest writes these params to a swagger request
func (o *CreateRoleForUserParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if err := r.SetBodyParam(o.Request); err != nil {
		return err
	}

	// path param userId
	if err := r.SetPathParam("userId", o.UserID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
