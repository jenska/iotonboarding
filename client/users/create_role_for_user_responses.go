// Code generated by go-swagger; DO NOT EDIT.

package users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateRoleForUserReader is a Reader for the CreateRoleForUser structure.
type CreateRoleForUserReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateRoleForUserReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCreateRoleForUserOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCreateRoleForUserBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewCreateRoleForUserNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewCreateRoleForUserConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewCreateRoleForUserOK creates a CreateRoleForUserOK with default headers values
func NewCreateRoleForUserOK() *CreateRoleForUserOK {
	return &CreateRoleForUserOK{}
}

/*CreateRoleForUserOK handles this case with default header values.

Successfully created role
*/
type CreateRoleForUserOK struct {
	Payload *CreateRoleForUserOKBody
}

func (o *CreateRoleForUserOK) Error() string {
	return fmt.Sprintf("[POST /v1/users/{userId}/roles][%d] createRoleForUserOK  %+v", 200, o.Payload)
}

func (o *CreateRoleForUserOK) GetPayload() *CreateRoleForUserOKBody {
	return o.Payload
}

func (o *CreateRoleForUserOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(CreateRoleForUserOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateRoleForUserBadRequest creates a CreateRoleForUserBadRequest with default headers values
func NewCreateRoleForUserBadRequest() *CreateRoleForUserBadRequest {
	return &CreateRoleForUserBadRequest{}
}

/*CreateRoleForUserBadRequest handles this case with default header values.

HTTP request is malformed.
*/
type CreateRoleForUserBadRequest struct {
	Payload *CreateRoleForUserBadRequestBody
}

func (o *CreateRoleForUserBadRequest) Error() string {
	return fmt.Sprintf("[POST /v1/users/{userId}/roles][%d] createRoleForUserBadRequest  %+v", 400, o.Payload)
}

func (o *CreateRoleForUserBadRequest) GetPayload() *CreateRoleForUserBadRequestBody {
	return o.Payload
}

func (o *CreateRoleForUserBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(CreateRoleForUserBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateRoleForUserNotFound creates a CreateRoleForUserNotFound with default headers values
func NewCreateRoleForUserNotFound() *CreateRoleForUserNotFound {
	return &CreateRoleForUserNotFound{}
}

/*CreateRoleForUserNotFound handles this case with default header values.

User with specified id does not exist.
*/
type CreateRoleForUserNotFound struct {
	Payload *CreateRoleForUserNotFoundBody
}

func (o *CreateRoleForUserNotFound) Error() string {
	return fmt.Sprintf("[POST /v1/users/{userId}/roles][%d] createRoleForUserNotFound  %+v", 404, o.Payload)
}

func (o *CreateRoleForUserNotFound) GetPayload() *CreateRoleForUserNotFoundBody {
	return o.Payload
}

func (o *CreateRoleForUserNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(CreateRoleForUserNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateRoleForUserConflict creates a CreateRoleForUserConflict with default headers values
func NewCreateRoleForUserConflict() *CreateRoleForUserConflict {
	return &CreateRoleForUserConflict{}
}

/*CreateRoleForUserConflict handles this case with default header values.

Role already exists.
*/
type CreateRoleForUserConflict struct {
	Payload *CreateRoleForUserConflictBody
}

func (o *CreateRoleForUserConflict) Error() string {
	return fmt.Sprintf("[POST /v1/users/{userId}/roles][%d] createRoleForUserConflict  %+v", 409, o.Payload)
}

func (o *CreateRoleForUserConflict) GetPayload() *CreateRoleForUserConflictBody {
	return o.Payload
}

func (o *CreateRoleForUserConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(CreateRoleForUserConflictBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*CreateRoleForUserBadRequestBody Response
swagger:model CreateRoleForUserBadRequestBody
*/
type CreateRoleForUserBadRequestBody struct {

	// message
	// Required: true
	Message *string `json:"message"`
}

// Validate validates this create role for user bad request body
func (o *CreateRoleForUserBadRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateRoleForUserBadRequestBody) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("createRoleForUserBadRequest"+"."+"message", "body", o.Message); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateRoleForUserBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateRoleForUserBadRequestBody) UnmarshalBinary(b []byte) error {
	var res CreateRoleForUserBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*CreateRoleForUserBody UserRoleBean
swagger:model CreateRoleForUserBody
*/
type CreateRoleForUserBody struct {

	// The role of the user.
	// Required: true
	// Enum: [instanceOwner]
	Role *string `json:"role"`
}

// Validate validates this create role for user body
func (o *CreateRoleForUserBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateRole(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var createRoleForUserBodyTypeRolePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["instanceOwner"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		createRoleForUserBodyTypeRolePropEnum = append(createRoleForUserBodyTypeRolePropEnum, v)
	}
}

const (

	// CreateRoleForUserBodyRoleInstanceOwner captures enum value "instanceOwner"
	CreateRoleForUserBodyRoleInstanceOwner string = "instanceOwner"
)

// prop value enum
func (o *CreateRoleForUserBody) validateRoleEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, createRoleForUserBodyTypeRolePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *CreateRoleForUserBody) validateRole(formats strfmt.Registry) error {

	if err := validate.Required("request"+"."+"role", "body", o.Role); err != nil {
		return err
	}

	// value enum
	if err := o.validateRoleEnum("request"+"."+"role", "body", *o.Role); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateRoleForUserBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateRoleForUserBody) UnmarshalBinary(b []byte) error {
	var res CreateRoleForUserBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*CreateRoleForUserConflictBody Response
swagger:model CreateRoleForUserConflictBody
*/
type CreateRoleForUserConflictBody struct {

	// message
	// Required: true
	Message *string `json:"message"`
}

// Validate validates this create role for user conflict body
func (o *CreateRoleForUserConflictBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateRoleForUserConflictBody) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("createRoleForUserConflict"+"."+"message", "body", o.Message); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateRoleForUserConflictBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateRoleForUserConflictBody) UnmarshalBinary(b []byte) error {
	var res CreateRoleForUserConflictBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*CreateRoleForUserNotFoundBody Response
swagger:model CreateRoleForUserNotFoundBody
*/
type CreateRoleForUserNotFoundBody struct {

	// message
	// Required: true
	Message *string `json:"message"`
}

// Validate validates this create role for user not found body
func (o *CreateRoleForUserNotFoundBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateRoleForUserNotFoundBody) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("createRoleForUserNotFound"+"."+"message", "body", o.Message); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateRoleForUserNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateRoleForUserNotFoundBody) UnmarshalBinary(b []byte) error {
	var res CreateRoleForUserNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*CreateRoleForUserOKBody UserRoleBean
swagger:model CreateRoleForUserOKBody
*/
type CreateRoleForUserOKBody struct {

	// The role of the user.
	// Required: true
	// Enum: [instanceOwner]
	Role *string `json:"role"`
}

// Validate validates this create role for user o k body
func (o *CreateRoleForUserOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateRole(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var createRoleForUserOKBodyTypeRolePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["instanceOwner"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		createRoleForUserOKBodyTypeRolePropEnum = append(createRoleForUserOKBodyTypeRolePropEnum, v)
	}
}

const (

	// CreateRoleForUserOKBodyRoleInstanceOwner captures enum value "instanceOwner"
	CreateRoleForUserOKBodyRoleInstanceOwner string = "instanceOwner"
)

// prop value enum
func (o *CreateRoleForUserOKBody) validateRoleEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, createRoleForUserOKBodyTypeRolePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *CreateRoleForUserOKBody) validateRole(formats strfmt.Registry) error {

	if err := validate.Required("createRoleForUserOK"+"."+"role", "body", o.Role); err != nil {
		return err
	}

	// value enum
	if err := o.validateRoleEnum("createRoleForUserOK"+"."+"role", "body", *o.Role); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateRoleForUserOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateRoleForUserOKBody) UnmarshalBinary(b []byte) error {
	var res CreateRoleForUserOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
