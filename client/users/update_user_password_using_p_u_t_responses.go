// Code generated by go-swagger; DO NOT EDIT.

package users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UpdateUserPasswordUsingPUTReader is a Reader for the UpdateUserPasswordUsingPUT structure.
type UpdateUserPasswordUsingPUTReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateUserPasswordUsingPUTReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateUserPasswordUsingPUTOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateUserPasswordUsingPUTBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateUserPasswordUsingPUTNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUpdateUserPasswordUsingPUTOK creates a UpdateUserPasswordUsingPUTOK with default headers values
func NewUpdateUserPasswordUsingPUTOK() *UpdateUserPasswordUsingPUTOK {
	return &UpdateUserPasswordUsingPUTOK{}
}

/*UpdateUserPasswordUsingPUTOK handles this case with default header values.

Successfully updated password.
*/
type UpdateUserPasswordUsingPUTOK struct {
	Payload *UpdateUserPasswordUsingPUTOKBody
}

func (o *UpdateUserPasswordUsingPUTOK) Error() string {
	return fmt.Sprintf("[PUT /v1/users/{userId}/authentications/basic][%d] updateUserPasswordUsingPUTOK  %+v", 200, o.Payload)
}

func (o *UpdateUserPasswordUsingPUTOK) GetPayload() *UpdateUserPasswordUsingPUTOKBody {
	return o.Payload
}

func (o *UpdateUserPasswordUsingPUTOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(UpdateUserPasswordUsingPUTOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateUserPasswordUsingPUTBadRequest creates a UpdateUserPasswordUsingPUTBadRequest with default headers values
func NewUpdateUserPasswordUsingPUTBadRequest() *UpdateUserPasswordUsingPUTBadRequest {
	return &UpdateUserPasswordUsingPUTBadRequest{}
}

/*UpdateUserPasswordUsingPUTBadRequest handles this case with default header values.

HTTP request is malformed.
*/
type UpdateUserPasswordUsingPUTBadRequest struct {
	Payload *UpdateUserPasswordUsingPUTBadRequestBody
}

func (o *UpdateUserPasswordUsingPUTBadRequest) Error() string {
	return fmt.Sprintf("[PUT /v1/users/{userId}/authentications/basic][%d] updateUserPasswordUsingPUTBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateUserPasswordUsingPUTBadRequest) GetPayload() *UpdateUserPasswordUsingPUTBadRequestBody {
	return o.Payload
}

func (o *UpdateUserPasswordUsingPUTBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(UpdateUserPasswordUsingPUTBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateUserPasswordUsingPUTNotFound creates a UpdateUserPasswordUsingPUTNotFound with default headers values
func NewUpdateUserPasswordUsingPUTNotFound() *UpdateUserPasswordUsingPUTNotFound {
	return &UpdateUserPasswordUsingPUTNotFound{}
}

/*UpdateUserPasswordUsingPUTNotFound handles this case with default header values.

User not found.
*/
type UpdateUserPasswordUsingPUTNotFound struct {
	Payload *UpdateUserPasswordUsingPUTNotFoundBody
}

func (o *UpdateUserPasswordUsingPUTNotFound) Error() string {
	return fmt.Sprintf("[PUT /v1/users/{userId}/authentications/basic][%d] updateUserPasswordUsingPUTNotFound  %+v", 404, o.Payload)
}

func (o *UpdateUserPasswordUsingPUTNotFound) GetPayload() *UpdateUserPasswordUsingPUTNotFoundBody {
	return o.Payload
}

func (o *UpdateUserPasswordUsingPUTNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(UpdateUserPasswordUsingPUTNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*UpdateUserPasswordUsingPUTBadRequestBody Response
swagger:model UpdateUserPasswordUsingPUTBadRequestBody
*/
type UpdateUserPasswordUsingPUTBadRequestBody struct {

	// message
	// Required: true
	Message *string `json:"message"`
}

// Validate validates this update user password using p u t bad request body
func (o *UpdateUserPasswordUsingPUTBadRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateUserPasswordUsingPUTBadRequestBody) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("updateUserPasswordUsingPUTBadRequest"+"."+"message", "body", o.Message); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateUserPasswordUsingPUTBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateUserPasswordUsingPUTBadRequestBody) UnmarshalBinary(b []byte) error {
	var res UpdateUserPasswordUsingPUTBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdateUserPasswordUsingPUTBody AuthenticationBean
swagger:model UpdateUserPasswordUsingPUTBody
*/
type UpdateUserPasswordUsingPUTBody struct {

	// The password for the user.
	Password string `json:"password,omitempty"`

	// The authentication type. Not required when updating user password.
	// Enum: [basic clientCertificate jwt]
	Type string `json:"type,omitempty"`
}

// Validate validates this update user password using p u t body
func (o *UpdateUserPasswordUsingPUTBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var updateUserPasswordUsingPUTBodyTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["basic","clientCertificate","jwt"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		updateUserPasswordUsingPUTBodyTypeTypePropEnum = append(updateUserPasswordUsingPUTBodyTypeTypePropEnum, v)
	}
}

const (

	// UpdateUserPasswordUsingPUTBodyTypeBasic captures enum value "basic"
	UpdateUserPasswordUsingPUTBodyTypeBasic string = "basic"

	// UpdateUserPasswordUsingPUTBodyTypeClientCertificate captures enum value "clientCertificate"
	UpdateUserPasswordUsingPUTBodyTypeClientCertificate string = "clientCertificate"

	// UpdateUserPasswordUsingPUTBodyTypeJwt captures enum value "jwt"
	UpdateUserPasswordUsingPUTBodyTypeJwt string = "jwt"
)

// prop value enum
func (o *UpdateUserPasswordUsingPUTBody) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, updateUserPasswordUsingPUTBodyTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *UpdateUserPasswordUsingPUTBody) validateType(formats strfmt.Registry) error {

	if swag.IsZero(o.Type) { // not required
		return nil
	}

	// value enum
	if err := o.validateTypeEnum("request"+"."+"type", "body", o.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateUserPasswordUsingPUTBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateUserPasswordUsingPUTBody) UnmarshalBinary(b []byte) error {
	var res UpdateUserPasswordUsingPUTBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdateUserPasswordUsingPUTNotFoundBody Response
swagger:model UpdateUserPasswordUsingPUTNotFoundBody
*/
type UpdateUserPasswordUsingPUTNotFoundBody struct {

	// message
	// Required: true
	Message *string `json:"message"`
}

// Validate validates this update user password using p u t not found body
func (o *UpdateUserPasswordUsingPUTNotFoundBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateUserPasswordUsingPUTNotFoundBody) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("updateUserPasswordUsingPUTNotFound"+"."+"message", "body", o.Message); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateUserPasswordUsingPUTNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateUserPasswordUsingPUTNotFoundBody) UnmarshalBinary(b []byte) error {
	var res UpdateUserPasswordUsingPUTNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdateUserPasswordUsingPUTOKBody Response
swagger:model UpdateUserPasswordUsingPUTOKBody
*/
type UpdateUserPasswordUsingPUTOKBody struct {

	// message
	// Required: true
	Message *string `json:"message"`
}

// Validate validates this update user password using p u t o k body
func (o *UpdateUserPasswordUsingPUTOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateUserPasswordUsingPUTOKBody) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("updateUserPasswordUsingPUTOK"+"."+"message", "body", o.Message); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateUserPasswordUsingPUTOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateUserPasswordUsingPUTOKBody) UnmarshalBinary(b []byte) error {
	var res UpdateUserPasswordUsingPUTOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
