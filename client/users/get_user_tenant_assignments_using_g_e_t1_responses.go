// Code generated by go-swagger; DO NOT EDIT.

package users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GetUserTenantAssignmentsUsingGET1Reader is a Reader for the GetUserTenantAssignmentsUsingGET1 structure.
type GetUserTenantAssignmentsUsingGET1Reader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetUserTenantAssignmentsUsingGET1Reader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetUserTenantAssignmentsUsingGET1OK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetUserTenantAssignmentsUsingGET1BadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetUserTenantAssignmentsUsingGET1NotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetUserTenantAssignmentsUsingGET1OK creates a GetUserTenantAssignmentsUsingGET1OK with default headers values
func NewGetUserTenantAssignmentsUsingGET1OK() *GetUserTenantAssignmentsUsingGET1OK {
	return &GetUserTenantAssignmentsUsingGET1OK{}
}

/*GetUserTenantAssignmentsUsingGET1OK handles this case with default header values.

Successfully returned user tenant assignments.
*/
type GetUserTenantAssignmentsUsingGET1OK struct {
	Payload []*GetUserTenantAssignmentsUsingGET1OKBodyItems0
}

func (o *GetUserTenantAssignmentsUsingGET1OK) Error() string {
	return fmt.Sprintf("[GET /v1/users/{userId}/tenants][%d] getUserTenantAssignmentsUsingGET1OK  %+v", 200, o.Payload)
}

func (o *GetUserTenantAssignmentsUsingGET1OK) GetPayload() []*GetUserTenantAssignmentsUsingGET1OKBodyItems0 {
	return o.Payload
}

func (o *GetUserTenantAssignmentsUsingGET1OK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetUserTenantAssignmentsUsingGET1BadRequest creates a GetUserTenantAssignmentsUsingGET1BadRequest with default headers values
func NewGetUserTenantAssignmentsUsingGET1BadRequest() *GetUserTenantAssignmentsUsingGET1BadRequest {
	return &GetUserTenantAssignmentsUsingGET1BadRequest{}
}

/*GetUserTenantAssignmentsUsingGET1BadRequest handles this case with default header values.

HTTP request is malformed.
*/
type GetUserTenantAssignmentsUsingGET1BadRequest struct {
	Payload *GetUserTenantAssignmentsUsingGET1BadRequestBody
}

func (o *GetUserTenantAssignmentsUsingGET1BadRequest) Error() string {
	return fmt.Sprintf("[GET /v1/users/{userId}/tenants][%d] getUserTenantAssignmentsUsingGET1BadRequest  %+v", 400, o.Payload)
}

func (o *GetUserTenantAssignmentsUsingGET1BadRequest) GetPayload() *GetUserTenantAssignmentsUsingGET1BadRequestBody {
	return o.Payload
}

func (o *GetUserTenantAssignmentsUsingGET1BadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetUserTenantAssignmentsUsingGET1BadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetUserTenantAssignmentsUsingGET1NotFound creates a GetUserTenantAssignmentsUsingGET1NotFound with default headers values
func NewGetUserTenantAssignmentsUsingGET1NotFound() *GetUserTenantAssignmentsUsingGET1NotFound {
	return &GetUserTenantAssignmentsUsingGET1NotFound{}
}

/*GetUserTenantAssignmentsUsingGET1NotFound handles this case with default header values.

User with specified id does not exist.
*/
type GetUserTenantAssignmentsUsingGET1NotFound struct {
	Payload *GetUserTenantAssignmentsUsingGET1NotFoundBody
}

func (o *GetUserTenantAssignmentsUsingGET1NotFound) Error() string {
	return fmt.Sprintf("[GET /v1/users/{userId}/tenants][%d] getUserTenantAssignmentsUsingGET1NotFound  %+v", 404, o.Payload)
}

func (o *GetUserTenantAssignmentsUsingGET1NotFound) GetPayload() *GetUserTenantAssignmentsUsingGET1NotFoundBody {
	return o.Payload
}

func (o *GetUserTenantAssignmentsUsingGET1NotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetUserTenantAssignmentsUsingGET1NotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*GetUserTenantAssignmentsUsingGET1BadRequestBody Response
swagger:model GetUserTenantAssignmentsUsingGET1BadRequestBody
*/
type GetUserTenantAssignmentsUsingGET1BadRequestBody struct {

	// message
	// Required: true
	Message *string `json:"message"`
}

// Validate validates this get user tenant assignments using g e t1 bad request body
func (o *GetUserTenantAssignmentsUsingGET1BadRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetUserTenantAssignmentsUsingGET1BadRequestBody) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("getUserTenantAssignmentsUsingGET1BadRequest"+"."+"message", "body", o.Message); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetUserTenantAssignmentsUsingGET1BadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetUserTenantAssignmentsUsingGET1BadRequestBody) UnmarshalBinary(b []byte) error {
	var res GetUserTenantAssignmentsUsingGET1BadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetUserTenantAssignmentsUsingGET1NotFoundBody Response
swagger:model GetUserTenantAssignmentsUsingGET1NotFoundBody
*/
type GetUserTenantAssignmentsUsingGET1NotFoundBody struct {

	// message
	// Required: true
	Message *string `json:"message"`
}

// Validate validates this get user tenant assignments using g e t1 not found body
func (o *GetUserTenantAssignmentsUsingGET1NotFoundBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetUserTenantAssignmentsUsingGET1NotFoundBody) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("getUserTenantAssignmentsUsingGET1NotFound"+"."+"message", "body", o.Message); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetUserTenantAssignmentsUsingGET1NotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetUserTenantAssignmentsUsingGET1NotFoundBody) UnmarshalBinary(b []byte) error {
	var res GetUserTenantAssignmentsUsingGET1NotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetUserTenantAssignmentsUsingGET1OKBodyItems0 UserTenantAssignmentBean
swagger:model GetUserTenantAssignmentsUsingGET1OKBodyItems0
*/
type GetUserTenantAssignmentsUsingGET1OKBodyItems0 struct {

	// role
	// Enum: [administrator user]
	Role string `json:"role,omitempty"`

	// tenant Id
	TenantID string `json:"tenantId,omitempty"`
}

// Validate validates this get user tenant assignments using g e t1 o k body items0
func (o *GetUserTenantAssignmentsUsingGET1OKBodyItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateRole(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var getUserTenantAssignmentsUsingGET1OKBodyItems0TypeRolePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["administrator","user"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		getUserTenantAssignmentsUsingGET1OKBodyItems0TypeRolePropEnum = append(getUserTenantAssignmentsUsingGET1OKBodyItems0TypeRolePropEnum, v)
	}
}

const (

	// GetUserTenantAssignmentsUsingGET1OKBodyItems0RoleAdministrator captures enum value "administrator"
	GetUserTenantAssignmentsUsingGET1OKBodyItems0RoleAdministrator string = "administrator"

	// GetUserTenantAssignmentsUsingGET1OKBodyItems0RoleUser captures enum value "user"
	GetUserTenantAssignmentsUsingGET1OKBodyItems0RoleUser string = "user"
)

// prop value enum
func (o *GetUserTenantAssignmentsUsingGET1OKBodyItems0) validateRoleEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, getUserTenantAssignmentsUsingGET1OKBodyItems0TypeRolePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *GetUserTenantAssignmentsUsingGET1OKBodyItems0) validateRole(formats strfmt.Registry) error {

	if swag.IsZero(o.Role) { // not required
		return nil
	}

	// value enum
	if err := o.validateRoleEnum("role", "body", o.Role); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetUserTenantAssignmentsUsingGET1OKBodyItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetUserTenantAssignmentsUsingGET1OKBodyItems0) UnmarshalBinary(b []byte) error {
	var res GetUserTenantAssignmentsUsingGET1OKBodyItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
