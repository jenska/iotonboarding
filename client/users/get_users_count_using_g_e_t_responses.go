// Code generated by go-swagger; DO NOT EDIT.

package users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GetUsersCountUsingGETReader is a Reader for the GetUsersCountUsingGET structure.
type GetUsersCountUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetUsersCountUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetUsersCountUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetUsersCountUsingGETBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetUsersCountUsingGETOK creates a GetUsersCountUsingGETOK with default headers values
func NewGetUsersCountUsingGETOK() *GetUsersCountUsingGETOK {
	return &GetUsersCountUsingGETOK{}
}

/*GetUsersCountUsingGETOK handles this case with default header values.

Successfully returned count of users.
*/
type GetUsersCountUsingGETOK struct {
	Payload int64
}

func (o *GetUsersCountUsingGETOK) Error() string {
	return fmt.Sprintf("[GET /v1/users/count][%d] getUsersCountUsingGETOK  %+v", 200, o.Payload)
}

func (o *GetUsersCountUsingGETOK) GetPayload() int64 {
	return o.Payload
}

func (o *GetUsersCountUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetUsersCountUsingGETBadRequest creates a GetUsersCountUsingGETBadRequest with default headers values
func NewGetUsersCountUsingGETBadRequest() *GetUsersCountUsingGETBadRequest {
	return &GetUsersCountUsingGETBadRequest{}
}

/*GetUsersCountUsingGETBadRequest handles this case with default header values.

HTTP request is malformed.
*/
type GetUsersCountUsingGETBadRequest struct {
	Payload *GetUsersCountUsingGETBadRequestBody
}

func (o *GetUsersCountUsingGETBadRequest) Error() string {
	return fmt.Sprintf("[GET /v1/users/count][%d] getUsersCountUsingGETBadRequest  %+v", 400, o.Payload)
}

func (o *GetUsersCountUsingGETBadRequest) GetPayload() *GetUsersCountUsingGETBadRequestBody {
	return o.Payload
}

func (o *GetUsersCountUsingGETBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetUsersCountUsingGETBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*GetUsersCountUsingGETBadRequestBody Response
swagger:model GetUsersCountUsingGETBadRequestBody
*/
type GetUsersCountUsingGETBadRequestBody struct {

	// message
	// Required: true
	Message *string `json:"message"`
}

// Validate validates this get users count using g e t bad request body
func (o *GetUsersCountUsingGETBadRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetUsersCountUsingGETBadRequestBody) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("getUsersCountUsingGETBadRequest"+"."+"message", "body", o.Message); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetUsersCountUsingGETBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetUsersCountUsingGETBadRequestBody) UnmarshalBinary(b []byte) error {
	var res GetUsersCountUsingGETBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
