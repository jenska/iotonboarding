// Code generated by go-swagger; DO NOT EDIT.

package sensor_types

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AddCapabilityReader is a Reader for the AddCapability structure.
type AddCapabilityReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AddCapabilityReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewAddCapabilityOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewAddCapabilityBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewAddCapabilityConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewAddCapabilityOK creates a AddCapabilityOK with default headers values
func NewAddCapabilityOK() *AddCapabilityOK {
	return &AddCapabilityOK{}
}

/*AddCapabilityOK handles this case with default header values.

Successfully added capability.
*/
type AddCapabilityOK struct {
	Payload *AddCapabilityOKBody
}

func (o *AddCapabilityOK) Error() string {
	return fmt.Sprintf("[POST /v1/tenant/{tenantId}/sensorTypes/{sensorTypeId}/capabilities][%d] addCapabilityOK  %+v", 200, o.Payload)
}

func (o *AddCapabilityOK) GetPayload() *AddCapabilityOKBody {
	return o.Payload
}

func (o *AddCapabilityOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(AddCapabilityOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddCapabilityBadRequest creates a AddCapabilityBadRequest with default headers values
func NewAddCapabilityBadRequest() *AddCapabilityBadRequest {
	return &AddCapabilityBadRequest{}
}

/*AddCapabilityBadRequest handles this case with default header values.

HTTP request is malformed.
*/
type AddCapabilityBadRequest struct {
	Payload *AddCapabilityBadRequestBody
}

func (o *AddCapabilityBadRequest) Error() string {
	return fmt.Sprintf("[POST /v1/tenant/{tenantId}/sensorTypes/{sensorTypeId}/capabilities][%d] addCapabilityBadRequest  %+v", 400, o.Payload)
}

func (o *AddCapabilityBadRequest) GetPayload() *AddCapabilityBadRequestBody {
	return o.Payload
}

func (o *AddCapabilityBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(AddCapabilityBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddCapabilityConflict creates a AddCapabilityConflict with default headers values
func NewAddCapabilityConflict() *AddCapabilityConflict {
	return &AddCapabilityConflict{}
}

/*AddCapabilityConflict handles this case with default header values.

Capability already exists.
*/
type AddCapabilityConflict struct {
	Payload *AddCapabilityConflictBody
}

func (o *AddCapabilityConflict) Error() string {
	return fmt.Sprintf("[POST /v1/tenant/{tenantId}/sensorTypes/{sensorTypeId}/capabilities][%d] addCapabilityConflict  %+v", 409, o.Payload)
}

func (o *AddCapabilityConflict) GetPayload() *AddCapabilityConflictBody {
	return o.Payload
}

func (o *AddCapabilityConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(AddCapabilityConflictBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*AddCapabilityBadRequestBody Response
swagger:model AddCapabilityBadRequestBody
*/
type AddCapabilityBadRequestBody struct {

	// message
	// Required: true
	Message *string `json:"message"`
}

// Validate validates this add capability bad request body
func (o *AddCapabilityBadRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *AddCapabilityBadRequestBody) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("addCapabilityBadRequest"+"."+"message", "body", o.Message); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *AddCapabilityBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AddCapabilityBadRequestBody) UnmarshalBinary(b []byte) error {
	var res AddCapabilityBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*AddCapabilityBody CapabilityAssignmentBean
swagger:model AddCapabilityBody
*/
type AddCapabilityBody struct {

	// References the unique identifier of a capability
	// Required: true
	ID *string `json:"id"`

	// The type of the referenced capability
	// Required: true
	// Enum: [measure command]
	Type *string `json:"type"`
}

// Validate validates this add capability body
func (o *AddCapabilityBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *AddCapabilityBody) validateID(formats strfmt.Registry) error {

	if err := validate.Required("request"+"."+"id", "body", o.ID); err != nil {
		return err
	}

	return nil
}

var addCapabilityBodyTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["measure","command"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		addCapabilityBodyTypeTypePropEnum = append(addCapabilityBodyTypeTypePropEnum, v)
	}
}

const (

	// AddCapabilityBodyTypeMeasure captures enum value "measure"
	AddCapabilityBodyTypeMeasure string = "measure"

	// AddCapabilityBodyTypeCommand captures enum value "command"
	AddCapabilityBodyTypeCommand string = "command"
)

// prop value enum
func (o *AddCapabilityBody) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, addCapabilityBodyTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *AddCapabilityBody) validateType(formats strfmt.Registry) error {

	if err := validate.Required("request"+"."+"type", "body", o.Type); err != nil {
		return err
	}

	// value enum
	if err := o.validateTypeEnum("request"+"."+"type", "body", *o.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *AddCapabilityBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AddCapabilityBody) UnmarshalBinary(b []byte) error {
	var res AddCapabilityBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*AddCapabilityConflictBody Response
swagger:model AddCapabilityConflictBody
*/
type AddCapabilityConflictBody struct {

	// message
	// Required: true
	Message *string `json:"message"`
}

// Validate validates this add capability conflict body
func (o *AddCapabilityConflictBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *AddCapabilityConflictBody) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("addCapabilityConflict"+"."+"message", "body", o.Message); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *AddCapabilityConflictBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AddCapabilityConflictBody) UnmarshalBinary(b []byte) error {
	var res AddCapabilityConflictBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*AddCapabilityOKBody CapabilityAssignmentBean
swagger:model AddCapabilityOKBody
*/
type AddCapabilityOKBody struct {

	// References the unique identifier of a capability
	// Required: true
	ID *string `json:"id"`

	// The type of the referenced capability
	// Required: true
	// Enum: [measure command]
	Type *string `json:"type"`
}

// Validate validates this add capability o k body
func (o *AddCapabilityOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *AddCapabilityOKBody) validateID(formats strfmt.Registry) error {

	if err := validate.Required("addCapabilityOK"+"."+"id", "body", o.ID); err != nil {
		return err
	}

	return nil
}

var addCapabilityOKBodyTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["measure","command"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		addCapabilityOKBodyTypeTypePropEnum = append(addCapabilityOKBodyTypeTypePropEnum, v)
	}
}

const (

	// AddCapabilityOKBodyTypeMeasure captures enum value "measure"
	AddCapabilityOKBodyTypeMeasure string = "measure"

	// AddCapabilityOKBodyTypeCommand captures enum value "command"
	AddCapabilityOKBodyTypeCommand string = "command"
)

// prop value enum
func (o *AddCapabilityOKBody) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, addCapabilityOKBodyTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *AddCapabilityOKBody) validateType(formats strfmt.Registry) error {

	if err := validate.Required("addCapabilityOK"+"."+"type", "body", o.Type); err != nil {
		return err
	}

	// value enum
	if err := o.validateTypeEnum("addCapabilityOK"+"."+"type", "body", *o.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *AddCapabilityOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AddCapabilityOKBody) UnmarshalBinary(b []byte) error {
	var res AddCapabilityOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
