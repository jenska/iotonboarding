// Code generated by go-swagger; DO NOT EDIT.

package sensor_types

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GetSensorTypesUsingGETReader is a Reader for the GetSensorTypesUsingGET structure.
type GetSensorTypesUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetSensorTypesUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetSensorTypesUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetSensorTypesUsingGETOK creates a GetSensorTypesUsingGETOK with default headers values
func NewGetSensorTypesUsingGETOK() *GetSensorTypesUsingGETOK {
	return &GetSensorTypesUsingGETOK{}
}

/*GetSensorTypesUsingGETOK handles this case with default header values.

Successfully returned sensor types.
*/
type GetSensorTypesUsingGETOK struct {
	Payload []*GetSensorTypesUsingGETOKBodyItems0
}

func (o *GetSensorTypesUsingGETOK) Error() string {
	return fmt.Sprintf("[GET /v1/tenant/{tenantId}/sensorTypes][%d] getSensorTypesUsingGETOK  %+v", 200, o.Payload)
}

func (o *GetSensorTypesUsingGETOK) GetPayload() []*GetSensorTypesUsingGETOKBodyItems0 {
	return o.Payload
}

func (o *GetSensorTypesUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*GetSensorTypesUsingGETOKBodyItems0 SensorTypeBean
swagger:model GetSensorTypesUsingGETOKBodyItems0
*/
type GetSensorTypesUsingGETOKBodyItems0 struct {

	// The alternate ID of the sensor type. This field is unique across application tenant.
	AlternateID string `json:"alternateId,omitempty"`

	// The array of capability references. A capability is either of type measure or command.
	// Required: true
	Capabilities []*GetSensorTypesUsingGETOKBodyItems0CapabilitiesItems0 `json:"capabilities"`

	// A unique identifier of a sensor type. Is generated by the system and unique across platform tenant. This field is an immutable.
	// Read Only: true
	ID string `json:"id,omitempty"`

	// The name of the sensor type
	// Required: true
	Name *string `json:"name"`
}

// Validate validates this get sensor types using g e t o k body items0
func (o *GetSensorTypesUsingGETOKBodyItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCapabilities(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetSensorTypesUsingGETOKBodyItems0) validateCapabilities(formats strfmt.Registry) error {

	if err := validate.Required("capabilities", "body", o.Capabilities); err != nil {
		return err
	}

	for i := 0; i < len(o.Capabilities); i++ {
		if swag.IsZero(o.Capabilities[i]) { // not required
			continue
		}

		if o.Capabilities[i] != nil {
			if err := o.Capabilities[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("capabilities" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *GetSensorTypesUsingGETOKBodyItems0) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", o.Name); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetSensorTypesUsingGETOKBodyItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetSensorTypesUsingGETOKBodyItems0) UnmarshalBinary(b []byte) error {
	var res GetSensorTypesUsingGETOKBodyItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetSensorTypesUsingGETOKBodyItems0CapabilitiesItems0 CapabilityAssignmentBean
swagger:model GetSensorTypesUsingGETOKBodyItems0CapabilitiesItems0
*/
type GetSensorTypesUsingGETOKBodyItems0CapabilitiesItems0 struct {

	// References the unique identifier of a capability
	// Required: true
	ID *string `json:"id"`

	// The type of the referenced capability
	// Required: true
	// Enum: [measure command]
	Type *string `json:"type"`
}

// Validate validates this get sensor types using g e t o k body items0 capabilities items0
func (o *GetSensorTypesUsingGETOKBodyItems0CapabilitiesItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetSensorTypesUsingGETOKBodyItems0CapabilitiesItems0) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", o.ID); err != nil {
		return err
	}

	return nil
}

var getSensorTypesUsingGETOKBodyItems0CapabilitiesItems0TypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["measure","command"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		getSensorTypesUsingGETOKBodyItems0CapabilitiesItems0TypeTypePropEnum = append(getSensorTypesUsingGETOKBodyItems0CapabilitiesItems0TypeTypePropEnum, v)
	}
}

const (

	// GetSensorTypesUsingGETOKBodyItems0CapabilitiesItems0TypeMeasure captures enum value "measure"
	GetSensorTypesUsingGETOKBodyItems0CapabilitiesItems0TypeMeasure string = "measure"

	// GetSensorTypesUsingGETOKBodyItems0CapabilitiesItems0TypeCommand captures enum value "command"
	GetSensorTypesUsingGETOKBodyItems0CapabilitiesItems0TypeCommand string = "command"
)

// prop value enum
func (o *GetSensorTypesUsingGETOKBodyItems0CapabilitiesItems0) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, getSensorTypesUsingGETOKBodyItems0CapabilitiesItems0TypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *GetSensorTypesUsingGETOKBodyItems0CapabilitiesItems0) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", o.Type); err != nil {
		return err
	}

	// value enum
	if err := o.validateTypeEnum("type", "body", *o.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetSensorTypesUsingGETOKBodyItems0CapabilitiesItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetSensorTypesUsingGETOKBodyItems0CapabilitiesItems0) UnmarshalBinary(b []byte) error {
	var res GetSensorTypesUsingGETOKBodyItems0CapabilitiesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
