// Code generated by go-swagger; DO NOT EDIT.

package sensor_types

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GetSensorTypesCountUsingGETReader is a Reader for the GetSensorTypesCountUsingGET structure.
type GetSensorTypesCountUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetSensorTypesCountUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetSensorTypesCountUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetSensorTypesCountUsingGETBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetSensorTypesCountUsingGETNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetSensorTypesCountUsingGETOK creates a GetSensorTypesCountUsingGETOK with default headers values
func NewGetSensorTypesCountUsingGETOK() *GetSensorTypesCountUsingGETOK {
	return &GetSensorTypesCountUsingGETOK{}
}

/*GetSensorTypesCountUsingGETOK handles this case with default header values.

Successfully returned count of sensor types.
*/
type GetSensorTypesCountUsingGETOK struct {
	Payload int64
}

func (o *GetSensorTypesCountUsingGETOK) Error() string {
	return fmt.Sprintf("[GET /v1/tenant/{tenantId}/sensorTypes/count][%d] getSensorTypesCountUsingGETOK  %+v", 200, o.Payload)
}

func (o *GetSensorTypesCountUsingGETOK) GetPayload() int64 {
	return o.Payload
}

func (o *GetSensorTypesCountUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSensorTypesCountUsingGETBadRequest creates a GetSensorTypesCountUsingGETBadRequest with default headers values
func NewGetSensorTypesCountUsingGETBadRequest() *GetSensorTypesCountUsingGETBadRequest {
	return &GetSensorTypesCountUsingGETBadRequest{}
}

/*GetSensorTypesCountUsingGETBadRequest handles this case with default header values.

HTTP request is malformed.
*/
type GetSensorTypesCountUsingGETBadRequest struct {
	Payload *GetSensorTypesCountUsingGETBadRequestBody
}

func (o *GetSensorTypesCountUsingGETBadRequest) Error() string {
	return fmt.Sprintf("[GET /v1/tenant/{tenantId}/sensorTypes/count][%d] getSensorTypesCountUsingGETBadRequest  %+v", 400, o.Payload)
}

func (o *GetSensorTypesCountUsingGETBadRequest) GetPayload() *GetSensorTypesCountUsingGETBadRequestBody {
	return o.Payload
}

func (o *GetSensorTypesCountUsingGETBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetSensorTypesCountUsingGETBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSensorTypesCountUsingGETNotFound creates a GetSensorTypesCountUsingGETNotFound with default headers values
func NewGetSensorTypesCountUsingGETNotFound() *GetSensorTypesCountUsingGETNotFound {
	return &GetSensorTypesCountUsingGETNotFound{}
}

/*GetSensorTypesCountUsingGETNotFound handles this case with default header values.

Tenant with specified id does not exist.
*/
type GetSensorTypesCountUsingGETNotFound struct {
	Payload *GetSensorTypesCountUsingGETNotFoundBody
}

func (o *GetSensorTypesCountUsingGETNotFound) Error() string {
	return fmt.Sprintf("[GET /v1/tenant/{tenantId}/sensorTypes/count][%d] getSensorTypesCountUsingGETNotFound  %+v", 404, o.Payload)
}

func (o *GetSensorTypesCountUsingGETNotFound) GetPayload() *GetSensorTypesCountUsingGETNotFoundBody {
	return o.Payload
}

func (o *GetSensorTypesCountUsingGETNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetSensorTypesCountUsingGETNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*GetSensorTypesCountUsingGETBadRequestBody Response
swagger:model GetSensorTypesCountUsingGETBadRequestBody
*/
type GetSensorTypesCountUsingGETBadRequestBody struct {

	// message
	// Required: true
	Message *string `json:"message"`
}

// Validate validates this get sensor types count using g e t bad request body
func (o *GetSensorTypesCountUsingGETBadRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetSensorTypesCountUsingGETBadRequestBody) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("getSensorTypesCountUsingGETBadRequest"+"."+"message", "body", o.Message); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetSensorTypesCountUsingGETBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetSensorTypesCountUsingGETBadRequestBody) UnmarshalBinary(b []byte) error {
	var res GetSensorTypesCountUsingGETBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetSensorTypesCountUsingGETNotFoundBody Response
swagger:model GetSensorTypesCountUsingGETNotFoundBody
*/
type GetSensorTypesCountUsingGETNotFoundBody struct {

	// message
	// Required: true
	Message *string `json:"message"`
}

// Validate validates this get sensor types count using g e t not found body
func (o *GetSensorTypesCountUsingGETNotFoundBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetSensorTypesCountUsingGETNotFoundBody) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("getSensorTypesCountUsingGETNotFound"+"."+"message", "body", o.Message); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetSensorTypesCountUsingGETNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetSensorTypesCountUsingGETNotFoundBody) UnmarshalBinary(b []byte) error {
	var res GetSensorTypesCountUsingGETNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
