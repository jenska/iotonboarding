// Code generated by go-swagger; DO NOT EDIT.

package sensor_types

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GetSensorTypeUsingGETReader is a Reader for the GetSensorTypeUsingGET structure.
type GetSensorTypeUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetSensorTypeUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetSensorTypeUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetSensorTypeUsingGETBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetSensorTypeUsingGETNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetSensorTypeUsingGETOK creates a GetSensorTypeUsingGETOK with default headers values
func NewGetSensorTypeUsingGETOK() *GetSensorTypeUsingGETOK {
	return &GetSensorTypeUsingGETOK{}
}

/*GetSensorTypeUsingGETOK handles this case with default header values.

Successfully returned sensor type.
*/
type GetSensorTypeUsingGETOK struct {
	Payload *GetSensorTypeUsingGETOKBody
}

func (o *GetSensorTypeUsingGETOK) Error() string {
	return fmt.Sprintf("[GET /v1/tenant/{tenantId}/sensorTypes/{sensorTypeId}][%d] getSensorTypeUsingGETOK  %+v", 200, o.Payload)
}

func (o *GetSensorTypeUsingGETOK) GetPayload() *GetSensorTypeUsingGETOKBody {
	return o.Payload
}

func (o *GetSensorTypeUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetSensorTypeUsingGETOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSensorTypeUsingGETBadRequest creates a GetSensorTypeUsingGETBadRequest with default headers values
func NewGetSensorTypeUsingGETBadRequest() *GetSensorTypeUsingGETBadRequest {
	return &GetSensorTypeUsingGETBadRequest{}
}

/*GetSensorTypeUsingGETBadRequest handles this case with default header values.

HTTP request is malformed.
*/
type GetSensorTypeUsingGETBadRequest struct {
	Payload *GetSensorTypeUsingGETBadRequestBody
}

func (o *GetSensorTypeUsingGETBadRequest) Error() string {
	return fmt.Sprintf("[GET /v1/tenant/{tenantId}/sensorTypes/{sensorTypeId}][%d] getSensorTypeUsingGETBadRequest  %+v", 400, o.Payload)
}

func (o *GetSensorTypeUsingGETBadRequest) GetPayload() *GetSensorTypeUsingGETBadRequestBody {
	return o.Payload
}

func (o *GetSensorTypeUsingGETBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetSensorTypeUsingGETBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSensorTypeUsingGETNotFound creates a GetSensorTypeUsingGETNotFound with default headers values
func NewGetSensorTypeUsingGETNotFound() *GetSensorTypeUsingGETNotFound {
	return &GetSensorTypeUsingGETNotFound{}
}

/*GetSensorTypeUsingGETNotFound handles this case with default header values.

Sensor type with specified id does not exist.
*/
type GetSensorTypeUsingGETNotFound struct {
	Payload *GetSensorTypeUsingGETNotFoundBody
}

func (o *GetSensorTypeUsingGETNotFound) Error() string {
	return fmt.Sprintf("[GET /v1/tenant/{tenantId}/sensorTypes/{sensorTypeId}][%d] getSensorTypeUsingGETNotFound  %+v", 404, o.Payload)
}

func (o *GetSensorTypeUsingGETNotFound) GetPayload() *GetSensorTypeUsingGETNotFoundBody {
	return o.Payload
}

func (o *GetSensorTypeUsingGETNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetSensorTypeUsingGETNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*GetSensorTypeUsingGETBadRequestBody Response
swagger:model GetSensorTypeUsingGETBadRequestBody
*/
type GetSensorTypeUsingGETBadRequestBody struct {

	// message
	// Required: true
	Message *string `json:"message"`
}

// Validate validates this get sensor type using g e t bad request body
func (o *GetSensorTypeUsingGETBadRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetSensorTypeUsingGETBadRequestBody) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("getSensorTypeUsingGETBadRequest"+"."+"message", "body", o.Message); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetSensorTypeUsingGETBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetSensorTypeUsingGETBadRequestBody) UnmarshalBinary(b []byte) error {
	var res GetSensorTypeUsingGETBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetSensorTypeUsingGETNotFoundBody Response
swagger:model GetSensorTypeUsingGETNotFoundBody
*/
type GetSensorTypeUsingGETNotFoundBody struct {

	// message
	// Required: true
	Message *string `json:"message"`
}

// Validate validates this get sensor type using g e t not found body
func (o *GetSensorTypeUsingGETNotFoundBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetSensorTypeUsingGETNotFoundBody) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("getSensorTypeUsingGETNotFound"+"."+"message", "body", o.Message); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetSensorTypeUsingGETNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetSensorTypeUsingGETNotFoundBody) UnmarshalBinary(b []byte) error {
	var res GetSensorTypeUsingGETNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetSensorTypeUsingGETOKBody SensorTypeBean
swagger:model GetSensorTypeUsingGETOKBody
*/
type GetSensorTypeUsingGETOKBody struct {

	// The alternate ID of the sensor type. This field is unique across application tenant.
	AlternateID string `json:"alternateId,omitempty"`

	// The array of capability references. A capability is either of type measure or command.
	// Required: true
	Capabilities []*GetSensorTypeUsingGETOKBodyCapabilitiesItems0 `json:"capabilities"`

	// A unique identifier of a sensor type. Is generated by the system and unique across platform tenant. This field is an immutable.
	// Read Only: true
	ID string `json:"id,omitempty"`

	// The name of the sensor type
	// Required: true
	Name *string `json:"name"`
}

// Validate validates this get sensor type using g e t o k body
func (o *GetSensorTypeUsingGETOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCapabilities(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetSensorTypeUsingGETOKBody) validateCapabilities(formats strfmt.Registry) error {

	if err := validate.Required("getSensorTypeUsingGETOK"+"."+"capabilities", "body", o.Capabilities); err != nil {
		return err
	}

	for i := 0; i < len(o.Capabilities); i++ {
		if swag.IsZero(o.Capabilities[i]) { // not required
			continue
		}

		if o.Capabilities[i] != nil {
			if err := o.Capabilities[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getSensorTypeUsingGETOK" + "." + "capabilities" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *GetSensorTypeUsingGETOKBody) validateName(formats strfmt.Registry) error {

	if err := validate.Required("getSensorTypeUsingGETOK"+"."+"name", "body", o.Name); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetSensorTypeUsingGETOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetSensorTypeUsingGETOKBody) UnmarshalBinary(b []byte) error {
	var res GetSensorTypeUsingGETOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetSensorTypeUsingGETOKBodyCapabilitiesItems0 CapabilityAssignmentBean
swagger:model GetSensorTypeUsingGETOKBodyCapabilitiesItems0
*/
type GetSensorTypeUsingGETOKBodyCapabilitiesItems0 struct {

	// References the unique identifier of a capability
	// Required: true
	ID *string `json:"id"`

	// The type of the referenced capability
	// Required: true
	// Enum: [measure command]
	Type *string `json:"type"`
}

// Validate validates this get sensor type using g e t o k body capabilities items0
func (o *GetSensorTypeUsingGETOKBodyCapabilitiesItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetSensorTypeUsingGETOKBodyCapabilitiesItems0) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", o.ID); err != nil {
		return err
	}

	return nil
}

var getSensorTypeUsingGETOKBodyCapabilitiesItems0TypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["measure","command"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		getSensorTypeUsingGETOKBodyCapabilitiesItems0TypeTypePropEnum = append(getSensorTypeUsingGETOKBodyCapabilitiesItems0TypeTypePropEnum, v)
	}
}

const (

	// GetSensorTypeUsingGETOKBodyCapabilitiesItems0TypeMeasure captures enum value "measure"
	GetSensorTypeUsingGETOKBodyCapabilitiesItems0TypeMeasure string = "measure"

	// GetSensorTypeUsingGETOKBodyCapabilitiesItems0TypeCommand captures enum value "command"
	GetSensorTypeUsingGETOKBodyCapabilitiesItems0TypeCommand string = "command"
)

// prop value enum
func (o *GetSensorTypeUsingGETOKBodyCapabilitiesItems0) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, getSensorTypeUsingGETOKBodyCapabilitiesItems0TypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *GetSensorTypeUsingGETOKBodyCapabilitiesItems0) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", o.Type); err != nil {
		return err
	}

	// value enum
	if err := o.validateTypeEnum("type", "body", *o.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetSensorTypeUsingGETOKBodyCapabilitiesItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetSensorTypeUsingGETOKBodyCapabilitiesItems0) UnmarshalBinary(b []byte) error {
	var res GetSensorTypeUsingGETOKBodyCapabilitiesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
