// Code generated by go-swagger; DO NOT EDIT.

package sensor_types

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UpdateSensorTypeUsingPUTReader is a Reader for the UpdateSensorTypeUsingPUT structure.
type UpdateSensorTypeUsingPUTReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateSensorTypeUsingPUTReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateSensorTypeUsingPUTOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateSensorTypeUsingPUTBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateSensorTypeUsingPUTNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewUpdateSensorTypeUsingPUTConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUpdateSensorTypeUsingPUTOK creates a UpdateSensorTypeUsingPUTOK with default headers values
func NewUpdateSensorTypeUsingPUTOK() *UpdateSensorTypeUsingPUTOK {
	return &UpdateSensorTypeUsingPUTOK{}
}

/*UpdateSensorTypeUsingPUTOK handles this case with default header values.

Successfully updated sensor type.
*/
type UpdateSensorTypeUsingPUTOK struct {
	Payload *UpdateSensorTypeUsingPUTOKBody
}

func (o *UpdateSensorTypeUsingPUTOK) Error() string {
	return fmt.Sprintf("[PUT /v1/tenant/{tenantId}/sensorTypes/{sensorTypeId}][%d] updateSensorTypeUsingPUTOK  %+v", 200, o.Payload)
}

func (o *UpdateSensorTypeUsingPUTOK) GetPayload() *UpdateSensorTypeUsingPUTOKBody {
	return o.Payload
}

func (o *UpdateSensorTypeUsingPUTOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(UpdateSensorTypeUsingPUTOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateSensorTypeUsingPUTBadRequest creates a UpdateSensorTypeUsingPUTBadRequest with default headers values
func NewUpdateSensorTypeUsingPUTBadRequest() *UpdateSensorTypeUsingPUTBadRequest {
	return &UpdateSensorTypeUsingPUTBadRequest{}
}

/*UpdateSensorTypeUsingPUTBadRequest handles this case with default header values.

HTTP request is malformed.
*/
type UpdateSensorTypeUsingPUTBadRequest struct {
	Payload *UpdateSensorTypeUsingPUTBadRequestBody
}

func (o *UpdateSensorTypeUsingPUTBadRequest) Error() string {
	return fmt.Sprintf("[PUT /v1/tenant/{tenantId}/sensorTypes/{sensorTypeId}][%d] updateSensorTypeUsingPUTBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateSensorTypeUsingPUTBadRequest) GetPayload() *UpdateSensorTypeUsingPUTBadRequestBody {
	return o.Payload
}

func (o *UpdateSensorTypeUsingPUTBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(UpdateSensorTypeUsingPUTBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateSensorTypeUsingPUTNotFound creates a UpdateSensorTypeUsingPUTNotFound with default headers values
func NewUpdateSensorTypeUsingPUTNotFound() *UpdateSensorTypeUsingPUTNotFound {
	return &UpdateSensorTypeUsingPUTNotFound{}
}

/*UpdateSensorTypeUsingPUTNotFound handles this case with default header values.

Sensor type with specified id does not exist.
*/
type UpdateSensorTypeUsingPUTNotFound struct {
	Payload *UpdateSensorTypeUsingPUTNotFoundBody
}

func (o *UpdateSensorTypeUsingPUTNotFound) Error() string {
	return fmt.Sprintf("[PUT /v1/tenant/{tenantId}/sensorTypes/{sensorTypeId}][%d] updateSensorTypeUsingPUTNotFound  %+v", 404, o.Payload)
}

func (o *UpdateSensorTypeUsingPUTNotFound) GetPayload() *UpdateSensorTypeUsingPUTNotFoundBody {
	return o.Payload
}

func (o *UpdateSensorTypeUsingPUTNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(UpdateSensorTypeUsingPUTNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateSensorTypeUsingPUTConflict creates a UpdateSensorTypeUsingPUTConflict with default headers values
func NewUpdateSensorTypeUsingPUTConflict() *UpdateSensorTypeUsingPUTConflict {
	return &UpdateSensorTypeUsingPUTConflict{}
}

/*UpdateSensorTypeUsingPUTConflict handles this case with default header values.

Default sensor type cannot be updated.
*/
type UpdateSensorTypeUsingPUTConflict struct {
	Payload *UpdateSensorTypeUsingPUTConflictBody
}

func (o *UpdateSensorTypeUsingPUTConflict) Error() string {
	return fmt.Sprintf("[PUT /v1/tenant/{tenantId}/sensorTypes/{sensorTypeId}][%d] updateSensorTypeUsingPUTConflict  %+v", 409, o.Payload)
}

func (o *UpdateSensorTypeUsingPUTConflict) GetPayload() *UpdateSensorTypeUsingPUTConflictBody {
	return o.Payload
}

func (o *UpdateSensorTypeUsingPUTConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(UpdateSensorTypeUsingPUTConflictBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*UpdateSensorTypeUsingPUTBadRequestBody Response
swagger:model UpdateSensorTypeUsingPUTBadRequestBody
*/
type UpdateSensorTypeUsingPUTBadRequestBody struct {

	// message
	// Required: true
	Message *string `json:"message"`
}

// Validate validates this update sensor type using p u t bad request body
func (o *UpdateSensorTypeUsingPUTBadRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateSensorTypeUsingPUTBadRequestBody) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("updateSensorTypeUsingPUTBadRequest"+"."+"message", "body", o.Message); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateSensorTypeUsingPUTBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateSensorTypeUsingPUTBadRequestBody) UnmarshalBinary(b []byte) error {
	var res UpdateSensorTypeUsingPUTBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdateSensorTypeUsingPUTBody SensorTypeBean
swagger:model UpdateSensorTypeUsingPUTBody
*/
type UpdateSensorTypeUsingPUTBody struct {

	// The alternate ID of the sensor type. This field is unique across application tenant.
	AlternateID string `json:"alternateId,omitempty"`

	// The array of capability references. A capability is either of type measure or command.
	// Required: true
	Capabilities []*UpdateSensorTypeUsingPUTParamsBodyCapabilitiesItems0 `json:"capabilities"`

	// A unique identifier of a sensor type. Is generated by the system and unique across platform tenant. This field is an immutable.
	// Read Only: true
	ID string `json:"id,omitempty"`

	// The name of the sensor type
	// Required: true
	Name *string `json:"name"`
}

// Validate validates this update sensor type using p u t body
func (o *UpdateSensorTypeUsingPUTBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCapabilities(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateSensorTypeUsingPUTBody) validateCapabilities(formats strfmt.Registry) error {

	if err := validate.Required("request"+"."+"capabilities", "body", o.Capabilities); err != nil {
		return err
	}

	for i := 0; i < len(o.Capabilities); i++ {
		if swag.IsZero(o.Capabilities[i]) { // not required
			continue
		}

		if o.Capabilities[i] != nil {
			if err := o.Capabilities[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("request" + "." + "capabilities" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *UpdateSensorTypeUsingPUTBody) validateName(formats strfmt.Registry) error {

	if err := validate.Required("request"+"."+"name", "body", o.Name); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateSensorTypeUsingPUTBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateSensorTypeUsingPUTBody) UnmarshalBinary(b []byte) error {
	var res UpdateSensorTypeUsingPUTBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdateSensorTypeUsingPUTConflictBody Response
swagger:model UpdateSensorTypeUsingPUTConflictBody
*/
type UpdateSensorTypeUsingPUTConflictBody struct {

	// message
	// Required: true
	Message *string `json:"message"`
}

// Validate validates this update sensor type using p u t conflict body
func (o *UpdateSensorTypeUsingPUTConflictBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateSensorTypeUsingPUTConflictBody) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("updateSensorTypeUsingPUTConflict"+"."+"message", "body", o.Message); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateSensorTypeUsingPUTConflictBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateSensorTypeUsingPUTConflictBody) UnmarshalBinary(b []byte) error {
	var res UpdateSensorTypeUsingPUTConflictBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdateSensorTypeUsingPUTNotFoundBody Response
swagger:model UpdateSensorTypeUsingPUTNotFoundBody
*/
type UpdateSensorTypeUsingPUTNotFoundBody struct {

	// message
	// Required: true
	Message *string `json:"message"`
}

// Validate validates this update sensor type using p u t not found body
func (o *UpdateSensorTypeUsingPUTNotFoundBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateSensorTypeUsingPUTNotFoundBody) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("updateSensorTypeUsingPUTNotFound"+"."+"message", "body", o.Message); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateSensorTypeUsingPUTNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateSensorTypeUsingPUTNotFoundBody) UnmarshalBinary(b []byte) error {
	var res UpdateSensorTypeUsingPUTNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdateSensorTypeUsingPUTOKBody SensorTypeBean
swagger:model UpdateSensorTypeUsingPUTOKBody
*/
type UpdateSensorTypeUsingPUTOKBody struct {

	// The alternate ID of the sensor type. This field is unique across application tenant.
	AlternateID string `json:"alternateId,omitempty"`

	// The array of capability references. A capability is either of type measure or command.
	// Required: true
	Capabilities []*UpdateSensorTypeUsingPUTOKBodyCapabilitiesItems0 `json:"capabilities"`

	// A unique identifier of a sensor type. Is generated by the system and unique across platform tenant. This field is an immutable.
	// Read Only: true
	ID string `json:"id,omitempty"`

	// The name of the sensor type
	// Required: true
	Name *string `json:"name"`
}

// Validate validates this update sensor type using p u t o k body
func (o *UpdateSensorTypeUsingPUTOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCapabilities(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateSensorTypeUsingPUTOKBody) validateCapabilities(formats strfmt.Registry) error {

	if err := validate.Required("updateSensorTypeUsingPUTOK"+"."+"capabilities", "body", o.Capabilities); err != nil {
		return err
	}

	for i := 0; i < len(o.Capabilities); i++ {
		if swag.IsZero(o.Capabilities[i]) { // not required
			continue
		}

		if o.Capabilities[i] != nil {
			if err := o.Capabilities[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("updateSensorTypeUsingPUTOK" + "." + "capabilities" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *UpdateSensorTypeUsingPUTOKBody) validateName(formats strfmt.Registry) error {

	if err := validate.Required("updateSensorTypeUsingPUTOK"+"."+"name", "body", o.Name); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateSensorTypeUsingPUTOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateSensorTypeUsingPUTOKBody) UnmarshalBinary(b []byte) error {
	var res UpdateSensorTypeUsingPUTOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdateSensorTypeUsingPUTOKBodyCapabilitiesItems0 CapabilityAssignmentBean
swagger:model UpdateSensorTypeUsingPUTOKBodyCapabilitiesItems0
*/
type UpdateSensorTypeUsingPUTOKBodyCapabilitiesItems0 struct {

	// References the unique identifier of a capability
	// Required: true
	ID *string `json:"id"`

	// The type of the referenced capability
	// Required: true
	// Enum: [measure command]
	Type *string `json:"type"`
}

// Validate validates this update sensor type using p u t o k body capabilities items0
func (o *UpdateSensorTypeUsingPUTOKBodyCapabilitiesItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateSensorTypeUsingPUTOKBodyCapabilitiesItems0) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", o.ID); err != nil {
		return err
	}

	return nil
}

var updateSensorTypeUsingPUTOKBodyCapabilitiesItems0TypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["measure","command"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		updateSensorTypeUsingPUTOKBodyCapabilitiesItems0TypeTypePropEnum = append(updateSensorTypeUsingPUTOKBodyCapabilitiesItems0TypeTypePropEnum, v)
	}
}

const (

	// UpdateSensorTypeUsingPUTOKBodyCapabilitiesItems0TypeMeasure captures enum value "measure"
	UpdateSensorTypeUsingPUTOKBodyCapabilitiesItems0TypeMeasure string = "measure"

	// UpdateSensorTypeUsingPUTOKBodyCapabilitiesItems0TypeCommand captures enum value "command"
	UpdateSensorTypeUsingPUTOKBodyCapabilitiesItems0TypeCommand string = "command"
)

// prop value enum
func (o *UpdateSensorTypeUsingPUTOKBodyCapabilitiesItems0) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, updateSensorTypeUsingPUTOKBodyCapabilitiesItems0TypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *UpdateSensorTypeUsingPUTOKBodyCapabilitiesItems0) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", o.Type); err != nil {
		return err
	}

	// value enum
	if err := o.validateTypeEnum("type", "body", *o.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateSensorTypeUsingPUTOKBodyCapabilitiesItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateSensorTypeUsingPUTOKBodyCapabilitiesItems0) UnmarshalBinary(b []byte) error {
	var res UpdateSensorTypeUsingPUTOKBodyCapabilitiesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdateSensorTypeUsingPUTParamsBodyCapabilitiesItems0 CapabilityAssignmentBean
swagger:model UpdateSensorTypeUsingPUTParamsBodyCapabilitiesItems0
*/
type UpdateSensorTypeUsingPUTParamsBodyCapabilitiesItems0 struct {

	// References the unique identifier of a capability
	// Required: true
	ID *string `json:"id"`

	// The type of the referenced capability
	// Required: true
	// Enum: [measure command]
	Type *string `json:"type"`
}

// Validate validates this update sensor type using p u t params body capabilities items0
func (o *UpdateSensorTypeUsingPUTParamsBodyCapabilitiesItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateSensorTypeUsingPUTParamsBodyCapabilitiesItems0) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", o.ID); err != nil {
		return err
	}

	return nil
}

var updateSensorTypeUsingPUTParamsBodyCapabilitiesItems0TypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["measure","command"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		updateSensorTypeUsingPUTParamsBodyCapabilitiesItems0TypeTypePropEnum = append(updateSensorTypeUsingPUTParamsBodyCapabilitiesItems0TypeTypePropEnum, v)
	}
}

const (

	// UpdateSensorTypeUsingPUTParamsBodyCapabilitiesItems0TypeMeasure captures enum value "measure"
	UpdateSensorTypeUsingPUTParamsBodyCapabilitiesItems0TypeMeasure string = "measure"

	// UpdateSensorTypeUsingPUTParamsBodyCapabilitiesItems0TypeCommand captures enum value "command"
	UpdateSensorTypeUsingPUTParamsBodyCapabilitiesItems0TypeCommand string = "command"
)

// prop value enum
func (o *UpdateSensorTypeUsingPUTParamsBodyCapabilitiesItems0) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, updateSensorTypeUsingPUTParamsBodyCapabilitiesItems0TypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *UpdateSensorTypeUsingPUTParamsBodyCapabilitiesItems0) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", o.Type); err != nil {
		return err
	}

	// value enum
	if err := o.validateTypeEnum("type", "body", *o.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateSensorTypeUsingPUTParamsBodyCapabilitiesItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateSensorTypeUsingPUTParamsBodyCapabilitiesItems0) UnmarshalBinary(b []byte) error {
	var res UpdateSensorTypeUsingPUTParamsBodyCapabilitiesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
