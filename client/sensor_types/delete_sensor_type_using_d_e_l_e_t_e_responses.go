// Code generated by go-swagger; DO NOT EDIT.

package sensor_types

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DeleteSensorTypeUsingDELETEReader is a Reader for the DeleteSensorTypeUsingDELETE structure.
type DeleteSensorTypeUsingDELETEReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteSensorTypeUsingDELETEReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDeleteSensorTypeUsingDELETEOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewDeleteSensorTypeUsingDELETEBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDeleteSensorTypeUsingDELETENotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewDeleteSensorTypeUsingDELETEConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewDeleteSensorTypeUsingDELETEOK creates a DeleteSensorTypeUsingDELETEOK with default headers values
func NewDeleteSensorTypeUsingDELETEOK() *DeleteSensorTypeUsingDELETEOK {
	return &DeleteSensorTypeUsingDELETEOK{}
}

/*DeleteSensorTypeUsingDELETEOK handles this case with default header values.

Successfully deleted sensor type.
*/
type DeleteSensorTypeUsingDELETEOK struct {
	Payload *DeleteSensorTypeUsingDELETEOKBody
}

func (o *DeleteSensorTypeUsingDELETEOK) Error() string {
	return fmt.Sprintf("[DELETE /v1/tenant/{tenantId}/sensorTypes/{sensorTypeId}][%d] deleteSensorTypeUsingDELETEOK  %+v", 200, o.Payload)
}

func (o *DeleteSensorTypeUsingDELETEOK) GetPayload() *DeleteSensorTypeUsingDELETEOKBody {
	return o.Payload
}

func (o *DeleteSensorTypeUsingDELETEOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(DeleteSensorTypeUsingDELETEOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteSensorTypeUsingDELETEBadRequest creates a DeleteSensorTypeUsingDELETEBadRequest with default headers values
func NewDeleteSensorTypeUsingDELETEBadRequest() *DeleteSensorTypeUsingDELETEBadRequest {
	return &DeleteSensorTypeUsingDELETEBadRequest{}
}

/*DeleteSensorTypeUsingDELETEBadRequest handles this case with default header values.

HTTP request is malformed.
*/
type DeleteSensorTypeUsingDELETEBadRequest struct {
	Payload *DeleteSensorTypeUsingDELETEBadRequestBody
}

func (o *DeleteSensorTypeUsingDELETEBadRequest) Error() string {
	return fmt.Sprintf("[DELETE /v1/tenant/{tenantId}/sensorTypes/{sensorTypeId}][%d] deleteSensorTypeUsingDELETEBadRequest  %+v", 400, o.Payload)
}

func (o *DeleteSensorTypeUsingDELETEBadRequest) GetPayload() *DeleteSensorTypeUsingDELETEBadRequestBody {
	return o.Payload
}

func (o *DeleteSensorTypeUsingDELETEBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(DeleteSensorTypeUsingDELETEBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteSensorTypeUsingDELETENotFound creates a DeleteSensorTypeUsingDELETENotFound with default headers values
func NewDeleteSensorTypeUsingDELETENotFound() *DeleteSensorTypeUsingDELETENotFound {
	return &DeleteSensorTypeUsingDELETENotFound{}
}

/*DeleteSensorTypeUsingDELETENotFound handles this case with default header values.

Sensor type with specified id does not exist.
*/
type DeleteSensorTypeUsingDELETENotFound struct {
	Payload *DeleteSensorTypeUsingDELETENotFoundBody
}

func (o *DeleteSensorTypeUsingDELETENotFound) Error() string {
	return fmt.Sprintf("[DELETE /v1/tenant/{tenantId}/sensorTypes/{sensorTypeId}][%d] deleteSensorTypeUsingDELETENotFound  %+v", 404, o.Payload)
}

func (o *DeleteSensorTypeUsingDELETENotFound) GetPayload() *DeleteSensorTypeUsingDELETENotFoundBody {
	return o.Payload
}

func (o *DeleteSensorTypeUsingDELETENotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(DeleteSensorTypeUsingDELETENotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteSensorTypeUsingDELETEConflict creates a DeleteSensorTypeUsingDELETEConflict with default headers values
func NewDeleteSensorTypeUsingDELETEConflict() *DeleteSensorTypeUsingDELETEConflict {
	return &DeleteSensorTypeUsingDELETEConflict{}
}

/*DeleteSensorTypeUsingDELETEConflict handles this case with default header values.

In-use sensor type cannot be deleted.
*/
type DeleteSensorTypeUsingDELETEConflict struct {
	Payload *DeleteSensorTypeUsingDELETEConflictBody
}

func (o *DeleteSensorTypeUsingDELETEConflict) Error() string {
	return fmt.Sprintf("[DELETE /v1/tenant/{tenantId}/sensorTypes/{sensorTypeId}][%d] deleteSensorTypeUsingDELETEConflict  %+v", 409, o.Payload)
}

func (o *DeleteSensorTypeUsingDELETEConflict) GetPayload() *DeleteSensorTypeUsingDELETEConflictBody {
	return o.Payload
}

func (o *DeleteSensorTypeUsingDELETEConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(DeleteSensorTypeUsingDELETEConflictBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*DeleteSensorTypeUsingDELETEBadRequestBody Response
swagger:model DeleteSensorTypeUsingDELETEBadRequestBody
*/
type DeleteSensorTypeUsingDELETEBadRequestBody struct {

	// message
	// Required: true
	Message *string `json:"message"`
}

// Validate validates this delete sensor type using d e l e t e bad request body
func (o *DeleteSensorTypeUsingDELETEBadRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DeleteSensorTypeUsingDELETEBadRequestBody) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("deleteSensorTypeUsingDELETEBadRequest"+"."+"message", "body", o.Message); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *DeleteSensorTypeUsingDELETEBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DeleteSensorTypeUsingDELETEBadRequestBody) UnmarshalBinary(b []byte) error {
	var res DeleteSensorTypeUsingDELETEBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*DeleteSensorTypeUsingDELETEConflictBody Response
swagger:model DeleteSensorTypeUsingDELETEConflictBody
*/
type DeleteSensorTypeUsingDELETEConflictBody struct {

	// message
	// Required: true
	Message *string `json:"message"`
}

// Validate validates this delete sensor type using d e l e t e conflict body
func (o *DeleteSensorTypeUsingDELETEConflictBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DeleteSensorTypeUsingDELETEConflictBody) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("deleteSensorTypeUsingDELETEConflict"+"."+"message", "body", o.Message); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *DeleteSensorTypeUsingDELETEConflictBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DeleteSensorTypeUsingDELETEConflictBody) UnmarshalBinary(b []byte) error {
	var res DeleteSensorTypeUsingDELETEConflictBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*DeleteSensorTypeUsingDELETENotFoundBody Response
swagger:model DeleteSensorTypeUsingDELETENotFoundBody
*/
type DeleteSensorTypeUsingDELETENotFoundBody struct {

	// message
	// Required: true
	Message *string `json:"message"`
}

// Validate validates this delete sensor type using d e l e t e not found body
func (o *DeleteSensorTypeUsingDELETENotFoundBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DeleteSensorTypeUsingDELETENotFoundBody) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("deleteSensorTypeUsingDELETENotFound"+"."+"message", "body", o.Message); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *DeleteSensorTypeUsingDELETENotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DeleteSensorTypeUsingDELETENotFoundBody) UnmarshalBinary(b []byte) error {
	var res DeleteSensorTypeUsingDELETENotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*DeleteSensorTypeUsingDELETEOKBody Response
swagger:model DeleteSensorTypeUsingDELETEOKBody
*/
type DeleteSensorTypeUsingDELETEOKBody struct {

	// message
	// Required: true
	Message *string `json:"message"`
}

// Validate validates this delete sensor type using d e l e t e o k body
func (o *DeleteSensorTypeUsingDELETEOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DeleteSensorTypeUsingDELETEOKBody) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("deleteSensorTypeUsingDELETEOK"+"."+"message", "body", o.Message); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *DeleteSensorTypeUsingDELETEOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DeleteSensorTypeUsingDELETEOKBody) UnmarshalBinary(b []byte) error {
	var res DeleteSensorTypeUsingDELETEOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
