// Code generated by go-swagger; DO NOT EDIT.

package sensor_types

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateSensorTypeUsingPOSTReader is a Reader for the CreateSensorTypeUsingPOST structure.
type CreateSensorTypeUsingPOSTReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateSensorTypeUsingPOSTReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCreateSensorTypeUsingPOSTOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCreateSensorTypeUsingPOSTBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewCreateSensorTypeUsingPOSTConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewCreateSensorTypeUsingPOSTOK creates a CreateSensorTypeUsingPOSTOK with default headers values
func NewCreateSensorTypeUsingPOSTOK() *CreateSensorTypeUsingPOSTOK {
	return &CreateSensorTypeUsingPOSTOK{}
}

/*CreateSensorTypeUsingPOSTOK handles this case with default header values.

Successfully created sensor type.
*/
type CreateSensorTypeUsingPOSTOK struct {
	Payload *CreateSensorTypeUsingPOSTOKBody
}

func (o *CreateSensorTypeUsingPOSTOK) Error() string {
	return fmt.Sprintf("[POST /v1/tenant/{tenantId}/sensorTypes][%d] createSensorTypeUsingPOSTOK  %+v", 200, o.Payload)
}

func (o *CreateSensorTypeUsingPOSTOK) GetPayload() *CreateSensorTypeUsingPOSTOKBody {
	return o.Payload
}

func (o *CreateSensorTypeUsingPOSTOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(CreateSensorTypeUsingPOSTOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateSensorTypeUsingPOSTBadRequest creates a CreateSensorTypeUsingPOSTBadRequest with default headers values
func NewCreateSensorTypeUsingPOSTBadRequest() *CreateSensorTypeUsingPOSTBadRequest {
	return &CreateSensorTypeUsingPOSTBadRequest{}
}

/*CreateSensorTypeUsingPOSTBadRequest handles this case with default header values.

HTTP request is malformed.
*/
type CreateSensorTypeUsingPOSTBadRequest struct {
	Payload *CreateSensorTypeUsingPOSTBadRequestBody
}

func (o *CreateSensorTypeUsingPOSTBadRequest) Error() string {
	return fmt.Sprintf("[POST /v1/tenant/{tenantId}/sensorTypes][%d] createSensorTypeUsingPOSTBadRequest  %+v", 400, o.Payload)
}

func (o *CreateSensorTypeUsingPOSTBadRequest) GetPayload() *CreateSensorTypeUsingPOSTBadRequestBody {
	return o.Payload
}

func (o *CreateSensorTypeUsingPOSTBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(CreateSensorTypeUsingPOSTBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateSensorTypeUsingPOSTConflict creates a CreateSensorTypeUsingPOSTConflict with default headers values
func NewCreateSensorTypeUsingPOSTConflict() *CreateSensorTypeUsingPOSTConflict {
	return &CreateSensorTypeUsingPOSTConflict{}
}

/*CreateSensorTypeUsingPOSTConflict handles this case with default header values.

Sensor type cannot be created with the specified capability.
*/
type CreateSensorTypeUsingPOSTConflict struct {
	Payload *CreateSensorTypeUsingPOSTConflictBody
}

func (o *CreateSensorTypeUsingPOSTConflict) Error() string {
	return fmt.Sprintf("[POST /v1/tenant/{tenantId}/sensorTypes][%d] createSensorTypeUsingPOSTConflict  %+v", 409, o.Payload)
}

func (o *CreateSensorTypeUsingPOSTConflict) GetPayload() *CreateSensorTypeUsingPOSTConflictBody {
	return o.Payload
}

func (o *CreateSensorTypeUsingPOSTConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(CreateSensorTypeUsingPOSTConflictBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*CreateSensorTypeUsingPOSTBadRequestBody Response
swagger:model CreateSensorTypeUsingPOSTBadRequestBody
*/
type CreateSensorTypeUsingPOSTBadRequestBody struct {

	// message
	// Required: true
	Message *string `json:"message"`
}

// Validate validates this create sensor type using p o s t bad request body
func (o *CreateSensorTypeUsingPOSTBadRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateSensorTypeUsingPOSTBadRequestBody) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("createSensorTypeUsingPOSTBadRequest"+"."+"message", "body", o.Message); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateSensorTypeUsingPOSTBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateSensorTypeUsingPOSTBadRequestBody) UnmarshalBinary(b []byte) error {
	var res CreateSensorTypeUsingPOSTBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*CreateSensorTypeUsingPOSTBody SensorTypeBean
swagger:model CreateSensorTypeUsingPOSTBody
*/
type CreateSensorTypeUsingPOSTBody struct {

	// The alternate ID of the sensor type. This field is unique across application tenant.
	AlternateID string `json:"alternateId,omitempty"`

	// The array of capability references. A capability is either of type measure or command.
	// Required: true
	Capabilities []*CreateSensorTypeUsingPOSTParamsBodyCapabilitiesItems0 `json:"capabilities"`

	// A unique identifier of a sensor type. Is generated by the system and unique across platform tenant. This field is an immutable.
	// Read Only: true
	ID string `json:"id,omitempty"`

	// The name of the sensor type
	// Required: true
	Name *string `json:"name"`
}

// Validate validates this create sensor type using p o s t body
func (o *CreateSensorTypeUsingPOSTBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCapabilities(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateSensorTypeUsingPOSTBody) validateCapabilities(formats strfmt.Registry) error {

	if err := validate.Required("request"+"."+"capabilities", "body", o.Capabilities); err != nil {
		return err
	}

	for i := 0; i < len(o.Capabilities); i++ {
		if swag.IsZero(o.Capabilities[i]) { // not required
			continue
		}

		if o.Capabilities[i] != nil {
			if err := o.Capabilities[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("request" + "." + "capabilities" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *CreateSensorTypeUsingPOSTBody) validateName(formats strfmt.Registry) error {

	if err := validate.Required("request"+"."+"name", "body", o.Name); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateSensorTypeUsingPOSTBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateSensorTypeUsingPOSTBody) UnmarshalBinary(b []byte) error {
	var res CreateSensorTypeUsingPOSTBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*CreateSensorTypeUsingPOSTConflictBody Response
swagger:model CreateSensorTypeUsingPOSTConflictBody
*/
type CreateSensorTypeUsingPOSTConflictBody struct {

	// message
	// Required: true
	Message *string `json:"message"`
}

// Validate validates this create sensor type using p o s t conflict body
func (o *CreateSensorTypeUsingPOSTConflictBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateSensorTypeUsingPOSTConflictBody) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("createSensorTypeUsingPOSTConflict"+"."+"message", "body", o.Message); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateSensorTypeUsingPOSTConflictBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateSensorTypeUsingPOSTConflictBody) UnmarshalBinary(b []byte) error {
	var res CreateSensorTypeUsingPOSTConflictBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*CreateSensorTypeUsingPOSTOKBody SensorTypeBean
swagger:model CreateSensorTypeUsingPOSTOKBody
*/
type CreateSensorTypeUsingPOSTOKBody struct {

	// The alternate ID of the sensor type. This field is unique across application tenant.
	AlternateID string `json:"alternateId,omitempty"`

	// The array of capability references. A capability is either of type measure or command.
	// Required: true
	Capabilities []*CreateSensorTypeUsingPOSTOKBodyCapabilitiesItems0 `json:"capabilities"`

	// A unique identifier of a sensor type. Is generated by the system and unique across platform tenant. This field is an immutable.
	// Read Only: true
	ID string `json:"id,omitempty"`

	// The name of the sensor type
	// Required: true
	Name *string `json:"name"`
}

// Validate validates this create sensor type using p o s t o k body
func (o *CreateSensorTypeUsingPOSTOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCapabilities(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateSensorTypeUsingPOSTOKBody) validateCapabilities(formats strfmt.Registry) error {

	if err := validate.Required("createSensorTypeUsingPOSTOK"+"."+"capabilities", "body", o.Capabilities); err != nil {
		return err
	}

	for i := 0; i < len(o.Capabilities); i++ {
		if swag.IsZero(o.Capabilities[i]) { // not required
			continue
		}

		if o.Capabilities[i] != nil {
			if err := o.Capabilities[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("createSensorTypeUsingPOSTOK" + "." + "capabilities" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *CreateSensorTypeUsingPOSTOKBody) validateName(formats strfmt.Registry) error {

	if err := validate.Required("createSensorTypeUsingPOSTOK"+"."+"name", "body", o.Name); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateSensorTypeUsingPOSTOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateSensorTypeUsingPOSTOKBody) UnmarshalBinary(b []byte) error {
	var res CreateSensorTypeUsingPOSTOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*CreateSensorTypeUsingPOSTOKBodyCapabilitiesItems0 CapabilityAssignmentBean
swagger:model CreateSensorTypeUsingPOSTOKBodyCapabilitiesItems0
*/
type CreateSensorTypeUsingPOSTOKBodyCapabilitiesItems0 struct {

	// References the unique identifier of a capability
	// Required: true
	ID *string `json:"id"`

	// The type of the referenced capability
	// Required: true
	// Enum: [measure command]
	Type *string `json:"type"`
}

// Validate validates this create sensor type using p o s t o k body capabilities items0
func (o *CreateSensorTypeUsingPOSTOKBodyCapabilitiesItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateSensorTypeUsingPOSTOKBodyCapabilitiesItems0) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", o.ID); err != nil {
		return err
	}

	return nil
}

var createSensorTypeUsingPOSTOKBodyCapabilitiesItems0TypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["measure","command"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		createSensorTypeUsingPOSTOKBodyCapabilitiesItems0TypeTypePropEnum = append(createSensorTypeUsingPOSTOKBodyCapabilitiesItems0TypeTypePropEnum, v)
	}
}

const (

	// CreateSensorTypeUsingPOSTOKBodyCapabilitiesItems0TypeMeasure captures enum value "measure"
	CreateSensorTypeUsingPOSTOKBodyCapabilitiesItems0TypeMeasure string = "measure"

	// CreateSensorTypeUsingPOSTOKBodyCapabilitiesItems0TypeCommand captures enum value "command"
	CreateSensorTypeUsingPOSTOKBodyCapabilitiesItems0TypeCommand string = "command"
)

// prop value enum
func (o *CreateSensorTypeUsingPOSTOKBodyCapabilitiesItems0) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, createSensorTypeUsingPOSTOKBodyCapabilitiesItems0TypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *CreateSensorTypeUsingPOSTOKBodyCapabilitiesItems0) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", o.Type); err != nil {
		return err
	}

	// value enum
	if err := o.validateTypeEnum("type", "body", *o.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateSensorTypeUsingPOSTOKBodyCapabilitiesItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateSensorTypeUsingPOSTOKBodyCapabilitiesItems0) UnmarshalBinary(b []byte) error {
	var res CreateSensorTypeUsingPOSTOKBodyCapabilitiesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*CreateSensorTypeUsingPOSTParamsBodyCapabilitiesItems0 CapabilityAssignmentBean
swagger:model CreateSensorTypeUsingPOSTParamsBodyCapabilitiesItems0
*/
type CreateSensorTypeUsingPOSTParamsBodyCapabilitiesItems0 struct {

	// References the unique identifier of a capability
	// Required: true
	ID *string `json:"id"`

	// The type of the referenced capability
	// Required: true
	// Enum: [measure command]
	Type *string `json:"type"`
}

// Validate validates this create sensor type using p o s t params body capabilities items0
func (o *CreateSensorTypeUsingPOSTParamsBodyCapabilitiesItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateSensorTypeUsingPOSTParamsBodyCapabilitiesItems0) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", o.ID); err != nil {
		return err
	}

	return nil
}

var createSensorTypeUsingPOSTParamsBodyCapabilitiesItems0TypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["measure","command"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		createSensorTypeUsingPOSTParamsBodyCapabilitiesItems0TypeTypePropEnum = append(createSensorTypeUsingPOSTParamsBodyCapabilitiesItems0TypeTypePropEnum, v)
	}
}

const (

	// CreateSensorTypeUsingPOSTParamsBodyCapabilitiesItems0TypeMeasure captures enum value "measure"
	CreateSensorTypeUsingPOSTParamsBodyCapabilitiesItems0TypeMeasure string = "measure"

	// CreateSensorTypeUsingPOSTParamsBodyCapabilitiesItems0TypeCommand captures enum value "command"
	CreateSensorTypeUsingPOSTParamsBodyCapabilitiesItems0TypeCommand string = "command"
)

// prop value enum
func (o *CreateSensorTypeUsingPOSTParamsBodyCapabilitiesItems0) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, createSensorTypeUsingPOSTParamsBodyCapabilitiesItems0TypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *CreateSensorTypeUsingPOSTParamsBodyCapabilitiesItems0) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", o.Type); err != nil {
		return err
	}

	// value enum
	if err := o.validateTypeEnum("type", "body", *o.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateSensorTypeUsingPOSTParamsBodyCapabilitiesItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateSensorTypeUsingPOSTParamsBodyCapabilitiesItems0) UnmarshalBinary(b []byte) error {
	var res CreateSensorTypeUsingPOSTParamsBodyCapabilitiesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
