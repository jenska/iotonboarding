// Code generated by go-swagger; DO NOT EDIT.

package sensor_types

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewUpdateCapabilityParams creates a new UpdateCapabilityParams object
// with the default values initialized.
func NewUpdateCapabilityParams() *UpdateCapabilityParams {
	var ()
	return &UpdateCapabilityParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewUpdateCapabilityParamsWithTimeout creates a new UpdateCapabilityParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewUpdateCapabilityParamsWithTimeout(timeout time.Duration) *UpdateCapabilityParams {
	var ()
	return &UpdateCapabilityParams{

		timeout: timeout,
	}
}

// NewUpdateCapabilityParamsWithContext creates a new UpdateCapabilityParams object
// with the default values initialized, and the ability to set a context for a request
func NewUpdateCapabilityParamsWithContext(ctx context.Context) *UpdateCapabilityParams {
	var ()
	return &UpdateCapabilityParams{

		Context: ctx,
	}
}

// NewUpdateCapabilityParamsWithHTTPClient creates a new UpdateCapabilityParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewUpdateCapabilityParamsWithHTTPClient(client *http.Client) *UpdateCapabilityParams {
	var ()
	return &UpdateCapabilityParams{
		HTTPClient: client,
	}
}

/*UpdateCapabilityParams contains all the parameters to send to the API endpoint
for the update capability operation typically these are written to a http.Request
*/
type UpdateCapabilityParams struct {

	/*CapabilityID
	  Unique identifier of a capability.

	*/
	CapabilityID string
	/*Request
	  Specification of the capability that will be updated.

	*/
	Request UpdateCapabilityBody
	/*SensorTypeID
	  Unique identifier of a sensorType.

	*/
	SensorTypeID string
	/*TenantID
	  Unique identifier of a tenant.

	*/
	TenantID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the update capability params
func (o *UpdateCapabilityParams) WithTimeout(timeout time.Duration) *UpdateCapabilityParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the update capability params
func (o *UpdateCapabilityParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the update capability params
func (o *UpdateCapabilityParams) WithContext(ctx context.Context) *UpdateCapabilityParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the update capability params
func (o *UpdateCapabilityParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the update capability params
func (o *UpdateCapabilityParams) WithHTTPClient(client *http.Client) *UpdateCapabilityParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the update capability params
func (o *UpdateCapabilityParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCapabilityID adds the capabilityID to the update capability params
func (o *UpdateCapabilityParams) WithCapabilityID(capabilityID string) *UpdateCapabilityParams {
	o.SetCapabilityID(capabilityID)
	return o
}

// SetCapabilityID adds the capabilityId to the update capability params
func (o *UpdateCapabilityParams) SetCapabilityID(capabilityID string) {
	o.CapabilityID = capabilityID
}

// WithRequest adds the request to the update capability params
func (o *UpdateCapabilityParams) WithRequest(request UpdateCapabilityBody) *UpdateCapabilityParams {
	o.SetRequest(request)
	return o
}

// SetRequest adds the request to the update capability params
func (o *UpdateCapabilityParams) SetRequest(request UpdateCapabilityBody) {
	o.Request = request
}

// WithSensorTypeID adds the sensorTypeID to the update capability params
func (o *UpdateCapabilityParams) WithSensorTypeID(sensorTypeID string) *UpdateCapabilityParams {
	o.SetSensorTypeID(sensorTypeID)
	return o
}

// SetSensorTypeID adds the sensorTypeId to the update capability params
func (o *UpdateCapabilityParams) SetSensorTypeID(sensorTypeID string) {
	o.SensorTypeID = sensorTypeID
}

// WithTenantID adds the tenantID to the update capability params
func (o *UpdateCapabilityParams) WithTenantID(tenantID string) *UpdateCapabilityParams {
	o.SetTenantID(tenantID)
	return o
}

// SetTenantID adds the tenantId to the update capability params
func (o *UpdateCapabilityParams) SetTenantID(tenantID string) {
	o.TenantID = tenantID
}

// WriteToRequest writes these params to a swagger request
func (o *UpdateCapabilityParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param capabilityId
	if err := r.SetPathParam("capabilityId", o.CapabilityID); err != nil {
		return err
	}

	if err := r.SetBodyParam(o.Request); err != nil {
		return err
	}

	// path param sensorTypeId
	if err := r.SetPathParam("sensorTypeId", o.SensorTypeID); err != nil {
		return err
	}

	// path param tenantId
	if err := r.SetPathParam("tenantId", o.TenantID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
