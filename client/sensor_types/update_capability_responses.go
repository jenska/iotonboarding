// Code generated by go-swagger; DO NOT EDIT.

package sensor_types

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UpdateCapabilityReader is a Reader for the UpdateCapability structure.
type UpdateCapabilityReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateCapabilityReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateCapabilityOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateCapabilityBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateCapabilityNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewUpdateCapabilityConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUpdateCapabilityOK creates a UpdateCapabilityOK with default headers values
func NewUpdateCapabilityOK() *UpdateCapabilityOK {
	return &UpdateCapabilityOK{}
}

/*UpdateCapabilityOK handles this case with default header values.

Successfully updated capability.
*/
type UpdateCapabilityOK struct {
	Payload *UpdateCapabilityOKBody
}

func (o *UpdateCapabilityOK) Error() string {
	return fmt.Sprintf("[PUT /v1/tenant/{tenantId}/sensorTypes/{sensorTypeId}/capabilities/{capabilityId}][%d] updateCapabilityOK  %+v", 200, o.Payload)
}

func (o *UpdateCapabilityOK) GetPayload() *UpdateCapabilityOKBody {
	return o.Payload
}

func (o *UpdateCapabilityOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(UpdateCapabilityOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateCapabilityBadRequest creates a UpdateCapabilityBadRequest with default headers values
func NewUpdateCapabilityBadRequest() *UpdateCapabilityBadRequest {
	return &UpdateCapabilityBadRequest{}
}

/*UpdateCapabilityBadRequest handles this case with default header values.

HTTP request is malformed.
*/
type UpdateCapabilityBadRequest struct {
	Payload *UpdateCapabilityBadRequestBody
}

func (o *UpdateCapabilityBadRequest) Error() string {
	return fmt.Sprintf("[PUT /v1/tenant/{tenantId}/sensorTypes/{sensorTypeId}/capabilities/{capabilityId}][%d] updateCapabilityBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateCapabilityBadRequest) GetPayload() *UpdateCapabilityBadRequestBody {
	return o.Payload
}

func (o *UpdateCapabilityBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(UpdateCapabilityBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateCapabilityNotFound creates a UpdateCapabilityNotFound with default headers values
func NewUpdateCapabilityNotFound() *UpdateCapabilityNotFound {
	return &UpdateCapabilityNotFound{}
}

/*UpdateCapabilityNotFound handles this case with default header values.

Capability with specified id does not exist.
*/
type UpdateCapabilityNotFound struct {
	Payload *UpdateCapabilityNotFoundBody
}

func (o *UpdateCapabilityNotFound) Error() string {
	return fmt.Sprintf("[PUT /v1/tenant/{tenantId}/sensorTypes/{sensorTypeId}/capabilities/{capabilityId}][%d] updateCapabilityNotFound  %+v", 404, o.Payload)
}

func (o *UpdateCapabilityNotFound) GetPayload() *UpdateCapabilityNotFoundBody {
	return o.Payload
}

func (o *UpdateCapabilityNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(UpdateCapabilityNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateCapabilityConflict creates a UpdateCapabilityConflict with default headers values
func NewUpdateCapabilityConflict() *UpdateCapabilityConflict {
	return &UpdateCapabilityConflict{}
}

/*UpdateCapabilityConflict handles this case with default header values.

Capability is still used by sensor types.
*/
type UpdateCapabilityConflict struct {
	Payload *UpdateCapabilityConflictBody
}

func (o *UpdateCapabilityConflict) Error() string {
	return fmt.Sprintf("[PUT /v1/tenant/{tenantId}/sensorTypes/{sensorTypeId}/capabilities/{capabilityId}][%d] updateCapabilityConflict  %+v", 409, o.Payload)
}

func (o *UpdateCapabilityConflict) GetPayload() *UpdateCapabilityConflictBody {
	return o.Payload
}

func (o *UpdateCapabilityConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(UpdateCapabilityConflictBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*UpdateCapabilityBadRequestBody Response
swagger:model UpdateCapabilityBadRequestBody
*/
type UpdateCapabilityBadRequestBody struct {

	// message
	// Required: true
	Message *string `json:"message"`
}

// Validate validates this update capability bad request body
func (o *UpdateCapabilityBadRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateCapabilityBadRequestBody) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("updateCapabilityBadRequest"+"."+"message", "body", o.Message); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateCapabilityBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateCapabilityBadRequestBody) UnmarshalBinary(b []byte) error {
	var res UpdateCapabilityBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdateCapabilityBody CapabilityAssignmentBean
swagger:model UpdateCapabilityBody
*/
type UpdateCapabilityBody struct {

	// References the unique identifier of a capability
	// Required: true
	ID *string `json:"id"`

	// The type of the referenced capability
	// Required: true
	// Enum: [measure command]
	Type *string `json:"type"`
}

// Validate validates this update capability body
func (o *UpdateCapabilityBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateCapabilityBody) validateID(formats strfmt.Registry) error {

	if err := validate.Required("request"+"."+"id", "body", o.ID); err != nil {
		return err
	}

	return nil
}

var updateCapabilityBodyTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["measure","command"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		updateCapabilityBodyTypeTypePropEnum = append(updateCapabilityBodyTypeTypePropEnum, v)
	}
}

const (

	// UpdateCapabilityBodyTypeMeasure captures enum value "measure"
	UpdateCapabilityBodyTypeMeasure string = "measure"

	// UpdateCapabilityBodyTypeCommand captures enum value "command"
	UpdateCapabilityBodyTypeCommand string = "command"
)

// prop value enum
func (o *UpdateCapabilityBody) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, updateCapabilityBodyTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *UpdateCapabilityBody) validateType(formats strfmt.Registry) error {

	if err := validate.Required("request"+"."+"type", "body", o.Type); err != nil {
		return err
	}

	// value enum
	if err := o.validateTypeEnum("request"+"."+"type", "body", *o.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateCapabilityBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateCapabilityBody) UnmarshalBinary(b []byte) error {
	var res UpdateCapabilityBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdateCapabilityConflictBody Response
swagger:model UpdateCapabilityConflictBody
*/
type UpdateCapabilityConflictBody struct {

	// message
	// Required: true
	Message *string `json:"message"`
}

// Validate validates this update capability conflict body
func (o *UpdateCapabilityConflictBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateCapabilityConflictBody) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("updateCapabilityConflict"+"."+"message", "body", o.Message); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateCapabilityConflictBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateCapabilityConflictBody) UnmarshalBinary(b []byte) error {
	var res UpdateCapabilityConflictBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdateCapabilityNotFoundBody Response
swagger:model UpdateCapabilityNotFoundBody
*/
type UpdateCapabilityNotFoundBody struct {

	// message
	// Required: true
	Message *string `json:"message"`
}

// Validate validates this update capability not found body
func (o *UpdateCapabilityNotFoundBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateCapabilityNotFoundBody) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("updateCapabilityNotFound"+"."+"message", "body", o.Message); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateCapabilityNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateCapabilityNotFoundBody) UnmarshalBinary(b []byte) error {
	var res UpdateCapabilityNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdateCapabilityOKBody CapabilityAssignmentBean
swagger:model UpdateCapabilityOKBody
*/
type UpdateCapabilityOKBody struct {

	// References the unique identifier of a capability
	// Required: true
	ID *string `json:"id"`

	// The type of the referenced capability
	// Required: true
	// Enum: [measure command]
	Type *string `json:"type"`
}

// Validate validates this update capability o k body
func (o *UpdateCapabilityOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateCapabilityOKBody) validateID(formats strfmt.Registry) error {

	if err := validate.Required("updateCapabilityOK"+"."+"id", "body", o.ID); err != nil {
		return err
	}

	return nil
}

var updateCapabilityOKBodyTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["measure","command"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		updateCapabilityOKBodyTypeTypePropEnum = append(updateCapabilityOKBodyTypeTypePropEnum, v)
	}
}

const (

	// UpdateCapabilityOKBodyTypeMeasure captures enum value "measure"
	UpdateCapabilityOKBodyTypeMeasure string = "measure"

	// UpdateCapabilityOKBodyTypeCommand captures enum value "command"
	UpdateCapabilityOKBodyTypeCommand string = "command"
)

// prop value enum
func (o *UpdateCapabilityOKBody) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, updateCapabilityOKBodyTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *UpdateCapabilityOKBody) validateType(formats strfmt.Registry) error {

	if err := validate.Required("updateCapabilityOK"+"."+"type", "body", o.Type); err != nil {
		return err
	}

	// value enum
	if err := o.validateTypeEnum("updateCapabilityOK"+"."+"type", "body", *o.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateCapabilityOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateCapabilityOKBody) UnmarshalBinary(b []byte) error {
	var res UpdateCapabilityOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
