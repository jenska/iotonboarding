// Code generated by go-swagger; DO NOT EDIT.

package sensor_types

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new sensor types API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for sensor types API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	AddCapability(params *AddCapabilityParams, authInfo runtime.ClientAuthInfoWriter) (*AddCapabilityOK, error)

	CreateSensorTypeUsingPOST(params *CreateSensorTypeUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter) (*CreateSensorTypeUsingPOSTOK, error)

	DeleteSensorTypeUsingDELETE(params *DeleteSensorTypeUsingDELETEParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteSensorTypeUsingDELETEOK, error)

	GetSensorTypeUsingGET(params *GetSensorTypeUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*GetSensorTypeUsingGETOK, error)

	GetSensorTypesCountUsingGET(params *GetSensorTypesCountUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*GetSensorTypesCountUsingGETOK, error)

	GetSensorTypesUsingGET(params *GetSensorTypesUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*GetSensorTypesUsingGETOK, error)

	RemoveCapability(params *RemoveCapabilityParams, authInfo runtime.ClientAuthInfoWriter) (*RemoveCapabilityOK, error)

	UpdateCapability(params *UpdateCapabilityParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateCapabilityOK, error)

	UpdateSensorTypeUsingPUT(params *UpdateSensorTypeUsingPUTParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateSensorTypeUsingPUTOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  AddCapability adds a capability

  This endpoint is used to add a capability.
*/
func (a *Client) AddCapability(params *AddCapabilityParams, authInfo runtime.ClientAuthInfoWriter) (*AddCapabilityOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddCapabilityParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "addCapability",
		Method:             "POST",
		PathPattern:        "/v1/tenant/{tenantId}/sensorTypes/{sensorTypeId}/capabilities",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AddCapabilityReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddCapabilityOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for addCapability: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateSensorTypeUsingPOST creates a sensor type

  This endpoint is used to create a sensor type.
*/
func (a *Client) CreateSensorTypeUsingPOST(params *CreateSensorTypeUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter) (*CreateSensorTypeUsingPOSTOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateSensorTypeUsingPOSTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createSensorTypeUsingPOST",
		Method:             "POST",
		PathPattern:        "/v1/tenant/{tenantId}/sensorTypes",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateSensorTypeUsingPOSTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateSensorTypeUsingPOSTOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createSensorTypeUsingPOST: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteSensorTypeUsingDELETE deletes a sensor type

  The endpoint is used to delete the sensor type associated to the given id.
*/
func (a *Client) DeleteSensorTypeUsingDELETE(params *DeleteSensorTypeUsingDELETEParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteSensorTypeUsingDELETEOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteSensorTypeUsingDELETEParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteSensorTypeUsingDELETE",
		Method:             "DELETE",
		PathPattern:        "/v1/tenant/{tenantId}/sensorTypes/{sensorTypeId}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteSensorTypeUsingDELETEReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteSensorTypeUsingDELETEOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteSensorTypeUsingDELETE: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetSensorTypeUsingGET returns a sensor type

  The endpoint returns the sensor type associated to the given id.
*/
func (a *Client) GetSensorTypeUsingGET(params *GetSensorTypeUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*GetSensorTypeUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSensorTypeUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSensorTypeUsingGET",
		Method:             "GET",
		PathPattern:        "/v1/tenant/{tenantId}/sensorTypes/{sensorTypeId}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSensorTypeUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSensorTypeUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getSensorTypeUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetSensorTypesCountUsingGET returns the count of all sensor types

  The endpoint returns the count of all sensor types.
*/
func (a *Client) GetSensorTypesCountUsingGET(params *GetSensorTypesCountUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*GetSensorTypesCountUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSensorTypesCountUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSensorTypesCountUsingGET",
		Method:             "GET",
		PathPattern:        "/v1/tenant/{tenantId}/sensorTypes/count",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSensorTypesCountUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSensorTypesCountUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getSensorTypesCountUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetSensorTypesUsingGET returns all sensor types

  The endpoint returns a list of sensor types.
*/
func (a *Client) GetSensorTypesUsingGET(params *GetSensorTypesUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*GetSensorTypesUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSensorTypesUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSensorTypesUsingGET",
		Method:             "GET",
		PathPattern:        "/v1/tenant/{tenantId}/sensorTypes",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSensorTypesUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSensorTypesUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getSensorTypesUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  RemoveCapability removes a capability

  The endpoint is used to remove the capability associated to the given id.
*/
func (a *Client) RemoveCapability(params *RemoveCapabilityParams, authInfo runtime.ClientAuthInfoWriter) (*RemoveCapabilityOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRemoveCapabilityParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "removeCapability",
		Method:             "DELETE",
		PathPattern:        "/v1/tenant/{tenantId}/sensorTypes/{sensorTypeId}/capabilities/{capabilityId}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RemoveCapabilityReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RemoveCapabilityOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for removeCapability: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateCapability updates a capability

  This endpoint is used to update the capability associated to the given id with details specified in the request body.
*/
func (a *Client) UpdateCapability(params *UpdateCapabilityParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateCapabilityOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateCapabilityParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateCapability",
		Method:             "PUT",
		PathPattern:        "/v1/tenant/{tenantId}/sensorTypes/{sensorTypeId}/capabilities/{capabilityId}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateCapabilityReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateCapabilityOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateCapability: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateSensorTypeUsingPUT updates a sensor type

  This endpoint is used to update the sensor type associated to the given id with details specified in the request body. To update capabilities, use the respective API.
*/
func (a *Client) UpdateSensorTypeUsingPUT(params *UpdateSensorTypeUsingPUTParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateSensorTypeUsingPUTOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateSensorTypeUsingPUTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateSensorTypeUsingPUT",
		Method:             "PUT",
		PathPattern:        "/v1/tenant/{tenantId}/sensorTypes/{sensorTypeId}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateSensorTypeUsingPUTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateSensorTypeUsingPUTOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateSensorTypeUsingPUT: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
