// Code generated by go-swagger; DO NOT EDIT.

package tenants

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new tenants API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for tenants API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	CreateCustomPropertyForTenant(params *CreateCustomPropertyForTenantParams, authInfo runtime.ClientAuthInfoWriter) (*CreateCustomPropertyForTenantOK, error)

	CreateTenantUsingPOST(params *CreateTenantUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter) (*CreateTenantUsingPOSTOK, error)

	CreateUserTenantAssignmentUsingPOST(params *CreateUserTenantAssignmentUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter) (*CreateUserTenantAssignmentUsingPOSTOK, error)

	DeleteCustomPropertyForTenant(params *DeleteCustomPropertyForTenantParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteCustomPropertyForTenantOK, error)

	DeleteTenantUsingDELETE(params *DeleteTenantUsingDELETEParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteTenantUsingDELETEOK, error)

	DeleteUserTenantAssignmentUsingDELETE(params *DeleteUserTenantAssignmentUsingDELETEParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteUserTenantAssignmentUsingDELETEOK, error)

	GetGatewayRegistrationP12CertificateUsingGET(params *GetGatewayRegistrationP12CertificateUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*GetGatewayRegistrationP12CertificateUsingGETOK, error)

	GetGatewayRegistrationPEMCertificateUsingGET(params *GetGatewayRegistrationPEMCertificateUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*GetGatewayRegistrationPEMCertificateUsingGETOK, error)

	GetGatewayRegistrationPEMCertificateV2UsingGET(params *GetGatewayRegistrationPEMCertificateV2UsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*GetGatewayRegistrationPEMCertificateV2UsingGETOK, error)

	GetTenantUsingGET(params *GetTenantUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*GetTenantUsingGETOK, error)

	GetTenantsCountUsingGET(params *GetTenantsCountUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*GetTenantsCountUsingGETOK, error)

	GetTenantsUsingGET(params *GetTenantsUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*GetTenantsUsingGETOK, error)

	GetTrustedCACertificatesUsingGET(params *GetTrustedCACertificatesUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*GetTrustedCACertificatesUsingGETOK, error)

	GetUserTenantAssignmentUsingGET(params *GetUserTenantAssignmentUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*GetUserTenantAssignmentUsingGETOK, error)

	GetUserTenantAssignmentsUsingGET(params *GetUserTenantAssignmentsUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*GetUserTenantAssignmentsUsingGETOK, error)

	ListGatewayRegistrationCertificatesUsingGET(params *ListGatewayRegistrationCertificatesUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*ListGatewayRegistrationCertificatesUsingGETOK, error)

	RevokeGatewayRegistrationCertificateUsingDELETE(params *RevokeGatewayRegistrationCertificateUsingDELETEParams, authInfo runtime.ClientAuthInfoWriter) (*RevokeGatewayRegistrationCertificateUsingDELETEOK, error)

	UpdateCustomPropertyForTenant(params *UpdateCustomPropertyForTenantParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateCustomPropertyForTenantOK, error)

	UpdateTenantUsingPUT(params *UpdateTenantUsingPUTParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateTenantUsingPUTOK, error)

	UpdateUserTenantAssignmentUsingPUT(params *UpdateUserTenantAssignmentUsingPUTParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateUserTenantAssignmentUsingPUTOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateCustomPropertyForTenant adds a custom property to a tenant

  The endpoint is used to add a custom property to the tenant associated to the given id.
*/
func (a *Client) CreateCustomPropertyForTenant(params *CreateCustomPropertyForTenantParams, authInfo runtime.ClientAuthInfoWriter) (*CreateCustomPropertyForTenantOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateCustomPropertyForTenantParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createCustomPropertyForTenant",
		Method:             "POST",
		PathPattern:        "/v1/tenants/{tenantId}/customProperties",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateCustomPropertyForTenantReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateCustomPropertyForTenantOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createCustomPropertyForTenant: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateTenantUsingPOST creates a tenant

  The endpoint is used to create a tenant.
*/
func (a *Client) CreateTenantUsingPOST(params *CreateTenantUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter) (*CreateTenantUsingPOSTOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateTenantUsingPOSTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createTenantUsingPOST",
		Method:             "POST",
		PathPattern:        "/v1/tenants",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateTenantUsingPOSTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateTenantUsingPOSTOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createTenantUsingPOST: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateUserTenantAssignmentUsingPOST adds a user to a tenant

  The endpoint is used to add the user specified in the request body to the tenant associated to the given id.
*/
func (a *Client) CreateUserTenantAssignmentUsingPOST(params *CreateUserTenantAssignmentUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter) (*CreateUserTenantAssignmentUsingPOSTOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateUserTenantAssignmentUsingPOSTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createUserTenantAssignmentUsingPOST",
		Method:             "POST",
		PathPattern:        "/v1/tenants/{tenantId}/users",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateUserTenantAssignmentUsingPOSTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateUserTenantAssignmentUsingPOSTOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createUserTenantAssignmentUsingPOST: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteCustomPropertyForTenant deletes a custom property from a tenant

  This endpoint is used to delete a custom property from the tenant associated to the given id.
*/
func (a *Client) DeleteCustomPropertyForTenant(params *DeleteCustomPropertyForTenantParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteCustomPropertyForTenantOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteCustomPropertyForTenantParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteCustomPropertyForTenant",
		Method:             "DELETE",
		PathPattern:        "/v1/tenants/{tenantId}/customProperties/{key}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteCustomPropertyForTenantReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteCustomPropertyForTenantOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteCustomPropertyForTenant: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteTenantUsingDELETE deletes a tenant

  The endpoint is used to delete the tenant associated to the given id.
*/
func (a *Client) DeleteTenantUsingDELETE(params *DeleteTenantUsingDELETEParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteTenantUsingDELETEOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteTenantUsingDELETEParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteTenantUsingDELETE",
		Method:             "DELETE",
		PathPattern:        "/v1/tenants/{tenantId}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteTenantUsingDELETEReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteTenantUsingDELETEOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteTenantUsingDELETE: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteUserTenantAssignmentUsingDELETE removes a user from a tenant

  The endpoint is used to remove the user from the tenant associated to the given id.
*/
func (a *Client) DeleteUserTenantAssignmentUsingDELETE(params *DeleteUserTenantAssignmentUsingDELETEParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteUserTenantAssignmentUsingDELETEOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteUserTenantAssignmentUsingDELETEParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteUserTenantAssignmentUsingDELETE",
		Method:             "DELETE",
		PathPattern:        "/v1/tenants/{tenantId}/users/{userId}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteUserTenantAssignmentUsingDELETEReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteUserTenantAssignmentUsingDELETEOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteUserTenantAssignmentUsingDELETE: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetGatewayRegistrationP12CertificateUsingGET downloads a gateway registration p12 file

  The endpoint is used to download tenant specific p12 file for the registration of a gateway.
*/
func (a *Client) GetGatewayRegistrationP12CertificateUsingGET(params *GetGatewayRegistrationP12CertificateUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*GetGatewayRegistrationP12CertificateUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetGatewayRegistrationP12CertificateUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getGatewayRegistrationP12CertificateUsingGET",
		Method:             "GET",
		PathPattern:        "/v1/tenants/{tenantId}/gatewayRegistrations/clientCertificate/p12",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetGatewayRegistrationP12CertificateUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetGatewayRegistrationP12CertificateUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getGatewayRegistrationP12CertificateUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetGatewayRegistrationPEMCertificateUsingGET downloads a gateway registration private key and certificate in p e m format

  The endpoint is used to download tenant specific pem file for the registration of a gateway.
*/
func (a *Client) GetGatewayRegistrationPEMCertificateUsingGET(params *GetGatewayRegistrationPEMCertificateUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*GetGatewayRegistrationPEMCertificateUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetGatewayRegistrationPEMCertificateUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getGatewayRegistrationPEMCertificateUsingGET",
		Method:             "GET",
		PathPattern:        "/v1/tenants/{tenantId}/gatewayRegistrations/clientCertificate/pem",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetGatewayRegistrationPEMCertificateUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetGatewayRegistrationPEMCertificateUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getGatewayRegistrationPEMCertificateUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetGatewayRegistrationPEMCertificateV2UsingGET downloads a gateway registration private key and certificate in v2 p e m format

  The endpoint is used to download tenant specific V2 pem file for the registration of a gateway.
*/
func (a *Client) GetGatewayRegistrationPEMCertificateV2UsingGET(params *GetGatewayRegistrationPEMCertificateV2UsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*GetGatewayRegistrationPEMCertificateV2UsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetGatewayRegistrationPEMCertificateV2UsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getGatewayRegistrationPEMCertificateV2UsingGET",
		Method:             "GET",
		PathPattern:        "/v2/tenants/{tenantId}/gatewayRegistrations/clientCertificate/pem",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetGatewayRegistrationPEMCertificateV2UsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetGatewayRegistrationPEMCertificateV2UsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getGatewayRegistrationPEMCertificateV2UsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetTenantUsingGET returns a tenant

  The endpoint returns the tenant associated to the given id.
*/
func (a *Client) GetTenantUsingGET(params *GetTenantUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*GetTenantUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTenantUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getTenantUsingGET",
		Method:             "GET",
		PathPattern:        "/v1/tenants/{tenantId}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetTenantUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTenantUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getTenantUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetTenantsCountUsingGET returns the count of all tenants

  The endpoint returns the count of all tenants.
*/
func (a *Client) GetTenantsCountUsingGET(params *GetTenantsCountUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*GetTenantsCountUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTenantsCountUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getTenantsCountUsingGET",
		Method:             "GET",
		PathPattern:        "/v1/tenants/count",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetTenantsCountUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTenantsCountUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getTenantsCountUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetTenantsUsingGET returns all tenants

  The endpoint returns a list of tenants.
*/
func (a *Client) GetTenantsUsingGET(params *GetTenantsUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*GetTenantsUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTenantsUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getTenantsUsingGET",
		Method:             "GET",
		PathPattern:        "/v1/tenants",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetTenantsUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTenantsUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getTenantsUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetTrustedCACertificatesUsingGET returns all trusted c a certificates

  The endpoint is used to download tenant specific trusted CA certificates for authentication.
*/
func (a *Client) GetTrustedCACertificatesUsingGET(params *GetTrustedCACertificatesUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*GetTrustedCACertificatesUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTrustedCACertificatesUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getTrustedCACertificatesUsingGET",
		Method:             "GET",
		PathPattern:        "/v1/tenants/{tenantId}/trustedCACertificates",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetTrustedCACertificatesUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTrustedCACertificatesUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getTrustedCACertificatesUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetUserTenantAssignmentUsingGET returns a tenant user

  The endpoint is used to return the tenant user associated to the given id.
*/
func (a *Client) GetUserTenantAssignmentUsingGET(params *GetUserTenantAssignmentUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*GetUserTenantAssignmentUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUserTenantAssignmentUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getUserTenantAssignmentUsingGET",
		Method:             "GET",
		PathPattern:        "/v1/tenants/{tenantId}/users/{userId}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetUserTenantAssignmentUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetUserTenantAssignmentUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getUserTenantAssignmentUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetUserTenantAssignmentsUsingGET returns all tenant users

  The endpoint returns a list of users assigned to the tenant associated with the given id.
*/
func (a *Client) GetUserTenantAssignmentsUsingGET(params *GetUserTenantAssignmentsUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*GetUserTenantAssignmentsUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUserTenantAssignmentsUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getUserTenantAssignmentsUsingGET",
		Method:             "GET",
		PathPattern:        "/v1/tenants/{tenantId}/users",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetUserTenantAssignmentsUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetUserTenantAssignmentsUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getUserTenantAssignmentsUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListGatewayRegistrationCertificatesUsingGET shows the gateway registration certificate fingerprints and expiration dates

  The endpoint is used to list the fingerprints and expiration dates for gateway registration certificates of the given tenant.
*/
func (a *Client) ListGatewayRegistrationCertificatesUsingGET(params *ListGatewayRegistrationCertificatesUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*ListGatewayRegistrationCertificatesUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListGatewayRegistrationCertificatesUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listGatewayRegistrationCertificatesUsingGET",
		Method:             "GET",
		PathPattern:        "/v1/tenants/{tenantId}/gatewayRegistrations/clientCertificate",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListGatewayRegistrationCertificatesUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListGatewayRegistrationCertificatesUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listGatewayRegistrationCertificatesUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  RevokeGatewayRegistrationCertificateUsingDELETE revokes a gateway registration certificate

  The endpoint is used to revoke a gateway registration certificate of the given tenant.
*/
func (a *Client) RevokeGatewayRegistrationCertificateUsingDELETE(params *RevokeGatewayRegistrationCertificateUsingDELETEParams, authInfo runtime.ClientAuthInfoWriter) (*RevokeGatewayRegistrationCertificateUsingDELETEOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRevokeGatewayRegistrationCertificateUsingDELETEParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "revokeGatewayRegistrationCertificateUsingDELETE",
		Method:             "DELETE",
		PathPattern:        "/v1/tenants/{tenantId}/gatewayRegistrations/clientCertificate/{fingerprint}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RevokeGatewayRegistrationCertificateUsingDELETEReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RevokeGatewayRegistrationCertificateUsingDELETEOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for revokeGatewayRegistrationCertificateUsingDELETE: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateCustomPropertyForTenant updates a custom property of a tenant

  The endpoint is used to update a custom property of the tenant associated to the given id. The 'key' attribute cannot be modified.
*/
func (a *Client) UpdateCustomPropertyForTenant(params *UpdateCustomPropertyForTenantParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateCustomPropertyForTenantOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateCustomPropertyForTenantParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateCustomPropertyForTenant",
		Method:             "PUT",
		PathPattern:        "/v1/tenants/{tenantId}/customProperties/{key}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateCustomPropertyForTenantReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateCustomPropertyForTenantOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateCustomPropertyForTenant: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateTenantUsingPUT updates a tenant

  The endpoint is used to update the tenant associated to the given id with details specified in the request body. To update custom properties or tenants, use the respective APIs.
*/
func (a *Client) UpdateTenantUsingPUT(params *UpdateTenantUsingPUTParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateTenantUsingPUTOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateTenantUsingPUTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateTenantUsingPUT",
		Method:             "PUT",
		PathPattern:        "/v1/tenants/{tenantId}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateTenantUsingPUTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateTenantUsingPUTOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateTenantUsingPUT: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateUserTenantAssignmentUsingPUT updates a tenant user

  The endpoint is used to update the tenant user associated to the given id with details specified in the request body.
*/
func (a *Client) UpdateUserTenantAssignmentUsingPUT(params *UpdateUserTenantAssignmentUsingPUTParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateUserTenantAssignmentUsingPUTOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateUserTenantAssignmentUsingPUTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateUserTenantAssignmentUsingPUT",
		Method:             "PUT",
		PathPattern:        "/v1/tenants/{tenantId}/users/{userId}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateUserTenantAssignmentUsingPUTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateUserTenantAssignmentUsingPUTOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateUserTenantAssignmentUsingPUT: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
