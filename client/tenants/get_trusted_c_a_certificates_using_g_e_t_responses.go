// Code generated by go-swagger; DO NOT EDIT.

package tenants

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GetTrustedCACertificatesUsingGETReader is a Reader for the GetTrustedCACertificatesUsingGET structure.
type GetTrustedCACertificatesUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetTrustedCACertificatesUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetTrustedCACertificatesUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetTrustedCACertificatesUsingGETBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetTrustedCACertificatesUsingGETNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetTrustedCACertificatesUsingGETOK creates a GetTrustedCACertificatesUsingGETOK with default headers values
func NewGetTrustedCACertificatesUsingGETOK() *GetTrustedCACertificatesUsingGETOK {
	return &GetTrustedCACertificatesUsingGETOK{}
}

/*GetTrustedCACertificatesUsingGETOK handles this case with default header values.

Successfully downloaded trusted CA certificates.
*/
type GetTrustedCACertificatesUsingGETOK struct {
	Payload []*GetTrustedCACertificatesUsingGETOKBodyItems0
}

func (o *GetTrustedCACertificatesUsingGETOK) Error() string {
	return fmt.Sprintf("[GET /v1/tenants/{tenantId}/trustedCACertificates][%d] getTrustedCACertificatesUsingGETOK  %+v", 200, o.Payload)
}

func (o *GetTrustedCACertificatesUsingGETOK) GetPayload() []*GetTrustedCACertificatesUsingGETOKBodyItems0 {
	return o.Payload
}

func (o *GetTrustedCACertificatesUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTrustedCACertificatesUsingGETBadRequest creates a GetTrustedCACertificatesUsingGETBadRequest with default headers values
func NewGetTrustedCACertificatesUsingGETBadRequest() *GetTrustedCACertificatesUsingGETBadRequest {
	return &GetTrustedCACertificatesUsingGETBadRequest{}
}

/*GetTrustedCACertificatesUsingGETBadRequest handles this case with default header values.

HTTP request is malformed.
*/
type GetTrustedCACertificatesUsingGETBadRequest struct {
	Payload *GetTrustedCACertificatesUsingGETBadRequestBody
}

func (o *GetTrustedCACertificatesUsingGETBadRequest) Error() string {
	return fmt.Sprintf("[GET /v1/tenants/{tenantId}/trustedCACertificates][%d] getTrustedCACertificatesUsingGETBadRequest  %+v", 400, o.Payload)
}

func (o *GetTrustedCACertificatesUsingGETBadRequest) GetPayload() *GetTrustedCACertificatesUsingGETBadRequestBody {
	return o.Payload
}

func (o *GetTrustedCACertificatesUsingGETBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetTrustedCACertificatesUsingGETBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTrustedCACertificatesUsingGETNotFound creates a GetTrustedCACertificatesUsingGETNotFound with default headers values
func NewGetTrustedCACertificatesUsingGETNotFound() *GetTrustedCACertificatesUsingGETNotFound {
	return &GetTrustedCACertificatesUsingGETNotFound{}
}

/*GetTrustedCACertificatesUsingGETNotFound handles this case with default header values.

Tenant with specified id does not exist.
*/
type GetTrustedCACertificatesUsingGETNotFound struct {
	Payload *GetTrustedCACertificatesUsingGETNotFoundBody
}

func (o *GetTrustedCACertificatesUsingGETNotFound) Error() string {
	return fmt.Sprintf("[GET /v1/tenants/{tenantId}/trustedCACertificates][%d] getTrustedCACertificatesUsingGETNotFound  %+v", 404, o.Payload)
}

func (o *GetTrustedCACertificatesUsingGETNotFound) GetPayload() *GetTrustedCACertificatesUsingGETNotFoundBody {
	return o.Payload
}

func (o *GetTrustedCACertificatesUsingGETNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetTrustedCACertificatesUsingGETNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*GetTrustedCACertificatesUsingGETBadRequestBody Response
swagger:model GetTrustedCACertificatesUsingGETBadRequestBody
*/
type GetTrustedCACertificatesUsingGETBadRequestBody struct {

	// message
	// Required: true
	Message *string `json:"message"`
}

// Validate validates this get trusted c a certificates using g e t bad request body
func (o *GetTrustedCACertificatesUsingGETBadRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetTrustedCACertificatesUsingGETBadRequestBody) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("getTrustedCACertificatesUsingGETBadRequest"+"."+"message", "body", o.Message); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetTrustedCACertificatesUsingGETBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetTrustedCACertificatesUsingGETBadRequestBody) UnmarshalBinary(b []byte) error {
	var res GetTrustedCACertificatesUsingGETBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetTrustedCACertificatesUsingGETNotFoundBody Response
swagger:model GetTrustedCACertificatesUsingGETNotFoundBody
*/
type GetTrustedCACertificatesUsingGETNotFoundBody struct {

	// message
	// Required: true
	Message *string `json:"message"`
}

// Validate validates this get trusted c a certificates using g e t not found body
func (o *GetTrustedCACertificatesUsingGETNotFoundBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetTrustedCACertificatesUsingGETNotFoundBody) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("getTrustedCACertificatesUsingGETNotFound"+"."+"message", "body", o.Message); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetTrustedCACertificatesUsingGETNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetTrustedCACertificatesUsingGETNotFoundBody) UnmarshalBinary(b []byte) error {
	var res GetTrustedCACertificatesUsingGETNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetTrustedCACertificatesUsingGETOKBodyItems0 TrustedCACertificateBean
swagger:model GetTrustedCACertificatesUsingGETOKBodyItems0
*/
type GetTrustedCACertificatesUsingGETOKBodyItems0 struct {

	// pem
	// Required: true
	Pem *string `json:"pem"`
}

// Validate validates this get trusted c a certificates using g e t o k body items0
func (o *GetTrustedCACertificatesUsingGETOKBodyItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validatePem(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetTrustedCACertificatesUsingGETOKBodyItems0) validatePem(formats strfmt.Registry) error {

	if err := validate.Required("pem", "body", o.Pem); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetTrustedCACertificatesUsingGETOKBodyItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetTrustedCACertificatesUsingGETOKBodyItems0) UnmarshalBinary(b []byte) error {
	var res GetTrustedCACertificatesUsingGETOKBodyItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
