// Code generated by go-swagger; DO NOT EDIT.

package tenants

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GetGatewayRegistrationPEMCertificateUsingGETReader is a Reader for the GetGatewayRegistrationPEMCertificateUsingGET structure.
type GetGatewayRegistrationPEMCertificateUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetGatewayRegistrationPEMCertificateUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetGatewayRegistrationPEMCertificateUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetGatewayRegistrationPEMCertificateUsingGETBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetGatewayRegistrationPEMCertificateUsingGETNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetGatewayRegistrationPEMCertificateUsingGETOK creates a GetGatewayRegistrationPEMCertificateUsingGETOK with default headers values
func NewGetGatewayRegistrationPEMCertificateUsingGETOK() *GetGatewayRegistrationPEMCertificateUsingGETOK {
	return &GetGatewayRegistrationPEMCertificateUsingGETOK{}
}

/*GetGatewayRegistrationPEMCertificateUsingGETOK handles this case with default header values.

Successfully downloaded gateway registration pem file.
*/
type GetGatewayRegistrationPEMCertificateUsingGETOK struct {
	Payload *GetGatewayRegistrationPEMCertificateUsingGETOKBody
}

func (o *GetGatewayRegistrationPEMCertificateUsingGETOK) Error() string {
	return fmt.Sprintf("[GET /v1/tenants/{tenantId}/gatewayRegistrations/clientCertificate/pem][%d] getGatewayRegistrationPEMCertificateUsingGETOK  %+v", 200, o.Payload)
}

func (o *GetGatewayRegistrationPEMCertificateUsingGETOK) GetPayload() *GetGatewayRegistrationPEMCertificateUsingGETOKBody {
	return o.Payload
}

func (o *GetGatewayRegistrationPEMCertificateUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetGatewayRegistrationPEMCertificateUsingGETOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetGatewayRegistrationPEMCertificateUsingGETBadRequest creates a GetGatewayRegistrationPEMCertificateUsingGETBadRequest with default headers values
func NewGetGatewayRegistrationPEMCertificateUsingGETBadRequest() *GetGatewayRegistrationPEMCertificateUsingGETBadRequest {
	return &GetGatewayRegistrationPEMCertificateUsingGETBadRequest{}
}

/*GetGatewayRegistrationPEMCertificateUsingGETBadRequest handles this case with default header values.

HTTP request is malformed.
*/
type GetGatewayRegistrationPEMCertificateUsingGETBadRequest struct {
	Payload *GetGatewayRegistrationPEMCertificateUsingGETBadRequestBody
}

func (o *GetGatewayRegistrationPEMCertificateUsingGETBadRequest) Error() string {
	return fmt.Sprintf("[GET /v1/tenants/{tenantId}/gatewayRegistrations/clientCertificate/pem][%d] getGatewayRegistrationPEMCertificateUsingGETBadRequest  %+v", 400, o.Payload)
}

func (o *GetGatewayRegistrationPEMCertificateUsingGETBadRequest) GetPayload() *GetGatewayRegistrationPEMCertificateUsingGETBadRequestBody {
	return o.Payload
}

func (o *GetGatewayRegistrationPEMCertificateUsingGETBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetGatewayRegistrationPEMCertificateUsingGETBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetGatewayRegistrationPEMCertificateUsingGETNotFound creates a GetGatewayRegistrationPEMCertificateUsingGETNotFound with default headers values
func NewGetGatewayRegistrationPEMCertificateUsingGETNotFound() *GetGatewayRegistrationPEMCertificateUsingGETNotFound {
	return &GetGatewayRegistrationPEMCertificateUsingGETNotFound{}
}

/*GetGatewayRegistrationPEMCertificateUsingGETNotFound handles this case with default header values.

Tenant with specified id does not exist.
*/
type GetGatewayRegistrationPEMCertificateUsingGETNotFound struct {
	Payload *GetGatewayRegistrationPEMCertificateUsingGETNotFoundBody
}

func (o *GetGatewayRegistrationPEMCertificateUsingGETNotFound) Error() string {
	return fmt.Sprintf("[GET /v1/tenants/{tenantId}/gatewayRegistrations/clientCertificate/pem][%d] getGatewayRegistrationPEMCertificateUsingGETNotFound  %+v", 404, o.Payload)
}

func (o *GetGatewayRegistrationPEMCertificateUsingGETNotFound) GetPayload() *GetGatewayRegistrationPEMCertificateUsingGETNotFoundBody {
	return o.Payload
}

func (o *GetGatewayRegistrationPEMCertificateUsingGETNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetGatewayRegistrationPEMCertificateUsingGETNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*GetGatewayRegistrationPEMCertificateUsingGETBadRequestBody Response
swagger:model GetGatewayRegistrationPEMCertificateUsingGETBadRequestBody
*/
type GetGatewayRegistrationPEMCertificateUsingGETBadRequestBody struct {

	// message
	// Required: true
	Message *string `json:"message"`
}

// Validate validates this get gateway registration p e m certificate using g e t bad request body
func (o *GetGatewayRegistrationPEMCertificateUsingGETBadRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetGatewayRegistrationPEMCertificateUsingGETBadRequestBody) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("getGatewayRegistrationPEMCertificateUsingGETBadRequest"+"."+"message", "body", o.Message); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetGatewayRegistrationPEMCertificateUsingGETBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetGatewayRegistrationPEMCertificateUsingGETBadRequestBody) UnmarshalBinary(b []byte) error {
	var res GetGatewayRegistrationPEMCertificateUsingGETBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetGatewayRegistrationPEMCertificateUsingGETNotFoundBody Response
swagger:model GetGatewayRegistrationPEMCertificateUsingGETNotFoundBody
*/
type GetGatewayRegistrationPEMCertificateUsingGETNotFoundBody struct {

	// message
	// Required: true
	Message *string `json:"message"`
}

// Validate validates this get gateway registration p e m certificate using g e t not found body
func (o *GetGatewayRegistrationPEMCertificateUsingGETNotFoundBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetGatewayRegistrationPEMCertificateUsingGETNotFoundBody) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("getGatewayRegistrationPEMCertificateUsingGETNotFound"+"."+"message", "body", o.Message); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetGatewayRegistrationPEMCertificateUsingGETNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetGatewayRegistrationPEMCertificateUsingGETNotFoundBody) UnmarshalBinary(b []byte) error {
	var res GetGatewayRegistrationPEMCertificateUsingGETNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetGatewayRegistrationPEMCertificateUsingGETOKBody ClientCertificateAuthenticationBean
swagger:model GetGatewayRegistrationPEMCertificateUsingGETOKBody
*/
type GetGatewayRegistrationPEMCertificateUsingGETOKBody struct {

	// csr
	Csr string `json:"csr,omitempty"`

	// p12
	// Read Only: true
	P12 string `json:"p12,omitempty"`

	// pem
	// Read Only: true
	Pem string `json:"pem,omitempty"`

	// secret
	// Read Only: true
	Secret string `json:"secret,omitempty"`

	// The type of the authentication mechanism
	// Required: true
	// Enum: [clientCertificate]
	Type *string `json:"type"`
}

// Validate validates this get gateway registration p e m certificate using g e t o k body
func (o *GetGatewayRegistrationPEMCertificateUsingGETOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var getGatewayRegistrationPEMCertificateUsingGETOKBodyTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["clientCertificate"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		getGatewayRegistrationPEMCertificateUsingGETOKBodyTypeTypePropEnum = append(getGatewayRegistrationPEMCertificateUsingGETOKBodyTypeTypePropEnum, v)
	}
}

const (

	// GetGatewayRegistrationPEMCertificateUsingGETOKBodyTypeClientCertificate captures enum value "clientCertificate"
	GetGatewayRegistrationPEMCertificateUsingGETOKBodyTypeClientCertificate string = "clientCertificate"
)

// prop value enum
func (o *GetGatewayRegistrationPEMCertificateUsingGETOKBody) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, getGatewayRegistrationPEMCertificateUsingGETOKBodyTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *GetGatewayRegistrationPEMCertificateUsingGETOKBody) validateType(formats strfmt.Registry) error {

	if err := validate.Required("getGatewayRegistrationPEMCertificateUsingGETOK"+"."+"type", "body", o.Type); err != nil {
		return err
	}

	// value enum
	if err := o.validateTypeEnum("getGatewayRegistrationPEMCertificateUsingGETOK"+"."+"type", "body", *o.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetGatewayRegistrationPEMCertificateUsingGETOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetGatewayRegistrationPEMCertificateUsingGETOKBody) UnmarshalBinary(b []byte) error {
	var res GetGatewayRegistrationPEMCertificateUsingGETOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
