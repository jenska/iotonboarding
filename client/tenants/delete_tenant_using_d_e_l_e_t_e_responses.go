// Code generated by go-swagger; DO NOT EDIT.

package tenants

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DeleteTenantUsingDELETEReader is a Reader for the DeleteTenantUsingDELETE structure.
type DeleteTenantUsingDELETEReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteTenantUsingDELETEReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDeleteTenantUsingDELETEOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewDeleteTenantUsingDELETEBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDeleteTenantUsingDELETENotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewDeleteTenantUsingDELETEOK creates a DeleteTenantUsingDELETEOK with default headers values
func NewDeleteTenantUsingDELETEOK() *DeleteTenantUsingDELETEOK {
	return &DeleteTenantUsingDELETEOK{}
}

/*DeleteTenantUsingDELETEOK handles this case with default header values.

Successfully deleted tenant.
*/
type DeleteTenantUsingDELETEOK struct {
	Payload *DeleteTenantUsingDELETEOKBody
}

func (o *DeleteTenantUsingDELETEOK) Error() string {
	return fmt.Sprintf("[DELETE /v1/tenants/{tenantId}][%d] deleteTenantUsingDELETEOK  %+v", 200, o.Payload)
}

func (o *DeleteTenantUsingDELETEOK) GetPayload() *DeleteTenantUsingDELETEOKBody {
	return o.Payload
}

func (o *DeleteTenantUsingDELETEOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(DeleteTenantUsingDELETEOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteTenantUsingDELETEBadRequest creates a DeleteTenantUsingDELETEBadRequest with default headers values
func NewDeleteTenantUsingDELETEBadRequest() *DeleteTenantUsingDELETEBadRequest {
	return &DeleteTenantUsingDELETEBadRequest{}
}

/*DeleteTenantUsingDELETEBadRequest handles this case with default header values.

HTTP request is malformed.
*/
type DeleteTenantUsingDELETEBadRequest struct {
	Payload *DeleteTenantUsingDELETEBadRequestBody
}

func (o *DeleteTenantUsingDELETEBadRequest) Error() string {
	return fmt.Sprintf("[DELETE /v1/tenants/{tenantId}][%d] deleteTenantUsingDELETEBadRequest  %+v", 400, o.Payload)
}

func (o *DeleteTenantUsingDELETEBadRequest) GetPayload() *DeleteTenantUsingDELETEBadRequestBody {
	return o.Payload
}

func (o *DeleteTenantUsingDELETEBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(DeleteTenantUsingDELETEBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteTenantUsingDELETENotFound creates a DeleteTenantUsingDELETENotFound with default headers values
func NewDeleteTenantUsingDELETENotFound() *DeleteTenantUsingDELETENotFound {
	return &DeleteTenantUsingDELETENotFound{}
}

/*DeleteTenantUsingDELETENotFound handles this case with default header values.

Tenant with specified id does not exist.
*/
type DeleteTenantUsingDELETENotFound struct {
	Payload *DeleteTenantUsingDELETENotFoundBody
}

func (o *DeleteTenantUsingDELETENotFound) Error() string {
	return fmt.Sprintf("[DELETE /v1/tenants/{tenantId}][%d] deleteTenantUsingDELETENotFound  %+v", 404, o.Payload)
}

func (o *DeleteTenantUsingDELETENotFound) GetPayload() *DeleteTenantUsingDELETENotFoundBody {
	return o.Payload
}

func (o *DeleteTenantUsingDELETENotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(DeleteTenantUsingDELETENotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*DeleteTenantUsingDELETEBadRequestBody Response
swagger:model DeleteTenantUsingDELETEBadRequestBody
*/
type DeleteTenantUsingDELETEBadRequestBody struct {

	// message
	// Required: true
	Message *string `json:"message"`
}

// Validate validates this delete tenant using d e l e t e bad request body
func (o *DeleteTenantUsingDELETEBadRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DeleteTenantUsingDELETEBadRequestBody) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("deleteTenantUsingDELETEBadRequest"+"."+"message", "body", o.Message); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *DeleteTenantUsingDELETEBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DeleteTenantUsingDELETEBadRequestBody) UnmarshalBinary(b []byte) error {
	var res DeleteTenantUsingDELETEBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*DeleteTenantUsingDELETENotFoundBody Response
swagger:model DeleteTenantUsingDELETENotFoundBody
*/
type DeleteTenantUsingDELETENotFoundBody struct {

	// message
	// Required: true
	Message *string `json:"message"`
}

// Validate validates this delete tenant using d e l e t e not found body
func (o *DeleteTenantUsingDELETENotFoundBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DeleteTenantUsingDELETENotFoundBody) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("deleteTenantUsingDELETENotFound"+"."+"message", "body", o.Message); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *DeleteTenantUsingDELETENotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DeleteTenantUsingDELETENotFoundBody) UnmarshalBinary(b []byte) error {
	var res DeleteTenantUsingDELETENotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*DeleteTenantUsingDELETEOKBody Response
swagger:model DeleteTenantUsingDELETEOKBody
*/
type DeleteTenantUsingDELETEOKBody struct {

	// message
	// Required: true
	Message *string `json:"message"`
}

// Validate validates this delete tenant using d e l e t e o k body
func (o *DeleteTenantUsingDELETEOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DeleteTenantUsingDELETEOKBody) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("deleteTenantUsingDELETEOK"+"."+"message", "body", o.Message); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *DeleteTenantUsingDELETEOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DeleteTenantUsingDELETEOKBody) UnmarshalBinary(b []byte) error {
	var res DeleteTenantUsingDELETEOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
