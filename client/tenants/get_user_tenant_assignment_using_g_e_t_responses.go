// Code generated by go-swagger; DO NOT EDIT.

package tenants

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GetUserTenantAssignmentUsingGETReader is a Reader for the GetUserTenantAssignmentUsingGET structure.
type GetUserTenantAssignmentUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetUserTenantAssignmentUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetUserTenantAssignmentUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetUserTenantAssignmentUsingGETBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetUserTenantAssignmentUsingGETNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetUserTenantAssignmentUsingGETOK creates a GetUserTenantAssignmentUsingGETOK with default headers values
func NewGetUserTenantAssignmentUsingGETOK() *GetUserTenantAssignmentUsingGETOK {
	return &GetUserTenantAssignmentUsingGETOK{}
}

/*GetUserTenantAssignmentUsingGETOK handles this case with default header values.

Successfully returned tenant user.
*/
type GetUserTenantAssignmentUsingGETOK struct {
	Payload *GetUserTenantAssignmentUsingGETOKBody
}

func (o *GetUserTenantAssignmentUsingGETOK) Error() string {
	return fmt.Sprintf("[GET /v1/tenants/{tenantId}/users/{userId}][%d] getUserTenantAssignmentUsingGETOK  %+v", 200, o.Payload)
}

func (o *GetUserTenantAssignmentUsingGETOK) GetPayload() *GetUserTenantAssignmentUsingGETOKBody {
	return o.Payload
}

func (o *GetUserTenantAssignmentUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetUserTenantAssignmentUsingGETOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetUserTenantAssignmentUsingGETBadRequest creates a GetUserTenantAssignmentUsingGETBadRequest with default headers values
func NewGetUserTenantAssignmentUsingGETBadRequest() *GetUserTenantAssignmentUsingGETBadRequest {
	return &GetUserTenantAssignmentUsingGETBadRequest{}
}

/*GetUserTenantAssignmentUsingGETBadRequest handles this case with default header values.

HTTP request is malformed.
*/
type GetUserTenantAssignmentUsingGETBadRequest struct {
	Payload *GetUserTenantAssignmentUsingGETBadRequestBody
}

func (o *GetUserTenantAssignmentUsingGETBadRequest) Error() string {
	return fmt.Sprintf("[GET /v1/tenants/{tenantId}/users/{userId}][%d] getUserTenantAssignmentUsingGETBadRequest  %+v", 400, o.Payload)
}

func (o *GetUserTenantAssignmentUsingGETBadRequest) GetPayload() *GetUserTenantAssignmentUsingGETBadRequestBody {
	return o.Payload
}

func (o *GetUserTenantAssignmentUsingGETBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetUserTenantAssignmentUsingGETBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetUserTenantAssignmentUsingGETNotFound creates a GetUserTenantAssignmentUsingGETNotFound with default headers values
func NewGetUserTenantAssignmentUsingGETNotFound() *GetUserTenantAssignmentUsingGETNotFound {
	return &GetUserTenantAssignmentUsingGETNotFound{}
}

/*GetUserTenantAssignmentUsingGETNotFound handles this case with default header values.

Tenant or user with specified id does not exist.
*/
type GetUserTenantAssignmentUsingGETNotFound struct {
	Payload *GetUserTenantAssignmentUsingGETNotFoundBody
}

func (o *GetUserTenantAssignmentUsingGETNotFound) Error() string {
	return fmt.Sprintf("[GET /v1/tenants/{tenantId}/users/{userId}][%d] getUserTenantAssignmentUsingGETNotFound  %+v", 404, o.Payload)
}

func (o *GetUserTenantAssignmentUsingGETNotFound) GetPayload() *GetUserTenantAssignmentUsingGETNotFoundBody {
	return o.Payload
}

func (o *GetUserTenantAssignmentUsingGETNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetUserTenantAssignmentUsingGETNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*GetUserTenantAssignmentUsingGETBadRequestBody Response
swagger:model GetUserTenantAssignmentUsingGETBadRequestBody
*/
type GetUserTenantAssignmentUsingGETBadRequestBody struct {

	// message
	// Required: true
	Message *string `json:"message"`
}

// Validate validates this get user tenant assignment using g e t bad request body
func (o *GetUserTenantAssignmentUsingGETBadRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetUserTenantAssignmentUsingGETBadRequestBody) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("getUserTenantAssignmentUsingGETBadRequest"+"."+"message", "body", o.Message); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetUserTenantAssignmentUsingGETBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetUserTenantAssignmentUsingGETBadRequestBody) UnmarshalBinary(b []byte) error {
	var res GetUserTenantAssignmentUsingGETBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetUserTenantAssignmentUsingGETNotFoundBody Response
swagger:model GetUserTenantAssignmentUsingGETNotFoundBody
*/
type GetUserTenantAssignmentUsingGETNotFoundBody struct {

	// message
	// Required: true
	Message *string `json:"message"`
}

// Validate validates this get user tenant assignment using g e t not found body
func (o *GetUserTenantAssignmentUsingGETNotFoundBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetUserTenantAssignmentUsingGETNotFoundBody) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("getUserTenantAssignmentUsingGETNotFound"+"."+"message", "body", o.Message); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetUserTenantAssignmentUsingGETNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetUserTenantAssignmentUsingGETNotFoundBody) UnmarshalBinary(b []byte) error {
	var res GetUserTenantAssignmentUsingGETNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetUserTenantAssignmentUsingGETOKBody TenantUserAssignmentBean
swagger:model GetUserTenantAssignmentUsingGETOKBody
*/
type GetUserTenantAssignmentUsingGETOKBody struct {

	// role
	// Enum: [administrator user]
	Role string `json:"role,omitempty"`

	// user Id
	UserID string `json:"userId,omitempty"`
}

// Validate validates this get user tenant assignment using g e t o k body
func (o *GetUserTenantAssignmentUsingGETOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateRole(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var getUserTenantAssignmentUsingGETOKBodyTypeRolePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["administrator","user"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		getUserTenantAssignmentUsingGETOKBodyTypeRolePropEnum = append(getUserTenantAssignmentUsingGETOKBodyTypeRolePropEnum, v)
	}
}

const (

	// GetUserTenantAssignmentUsingGETOKBodyRoleAdministrator captures enum value "administrator"
	GetUserTenantAssignmentUsingGETOKBodyRoleAdministrator string = "administrator"

	// GetUserTenantAssignmentUsingGETOKBodyRoleUser captures enum value "user"
	GetUserTenantAssignmentUsingGETOKBodyRoleUser string = "user"
)

// prop value enum
func (o *GetUserTenantAssignmentUsingGETOKBody) validateRoleEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, getUserTenantAssignmentUsingGETOKBodyTypeRolePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *GetUserTenantAssignmentUsingGETOKBody) validateRole(formats strfmt.Registry) error {

	if swag.IsZero(o.Role) { // not required
		return nil
	}

	// value enum
	if err := o.validateRoleEnum("getUserTenantAssignmentUsingGETOK"+"."+"role", "body", o.Role); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetUserTenantAssignmentUsingGETOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetUserTenantAssignmentUsingGETOKBody) UnmarshalBinary(b []byte) error {
	var res GetUserTenantAssignmentUsingGETOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
