// Code generated by go-swagger; DO NOT EDIT.

package tenants

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UpdateUserTenantAssignmentUsingPUTReader is a Reader for the UpdateUserTenantAssignmentUsingPUT structure.
type UpdateUserTenantAssignmentUsingPUTReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateUserTenantAssignmentUsingPUTReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateUserTenantAssignmentUsingPUTOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateUserTenantAssignmentUsingPUTBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateUserTenantAssignmentUsingPUTNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUpdateUserTenantAssignmentUsingPUTOK creates a UpdateUserTenantAssignmentUsingPUTOK with default headers values
func NewUpdateUserTenantAssignmentUsingPUTOK() *UpdateUserTenantAssignmentUsingPUTOK {
	return &UpdateUserTenantAssignmentUsingPUTOK{}
}

/*UpdateUserTenantAssignmentUsingPUTOK handles this case with default header values.

Successfully updated tenant user.
*/
type UpdateUserTenantAssignmentUsingPUTOK struct {
	Payload *UpdateUserTenantAssignmentUsingPUTOKBody
}

func (o *UpdateUserTenantAssignmentUsingPUTOK) Error() string {
	return fmt.Sprintf("[PUT /v1/tenants/{tenantId}/users/{userId}][%d] updateUserTenantAssignmentUsingPUTOK  %+v", 200, o.Payload)
}

func (o *UpdateUserTenantAssignmentUsingPUTOK) GetPayload() *UpdateUserTenantAssignmentUsingPUTOKBody {
	return o.Payload
}

func (o *UpdateUserTenantAssignmentUsingPUTOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(UpdateUserTenantAssignmentUsingPUTOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateUserTenantAssignmentUsingPUTBadRequest creates a UpdateUserTenantAssignmentUsingPUTBadRequest with default headers values
func NewUpdateUserTenantAssignmentUsingPUTBadRequest() *UpdateUserTenantAssignmentUsingPUTBadRequest {
	return &UpdateUserTenantAssignmentUsingPUTBadRequest{}
}

/*UpdateUserTenantAssignmentUsingPUTBadRequest handles this case with default header values.

HTTP request is malformed.
*/
type UpdateUserTenantAssignmentUsingPUTBadRequest struct {
	Payload *UpdateUserTenantAssignmentUsingPUTBadRequestBody
}

func (o *UpdateUserTenantAssignmentUsingPUTBadRequest) Error() string {
	return fmt.Sprintf("[PUT /v1/tenants/{tenantId}/users/{userId}][%d] updateUserTenantAssignmentUsingPUTBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateUserTenantAssignmentUsingPUTBadRequest) GetPayload() *UpdateUserTenantAssignmentUsingPUTBadRequestBody {
	return o.Payload
}

func (o *UpdateUserTenantAssignmentUsingPUTBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(UpdateUserTenantAssignmentUsingPUTBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateUserTenantAssignmentUsingPUTNotFound creates a UpdateUserTenantAssignmentUsingPUTNotFound with default headers values
func NewUpdateUserTenantAssignmentUsingPUTNotFound() *UpdateUserTenantAssignmentUsingPUTNotFound {
	return &UpdateUserTenantAssignmentUsingPUTNotFound{}
}

/*UpdateUserTenantAssignmentUsingPUTNotFound handles this case with default header values.

Tenant or user with specified id does not exist.
*/
type UpdateUserTenantAssignmentUsingPUTNotFound struct {
	Payload *UpdateUserTenantAssignmentUsingPUTNotFoundBody
}

func (o *UpdateUserTenantAssignmentUsingPUTNotFound) Error() string {
	return fmt.Sprintf("[PUT /v1/tenants/{tenantId}/users/{userId}][%d] updateUserTenantAssignmentUsingPUTNotFound  %+v", 404, o.Payload)
}

func (o *UpdateUserTenantAssignmentUsingPUTNotFound) GetPayload() *UpdateUserTenantAssignmentUsingPUTNotFoundBody {
	return o.Payload
}

func (o *UpdateUserTenantAssignmentUsingPUTNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(UpdateUserTenantAssignmentUsingPUTNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*UpdateUserTenantAssignmentUsingPUTBadRequestBody Response
swagger:model UpdateUserTenantAssignmentUsingPUTBadRequestBody
*/
type UpdateUserTenantAssignmentUsingPUTBadRequestBody struct {

	// message
	// Required: true
	Message *string `json:"message"`
}

// Validate validates this update user tenant assignment using p u t bad request body
func (o *UpdateUserTenantAssignmentUsingPUTBadRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateUserTenantAssignmentUsingPUTBadRequestBody) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("updateUserTenantAssignmentUsingPUTBadRequest"+"."+"message", "body", o.Message); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateUserTenantAssignmentUsingPUTBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateUserTenantAssignmentUsingPUTBadRequestBody) UnmarshalBinary(b []byte) error {
	var res UpdateUserTenantAssignmentUsingPUTBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdateUserTenantAssignmentUsingPUTBody TenantUserAssignmentBean
swagger:model UpdateUserTenantAssignmentUsingPUTBody
*/
type UpdateUserTenantAssignmentUsingPUTBody struct {

	// role
	// Enum: [administrator user]
	Role string `json:"role,omitempty"`

	// user Id
	UserID string `json:"userId,omitempty"`
}

// Validate validates this update user tenant assignment using p u t body
func (o *UpdateUserTenantAssignmentUsingPUTBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateRole(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var updateUserTenantAssignmentUsingPUTBodyTypeRolePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["administrator","user"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		updateUserTenantAssignmentUsingPUTBodyTypeRolePropEnum = append(updateUserTenantAssignmentUsingPUTBodyTypeRolePropEnum, v)
	}
}

const (

	// UpdateUserTenantAssignmentUsingPUTBodyRoleAdministrator captures enum value "administrator"
	UpdateUserTenantAssignmentUsingPUTBodyRoleAdministrator string = "administrator"

	// UpdateUserTenantAssignmentUsingPUTBodyRoleUser captures enum value "user"
	UpdateUserTenantAssignmentUsingPUTBodyRoleUser string = "user"
)

// prop value enum
func (o *UpdateUserTenantAssignmentUsingPUTBody) validateRoleEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, updateUserTenantAssignmentUsingPUTBodyTypeRolePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *UpdateUserTenantAssignmentUsingPUTBody) validateRole(formats strfmt.Registry) error {

	if swag.IsZero(o.Role) { // not required
		return nil
	}

	// value enum
	if err := o.validateRoleEnum("request"+"."+"role", "body", o.Role); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateUserTenantAssignmentUsingPUTBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateUserTenantAssignmentUsingPUTBody) UnmarshalBinary(b []byte) error {
	var res UpdateUserTenantAssignmentUsingPUTBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdateUserTenantAssignmentUsingPUTNotFoundBody Response
swagger:model UpdateUserTenantAssignmentUsingPUTNotFoundBody
*/
type UpdateUserTenantAssignmentUsingPUTNotFoundBody struct {

	// message
	// Required: true
	Message *string `json:"message"`
}

// Validate validates this update user tenant assignment using p u t not found body
func (o *UpdateUserTenantAssignmentUsingPUTNotFoundBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateUserTenantAssignmentUsingPUTNotFoundBody) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("updateUserTenantAssignmentUsingPUTNotFound"+"."+"message", "body", o.Message); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateUserTenantAssignmentUsingPUTNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateUserTenantAssignmentUsingPUTNotFoundBody) UnmarshalBinary(b []byte) error {
	var res UpdateUserTenantAssignmentUsingPUTNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdateUserTenantAssignmentUsingPUTOKBody TenantUserAssignmentBean
swagger:model UpdateUserTenantAssignmentUsingPUTOKBody
*/
type UpdateUserTenantAssignmentUsingPUTOKBody struct {

	// role
	// Enum: [administrator user]
	Role string `json:"role,omitempty"`

	// user Id
	UserID string `json:"userId,omitempty"`
}

// Validate validates this update user tenant assignment using p u t o k body
func (o *UpdateUserTenantAssignmentUsingPUTOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateRole(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var updateUserTenantAssignmentUsingPUTOKBodyTypeRolePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["administrator","user"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		updateUserTenantAssignmentUsingPUTOKBodyTypeRolePropEnum = append(updateUserTenantAssignmentUsingPUTOKBodyTypeRolePropEnum, v)
	}
}

const (

	// UpdateUserTenantAssignmentUsingPUTOKBodyRoleAdministrator captures enum value "administrator"
	UpdateUserTenantAssignmentUsingPUTOKBodyRoleAdministrator string = "administrator"

	// UpdateUserTenantAssignmentUsingPUTOKBodyRoleUser captures enum value "user"
	UpdateUserTenantAssignmentUsingPUTOKBodyRoleUser string = "user"
)

// prop value enum
func (o *UpdateUserTenantAssignmentUsingPUTOKBody) validateRoleEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, updateUserTenantAssignmentUsingPUTOKBodyTypeRolePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *UpdateUserTenantAssignmentUsingPUTOKBody) validateRole(formats strfmt.Registry) error {

	if swag.IsZero(o.Role) { // not required
		return nil
	}

	// value enum
	if err := o.validateRoleEnum("updateUserTenantAssignmentUsingPUTOK"+"."+"role", "body", o.Role); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateUserTenantAssignmentUsingPUTOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateUserTenantAssignmentUsingPUTOKBody) UnmarshalBinary(b []byte) error {
	var res UpdateUserTenantAssignmentUsingPUTOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
