// Code generated by go-swagger; DO NOT EDIT.

package gateways

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GetGatewaysCountUsingGETReader is a Reader for the GetGatewaysCountUsingGET structure.
type GetGatewaysCountUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetGatewaysCountUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetGatewaysCountUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetGatewaysCountUsingGETBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetGatewaysCountUsingGETNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetGatewaysCountUsingGETOK creates a GetGatewaysCountUsingGETOK with default headers values
func NewGetGatewaysCountUsingGETOK() *GetGatewaysCountUsingGETOK {
	return &GetGatewaysCountUsingGETOK{}
}

/*GetGatewaysCountUsingGETOK handles this case with default header values.

Successfully returned count of gateways.
*/
type GetGatewaysCountUsingGETOK struct {
	Payload int64
}

func (o *GetGatewaysCountUsingGETOK) Error() string {
	return fmt.Sprintf("[GET /v1/tenant/{tenantId}/gateways/count][%d] getGatewaysCountUsingGETOK  %+v", 200, o.Payload)
}

func (o *GetGatewaysCountUsingGETOK) GetPayload() int64 {
	return o.Payload
}

func (o *GetGatewaysCountUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetGatewaysCountUsingGETBadRequest creates a GetGatewaysCountUsingGETBadRequest with default headers values
func NewGetGatewaysCountUsingGETBadRequest() *GetGatewaysCountUsingGETBadRequest {
	return &GetGatewaysCountUsingGETBadRequest{}
}

/*GetGatewaysCountUsingGETBadRequest handles this case with default header values.

HTTP request is malformed.
*/
type GetGatewaysCountUsingGETBadRequest struct {
	Payload *GetGatewaysCountUsingGETBadRequestBody
}

func (o *GetGatewaysCountUsingGETBadRequest) Error() string {
	return fmt.Sprintf("[GET /v1/tenant/{tenantId}/gateways/count][%d] getGatewaysCountUsingGETBadRequest  %+v", 400, o.Payload)
}

func (o *GetGatewaysCountUsingGETBadRequest) GetPayload() *GetGatewaysCountUsingGETBadRequestBody {
	return o.Payload
}

func (o *GetGatewaysCountUsingGETBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetGatewaysCountUsingGETBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetGatewaysCountUsingGETNotFound creates a GetGatewaysCountUsingGETNotFound with default headers values
func NewGetGatewaysCountUsingGETNotFound() *GetGatewaysCountUsingGETNotFound {
	return &GetGatewaysCountUsingGETNotFound{}
}

/*GetGatewaysCountUsingGETNotFound handles this case with default header values.

Tenant with specified id does not exist.
*/
type GetGatewaysCountUsingGETNotFound struct {
	Payload *GetGatewaysCountUsingGETNotFoundBody
}

func (o *GetGatewaysCountUsingGETNotFound) Error() string {
	return fmt.Sprintf("[GET /v1/tenant/{tenantId}/gateways/count][%d] getGatewaysCountUsingGETNotFound  %+v", 404, o.Payload)
}

func (o *GetGatewaysCountUsingGETNotFound) GetPayload() *GetGatewaysCountUsingGETNotFoundBody {
	return o.Payload
}

func (o *GetGatewaysCountUsingGETNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetGatewaysCountUsingGETNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*GetGatewaysCountUsingGETBadRequestBody Response
swagger:model GetGatewaysCountUsingGETBadRequestBody
*/
type GetGatewaysCountUsingGETBadRequestBody struct {

	// message
	// Required: true
	Message *string `json:"message"`
}

// Validate validates this get gateways count using g e t bad request body
func (o *GetGatewaysCountUsingGETBadRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetGatewaysCountUsingGETBadRequestBody) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("getGatewaysCountUsingGETBadRequest"+"."+"message", "body", o.Message); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetGatewaysCountUsingGETBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetGatewaysCountUsingGETBadRequestBody) UnmarshalBinary(b []byte) error {
	var res GetGatewaysCountUsingGETBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetGatewaysCountUsingGETNotFoundBody Response
swagger:model GetGatewaysCountUsingGETNotFoundBody
*/
type GetGatewaysCountUsingGETNotFoundBody struct {

	// message
	// Required: true
	Message *string `json:"message"`
}

// Validate validates this get gateways count using g e t not found body
func (o *GetGatewaysCountUsingGETNotFoundBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetGatewaysCountUsingGETNotFoundBody) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("getGatewaysCountUsingGETNotFound"+"."+"message", "body", o.Message); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetGatewaysCountUsingGETNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetGatewaysCountUsingGETNotFoundBody) UnmarshalBinary(b []byte) error {
	var res GetGatewaysCountUsingGETNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
