// Code generated by go-swagger; DO NOT EDIT.

package gateways

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GetDeviceRegistrationPEMCertificateUsingGETReader is a Reader for the GetDeviceRegistrationPEMCertificateUsingGET structure.
type GetDeviceRegistrationPEMCertificateUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetDeviceRegistrationPEMCertificateUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetDeviceRegistrationPEMCertificateUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetDeviceRegistrationPEMCertificateUsingGETBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetDeviceRegistrationPEMCertificateUsingGETNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetDeviceRegistrationPEMCertificateUsingGETOK creates a GetDeviceRegistrationPEMCertificateUsingGETOK with default headers values
func NewGetDeviceRegistrationPEMCertificateUsingGETOK() *GetDeviceRegistrationPEMCertificateUsingGETOK {
	return &GetDeviceRegistrationPEMCertificateUsingGETOK{}
}

/*GetDeviceRegistrationPEMCertificateUsingGETOK handles this case with default header values.

Successfully downloaded device registration pem file.
*/
type GetDeviceRegistrationPEMCertificateUsingGETOK struct {
	Payload *GetDeviceRegistrationPEMCertificateUsingGETOKBody
}

func (o *GetDeviceRegistrationPEMCertificateUsingGETOK) Error() string {
	return fmt.Sprintf("[GET /v1/tenant/{tenantId}/gateways/{gatewayId}/deviceRegistrations/clientCertificate/pem][%d] getDeviceRegistrationPEMCertificateUsingGETOK  %+v", 200, o.Payload)
}

func (o *GetDeviceRegistrationPEMCertificateUsingGETOK) GetPayload() *GetDeviceRegistrationPEMCertificateUsingGETOKBody {
	return o.Payload
}

func (o *GetDeviceRegistrationPEMCertificateUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetDeviceRegistrationPEMCertificateUsingGETOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDeviceRegistrationPEMCertificateUsingGETBadRequest creates a GetDeviceRegistrationPEMCertificateUsingGETBadRequest with default headers values
func NewGetDeviceRegistrationPEMCertificateUsingGETBadRequest() *GetDeviceRegistrationPEMCertificateUsingGETBadRequest {
	return &GetDeviceRegistrationPEMCertificateUsingGETBadRequest{}
}

/*GetDeviceRegistrationPEMCertificateUsingGETBadRequest handles this case with default header values.

HTTP request is malformed.
*/
type GetDeviceRegistrationPEMCertificateUsingGETBadRequest struct {
	Payload *GetDeviceRegistrationPEMCertificateUsingGETBadRequestBody
}

func (o *GetDeviceRegistrationPEMCertificateUsingGETBadRequest) Error() string {
	return fmt.Sprintf("[GET /v1/tenant/{tenantId}/gateways/{gatewayId}/deviceRegistrations/clientCertificate/pem][%d] getDeviceRegistrationPEMCertificateUsingGETBadRequest  %+v", 400, o.Payload)
}

func (o *GetDeviceRegistrationPEMCertificateUsingGETBadRequest) GetPayload() *GetDeviceRegistrationPEMCertificateUsingGETBadRequestBody {
	return o.Payload
}

func (o *GetDeviceRegistrationPEMCertificateUsingGETBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetDeviceRegistrationPEMCertificateUsingGETBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDeviceRegistrationPEMCertificateUsingGETNotFound creates a GetDeviceRegistrationPEMCertificateUsingGETNotFound with default headers values
func NewGetDeviceRegistrationPEMCertificateUsingGETNotFound() *GetDeviceRegistrationPEMCertificateUsingGETNotFound {
	return &GetDeviceRegistrationPEMCertificateUsingGETNotFound{}
}

/*GetDeviceRegistrationPEMCertificateUsingGETNotFound handles this case with default header values.

Gateway with specified id does not exist.
*/
type GetDeviceRegistrationPEMCertificateUsingGETNotFound struct {
	Payload *GetDeviceRegistrationPEMCertificateUsingGETNotFoundBody
}

func (o *GetDeviceRegistrationPEMCertificateUsingGETNotFound) Error() string {
	return fmt.Sprintf("[GET /v1/tenant/{tenantId}/gateways/{gatewayId}/deviceRegistrations/clientCertificate/pem][%d] getDeviceRegistrationPEMCertificateUsingGETNotFound  %+v", 404, o.Payload)
}

func (o *GetDeviceRegistrationPEMCertificateUsingGETNotFound) GetPayload() *GetDeviceRegistrationPEMCertificateUsingGETNotFoundBody {
	return o.Payload
}

func (o *GetDeviceRegistrationPEMCertificateUsingGETNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetDeviceRegistrationPEMCertificateUsingGETNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*GetDeviceRegistrationPEMCertificateUsingGETBadRequestBody Response
swagger:model GetDeviceRegistrationPEMCertificateUsingGETBadRequestBody
*/
type GetDeviceRegistrationPEMCertificateUsingGETBadRequestBody struct {

	// message
	// Required: true
	Message *string `json:"message"`
}

// Validate validates this get device registration p e m certificate using g e t bad request body
func (o *GetDeviceRegistrationPEMCertificateUsingGETBadRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetDeviceRegistrationPEMCertificateUsingGETBadRequestBody) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("getDeviceRegistrationPEMCertificateUsingGETBadRequest"+"."+"message", "body", o.Message); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetDeviceRegistrationPEMCertificateUsingGETBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetDeviceRegistrationPEMCertificateUsingGETBadRequestBody) UnmarshalBinary(b []byte) error {
	var res GetDeviceRegistrationPEMCertificateUsingGETBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetDeviceRegistrationPEMCertificateUsingGETNotFoundBody Response
swagger:model GetDeviceRegistrationPEMCertificateUsingGETNotFoundBody
*/
type GetDeviceRegistrationPEMCertificateUsingGETNotFoundBody struct {

	// message
	// Required: true
	Message *string `json:"message"`
}

// Validate validates this get device registration p e m certificate using g e t not found body
func (o *GetDeviceRegistrationPEMCertificateUsingGETNotFoundBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetDeviceRegistrationPEMCertificateUsingGETNotFoundBody) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("getDeviceRegistrationPEMCertificateUsingGETNotFound"+"."+"message", "body", o.Message); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetDeviceRegistrationPEMCertificateUsingGETNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetDeviceRegistrationPEMCertificateUsingGETNotFoundBody) UnmarshalBinary(b []byte) error {
	var res GetDeviceRegistrationPEMCertificateUsingGETNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetDeviceRegistrationPEMCertificateUsingGETOKBody ClientCertificateAuthenticationBean
swagger:model GetDeviceRegistrationPEMCertificateUsingGETOKBody
*/
type GetDeviceRegistrationPEMCertificateUsingGETOKBody struct {

	// csr
	Csr string `json:"csr,omitempty"`

	// p12
	// Read Only: true
	P12 string `json:"p12,omitempty"`

	// pem
	// Read Only: true
	Pem string `json:"pem,omitempty"`

	// secret
	// Read Only: true
	Secret string `json:"secret,omitempty"`

	// The type of the authentication mechanism
	// Required: true
	// Enum: [clientCertificate]
	Type *string `json:"type"`
}

// Validate validates this get device registration p e m certificate using g e t o k body
func (o *GetDeviceRegistrationPEMCertificateUsingGETOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var getDeviceRegistrationPEMCertificateUsingGETOKBodyTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["clientCertificate"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		getDeviceRegistrationPEMCertificateUsingGETOKBodyTypeTypePropEnum = append(getDeviceRegistrationPEMCertificateUsingGETOKBodyTypeTypePropEnum, v)
	}
}

const (

	// GetDeviceRegistrationPEMCertificateUsingGETOKBodyTypeClientCertificate captures enum value "clientCertificate"
	GetDeviceRegistrationPEMCertificateUsingGETOKBodyTypeClientCertificate string = "clientCertificate"
)

// prop value enum
func (o *GetDeviceRegistrationPEMCertificateUsingGETOKBody) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, getDeviceRegistrationPEMCertificateUsingGETOKBodyTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *GetDeviceRegistrationPEMCertificateUsingGETOKBody) validateType(formats strfmt.Registry) error {

	if err := validate.Required("getDeviceRegistrationPEMCertificateUsingGETOK"+"."+"type", "body", o.Type); err != nil {
		return err
	}

	// value enum
	if err := o.validateTypeEnum("getDeviceRegistrationPEMCertificateUsingGETOK"+"."+"type", "body", *o.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetDeviceRegistrationPEMCertificateUsingGETOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetDeviceRegistrationPEMCertificateUsingGETOKBody) UnmarshalBinary(b []byte) error {
	var res GetDeviceRegistrationPEMCertificateUsingGETOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
