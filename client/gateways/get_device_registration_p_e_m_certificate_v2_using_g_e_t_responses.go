// Code generated by go-swagger; DO NOT EDIT.

package gateways

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GetDeviceRegistrationPEMCertificateV2UsingGETReader is a Reader for the GetDeviceRegistrationPEMCertificateV2UsingGET structure.
type GetDeviceRegistrationPEMCertificateV2UsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetDeviceRegistrationPEMCertificateV2UsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetDeviceRegistrationPEMCertificateV2UsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetDeviceRegistrationPEMCertificateV2UsingGETBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetDeviceRegistrationPEMCertificateV2UsingGETNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetDeviceRegistrationPEMCertificateV2UsingGETOK creates a GetDeviceRegistrationPEMCertificateV2UsingGETOK with default headers values
func NewGetDeviceRegistrationPEMCertificateV2UsingGETOK() *GetDeviceRegistrationPEMCertificateV2UsingGETOK {
	return &GetDeviceRegistrationPEMCertificateV2UsingGETOK{}
}

/*GetDeviceRegistrationPEMCertificateV2UsingGETOK handles this case with default header values.

Successfully revoked device registration certificate.
*/
type GetDeviceRegistrationPEMCertificateV2UsingGETOK struct {
	Payload *GetDeviceRegistrationPEMCertificateV2UsingGETOKBody
}

func (o *GetDeviceRegistrationPEMCertificateV2UsingGETOK) Error() string {
	return fmt.Sprintf("[GET /v2/tenant/{tenantId}/gateways/{gatewayId}/deviceRegistrations/clientCertificate/pem][%d] getDeviceRegistrationPEMCertificateV2UsingGETOK  %+v", 200, o.Payload)
}

func (o *GetDeviceRegistrationPEMCertificateV2UsingGETOK) GetPayload() *GetDeviceRegistrationPEMCertificateV2UsingGETOKBody {
	return o.Payload
}

func (o *GetDeviceRegistrationPEMCertificateV2UsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetDeviceRegistrationPEMCertificateV2UsingGETOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDeviceRegistrationPEMCertificateV2UsingGETBadRequest creates a GetDeviceRegistrationPEMCertificateV2UsingGETBadRequest with default headers values
func NewGetDeviceRegistrationPEMCertificateV2UsingGETBadRequest() *GetDeviceRegistrationPEMCertificateV2UsingGETBadRequest {
	return &GetDeviceRegistrationPEMCertificateV2UsingGETBadRequest{}
}

/*GetDeviceRegistrationPEMCertificateV2UsingGETBadRequest handles this case with default header values.

HTTP request is malformed.
*/
type GetDeviceRegistrationPEMCertificateV2UsingGETBadRequest struct {
	Payload *GetDeviceRegistrationPEMCertificateV2UsingGETBadRequestBody
}

func (o *GetDeviceRegistrationPEMCertificateV2UsingGETBadRequest) Error() string {
	return fmt.Sprintf("[GET /v2/tenant/{tenantId}/gateways/{gatewayId}/deviceRegistrations/clientCertificate/pem][%d] getDeviceRegistrationPEMCertificateV2UsingGETBadRequest  %+v", 400, o.Payload)
}

func (o *GetDeviceRegistrationPEMCertificateV2UsingGETBadRequest) GetPayload() *GetDeviceRegistrationPEMCertificateV2UsingGETBadRequestBody {
	return o.Payload
}

func (o *GetDeviceRegistrationPEMCertificateV2UsingGETBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetDeviceRegistrationPEMCertificateV2UsingGETBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDeviceRegistrationPEMCertificateV2UsingGETNotFound creates a GetDeviceRegistrationPEMCertificateV2UsingGETNotFound with default headers values
func NewGetDeviceRegistrationPEMCertificateV2UsingGETNotFound() *GetDeviceRegistrationPEMCertificateV2UsingGETNotFound {
	return &GetDeviceRegistrationPEMCertificateV2UsingGETNotFound{}
}

/*GetDeviceRegistrationPEMCertificateV2UsingGETNotFound handles this case with default header values.

Certificate does not exist.
*/
type GetDeviceRegistrationPEMCertificateV2UsingGETNotFound struct {
	Payload *GetDeviceRegistrationPEMCertificateV2UsingGETNotFoundBody
}

func (o *GetDeviceRegistrationPEMCertificateV2UsingGETNotFound) Error() string {
	return fmt.Sprintf("[GET /v2/tenant/{tenantId}/gateways/{gatewayId}/deviceRegistrations/clientCertificate/pem][%d] getDeviceRegistrationPEMCertificateV2UsingGETNotFound  %+v", 404, o.Payload)
}

func (o *GetDeviceRegistrationPEMCertificateV2UsingGETNotFound) GetPayload() *GetDeviceRegistrationPEMCertificateV2UsingGETNotFoundBody {
	return o.Payload
}

func (o *GetDeviceRegistrationPEMCertificateV2UsingGETNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetDeviceRegistrationPEMCertificateV2UsingGETNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*GetDeviceRegistrationPEMCertificateV2UsingGETBadRequestBody Response
swagger:model GetDeviceRegistrationPEMCertificateV2UsingGETBadRequestBody
*/
type GetDeviceRegistrationPEMCertificateV2UsingGETBadRequestBody struct {

	// message
	// Required: true
	Message *string `json:"message"`
}

// Validate validates this get device registration p e m certificate v2 using g e t bad request body
func (o *GetDeviceRegistrationPEMCertificateV2UsingGETBadRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetDeviceRegistrationPEMCertificateV2UsingGETBadRequestBody) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("getDeviceRegistrationPEMCertificateV2UsingGETBadRequest"+"."+"message", "body", o.Message); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetDeviceRegistrationPEMCertificateV2UsingGETBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetDeviceRegistrationPEMCertificateV2UsingGETBadRequestBody) UnmarshalBinary(b []byte) error {
	var res GetDeviceRegistrationPEMCertificateV2UsingGETBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetDeviceRegistrationPEMCertificateV2UsingGETNotFoundBody Response
swagger:model GetDeviceRegistrationPEMCertificateV2UsingGETNotFoundBody
*/
type GetDeviceRegistrationPEMCertificateV2UsingGETNotFoundBody struct {

	// message
	// Required: true
	Message *string `json:"message"`
}

// Validate validates this get device registration p e m certificate v2 using g e t not found body
func (o *GetDeviceRegistrationPEMCertificateV2UsingGETNotFoundBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetDeviceRegistrationPEMCertificateV2UsingGETNotFoundBody) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("getDeviceRegistrationPEMCertificateV2UsingGETNotFound"+"."+"message", "body", o.Message); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetDeviceRegistrationPEMCertificateV2UsingGETNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetDeviceRegistrationPEMCertificateV2UsingGETNotFoundBody) UnmarshalBinary(b []byte) error {
	var res GetDeviceRegistrationPEMCertificateV2UsingGETNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetDeviceRegistrationPEMCertificateV2UsingGETOKBody Response
swagger:model GetDeviceRegistrationPEMCertificateV2UsingGETOKBody
*/
type GetDeviceRegistrationPEMCertificateV2UsingGETOKBody struct {

	// message
	// Required: true
	Message *string `json:"message"`
}

// Validate validates this get device registration p e m certificate v2 using g e t o k body
func (o *GetDeviceRegistrationPEMCertificateV2UsingGETOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetDeviceRegistrationPEMCertificateV2UsingGETOKBody) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("getDeviceRegistrationPEMCertificateV2UsingGETOK"+"."+"message", "body", o.Message); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetDeviceRegistrationPEMCertificateV2UsingGETOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetDeviceRegistrationPEMCertificateV2UsingGETOKBody) UnmarshalBinary(b []byte) error {
	var res GetDeviceRegistrationPEMCertificateV2UsingGETOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
