// Code generated by go-swagger; DO NOT EDIT.

package gateways

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RevokeDeviceRegistrationCertificateUsingDELETEReader is a Reader for the RevokeDeviceRegistrationCertificateUsingDELETE structure.
type RevokeDeviceRegistrationCertificateUsingDELETEReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RevokeDeviceRegistrationCertificateUsingDELETEReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewRevokeDeviceRegistrationCertificateUsingDELETEOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewRevokeDeviceRegistrationCertificateUsingDELETEBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewRevokeDeviceRegistrationCertificateUsingDELETENotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewRevokeDeviceRegistrationCertificateUsingDELETEOK creates a RevokeDeviceRegistrationCertificateUsingDELETEOK with default headers values
func NewRevokeDeviceRegistrationCertificateUsingDELETEOK() *RevokeDeviceRegistrationCertificateUsingDELETEOK {
	return &RevokeDeviceRegistrationCertificateUsingDELETEOK{}
}

/*RevokeDeviceRegistrationCertificateUsingDELETEOK handles this case with default header values.

Successfully revoked device registration certificate.
*/
type RevokeDeviceRegistrationCertificateUsingDELETEOK struct {
	Payload *RevokeDeviceRegistrationCertificateUsingDELETEOKBody
}

func (o *RevokeDeviceRegistrationCertificateUsingDELETEOK) Error() string {
	return fmt.Sprintf("[DELETE /v1/tenant/{tenantId}/gateways/{gatewayId}/deviceRegistrations/clientCertificate/{fingerprint}][%d] revokeDeviceRegistrationCertificateUsingDELETEOK  %+v", 200, o.Payload)
}

func (o *RevokeDeviceRegistrationCertificateUsingDELETEOK) GetPayload() *RevokeDeviceRegistrationCertificateUsingDELETEOKBody {
	return o.Payload
}

func (o *RevokeDeviceRegistrationCertificateUsingDELETEOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(RevokeDeviceRegistrationCertificateUsingDELETEOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRevokeDeviceRegistrationCertificateUsingDELETEBadRequest creates a RevokeDeviceRegistrationCertificateUsingDELETEBadRequest with default headers values
func NewRevokeDeviceRegistrationCertificateUsingDELETEBadRequest() *RevokeDeviceRegistrationCertificateUsingDELETEBadRequest {
	return &RevokeDeviceRegistrationCertificateUsingDELETEBadRequest{}
}

/*RevokeDeviceRegistrationCertificateUsingDELETEBadRequest handles this case with default header values.

HTTP request is malformed.
*/
type RevokeDeviceRegistrationCertificateUsingDELETEBadRequest struct {
	Payload *RevokeDeviceRegistrationCertificateUsingDELETEBadRequestBody
}

func (o *RevokeDeviceRegistrationCertificateUsingDELETEBadRequest) Error() string {
	return fmt.Sprintf("[DELETE /v1/tenant/{tenantId}/gateways/{gatewayId}/deviceRegistrations/clientCertificate/{fingerprint}][%d] revokeDeviceRegistrationCertificateUsingDELETEBadRequest  %+v", 400, o.Payload)
}

func (o *RevokeDeviceRegistrationCertificateUsingDELETEBadRequest) GetPayload() *RevokeDeviceRegistrationCertificateUsingDELETEBadRequestBody {
	return o.Payload
}

func (o *RevokeDeviceRegistrationCertificateUsingDELETEBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(RevokeDeviceRegistrationCertificateUsingDELETEBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRevokeDeviceRegistrationCertificateUsingDELETENotFound creates a RevokeDeviceRegistrationCertificateUsingDELETENotFound with default headers values
func NewRevokeDeviceRegistrationCertificateUsingDELETENotFound() *RevokeDeviceRegistrationCertificateUsingDELETENotFound {
	return &RevokeDeviceRegistrationCertificateUsingDELETENotFound{}
}

/*RevokeDeviceRegistrationCertificateUsingDELETENotFound handles this case with default header values.

Certificate does not exist.
*/
type RevokeDeviceRegistrationCertificateUsingDELETENotFound struct {
	Payload *RevokeDeviceRegistrationCertificateUsingDELETENotFoundBody
}

func (o *RevokeDeviceRegistrationCertificateUsingDELETENotFound) Error() string {
	return fmt.Sprintf("[DELETE /v1/tenant/{tenantId}/gateways/{gatewayId}/deviceRegistrations/clientCertificate/{fingerprint}][%d] revokeDeviceRegistrationCertificateUsingDELETENotFound  %+v", 404, o.Payload)
}

func (o *RevokeDeviceRegistrationCertificateUsingDELETENotFound) GetPayload() *RevokeDeviceRegistrationCertificateUsingDELETENotFoundBody {
	return o.Payload
}

func (o *RevokeDeviceRegistrationCertificateUsingDELETENotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(RevokeDeviceRegistrationCertificateUsingDELETENotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*RevokeDeviceRegistrationCertificateUsingDELETEBadRequestBody Response
swagger:model RevokeDeviceRegistrationCertificateUsingDELETEBadRequestBody
*/
type RevokeDeviceRegistrationCertificateUsingDELETEBadRequestBody struct {

	// message
	// Required: true
	Message *string `json:"message"`
}

// Validate validates this revoke device registration certificate using d e l e t e bad request body
func (o *RevokeDeviceRegistrationCertificateUsingDELETEBadRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *RevokeDeviceRegistrationCertificateUsingDELETEBadRequestBody) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("revokeDeviceRegistrationCertificateUsingDELETEBadRequest"+"."+"message", "body", o.Message); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *RevokeDeviceRegistrationCertificateUsingDELETEBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RevokeDeviceRegistrationCertificateUsingDELETEBadRequestBody) UnmarshalBinary(b []byte) error {
	var res RevokeDeviceRegistrationCertificateUsingDELETEBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*RevokeDeviceRegistrationCertificateUsingDELETENotFoundBody Response
swagger:model RevokeDeviceRegistrationCertificateUsingDELETENotFoundBody
*/
type RevokeDeviceRegistrationCertificateUsingDELETENotFoundBody struct {

	// message
	// Required: true
	Message *string `json:"message"`
}

// Validate validates this revoke device registration certificate using d e l e t e not found body
func (o *RevokeDeviceRegistrationCertificateUsingDELETENotFoundBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *RevokeDeviceRegistrationCertificateUsingDELETENotFoundBody) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("revokeDeviceRegistrationCertificateUsingDELETENotFound"+"."+"message", "body", o.Message); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *RevokeDeviceRegistrationCertificateUsingDELETENotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RevokeDeviceRegistrationCertificateUsingDELETENotFoundBody) UnmarshalBinary(b []byte) error {
	var res RevokeDeviceRegistrationCertificateUsingDELETENotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*RevokeDeviceRegistrationCertificateUsingDELETEOKBody Response
swagger:model RevokeDeviceRegistrationCertificateUsingDELETEOKBody
*/
type RevokeDeviceRegistrationCertificateUsingDELETEOKBody struct {

	// message
	// Required: true
	Message *string `json:"message"`
}

// Validate validates this revoke device registration certificate using d e l e t e o k body
func (o *RevokeDeviceRegistrationCertificateUsingDELETEOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *RevokeDeviceRegistrationCertificateUsingDELETEOKBody) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("revokeDeviceRegistrationCertificateUsingDELETEOK"+"."+"message", "body", o.Message); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *RevokeDeviceRegistrationCertificateUsingDELETEOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RevokeDeviceRegistrationCertificateUsingDELETEOKBody) UnmarshalBinary(b []byte) error {
	var res RevokeDeviceRegistrationCertificateUsingDELETEOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
