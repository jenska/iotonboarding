// Code generated by go-swagger; DO NOT EDIT.

package gateways

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GetGatewayBundleUsingGETReader is a Reader for the GetGatewayBundleUsingGET structure.
type GetGatewayBundleUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetGatewayBundleUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetGatewayBundleUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetGatewayBundleUsingGETBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetGatewayBundleUsingGETNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetGatewayBundleUsingGETOK creates a GetGatewayBundleUsingGETOK with default headers values
func NewGetGatewayBundleUsingGETOK() *GetGatewayBundleUsingGETOK {
	return &GetGatewayBundleUsingGETOK{}
}

/*GetGatewayBundleUsingGETOK handles this case with default header values.

Successfully returned OSGi bundle.
*/
type GetGatewayBundleUsingGETOK struct {
	Payload *GetGatewayBundleUsingGETOKBody
}

func (o *GetGatewayBundleUsingGETOK) Error() string {
	return fmt.Sprintf("[GET /v1/tenant/{tenantId}/gateways/{gatewayId}/bundles/{bundleId}][%d] getGatewayBundleUsingGETOK  %+v", 200, o.Payload)
}

func (o *GetGatewayBundleUsingGETOK) GetPayload() *GetGatewayBundleUsingGETOKBody {
	return o.Payload
}

func (o *GetGatewayBundleUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetGatewayBundleUsingGETOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetGatewayBundleUsingGETBadRequest creates a GetGatewayBundleUsingGETBadRequest with default headers values
func NewGetGatewayBundleUsingGETBadRequest() *GetGatewayBundleUsingGETBadRequest {
	return &GetGatewayBundleUsingGETBadRequest{}
}

/*GetGatewayBundleUsingGETBadRequest handles this case with default header values.

HTTP request is malformed.
*/
type GetGatewayBundleUsingGETBadRequest struct {
	Payload *GetGatewayBundleUsingGETBadRequestBody
}

func (o *GetGatewayBundleUsingGETBadRequest) Error() string {
	return fmt.Sprintf("[GET /v1/tenant/{tenantId}/gateways/{gatewayId}/bundles/{bundleId}][%d] getGatewayBundleUsingGETBadRequest  %+v", 400, o.Payload)
}

func (o *GetGatewayBundleUsingGETBadRequest) GetPayload() *GetGatewayBundleUsingGETBadRequestBody {
	return o.Payload
}

func (o *GetGatewayBundleUsingGETBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetGatewayBundleUsingGETBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetGatewayBundleUsingGETNotFound creates a GetGatewayBundleUsingGETNotFound with default headers values
func NewGetGatewayBundleUsingGETNotFound() *GetGatewayBundleUsingGETNotFound {
	return &GetGatewayBundleUsingGETNotFound{}
}

/*GetGatewayBundleUsingGETNotFound handles this case with default header values.

Gateway with specified id does not exist.
*/
type GetGatewayBundleUsingGETNotFound struct {
	Payload *GetGatewayBundleUsingGETNotFoundBody
}

func (o *GetGatewayBundleUsingGETNotFound) Error() string {
	return fmt.Sprintf("[GET /v1/tenant/{tenantId}/gateways/{gatewayId}/bundles/{bundleId}][%d] getGatewayBundleUsingGETNotFound  %+v", 404, o.Payload)
}

func (o *GetGatewayBundleUsingGETNotFound) GetPayload() *GetGatewayBundleUsingGETNotFoundBody {
	return o.Payload
}

func (o *GetGatewayBundleUsingGETNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetGatewayBundleUsingGETNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*GetGatewayBundleUsingGETBadRequestBody Response
swagger:model GetGatewayBundleUsingGETBadRequestBody
*/
type GetGatewayBundleUsingGETBadRequestBody struct {

	// message
	// Required: true
	Message *string `json:"message"`
}

// Validate validates this get gateway bundle using g e t bad request body
func (o *GetGatewayBundleUsingGETBadRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetGatewayBundleUsingGETBadRequestBody) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("getGatewayBundleUsingGETBadRequest"+"."+"message", "body", o.Message); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetGatewayBundleUsingGETBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetGatewayBundleUsingGETBadRequestBody) UnmarshalBinary(b []byte) error {
	var res GetGatewayBundleUsingGETBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetGatewayBundleUsingGETNotFoundBody Response
swagger:model GetGatewayBundleUsingGETNotFoundBody
*/
type GetGatewayBundleUsingGETNotFoundBody struct {

	// message
	// Required: true
	Message *string `json:"message"`
}

// Validate validates this get gateway bundle using g e t not found body
func (o *GetGatewayBundleUsingGETNotFoundBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetGatewayBundleUsingGETNotFoundBody) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("getGatewayBundleUsingGETNotFound"+"."+"message", "body", o.Message); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetGatewayBundleUsingGETNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetGatewayBundleUsingGETNotFoundBody) UnmarshalBinary(b []byte) error {
	var res GetGatewayBundleUsingGETNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetGatewayBundleUsingGETOKBody BundleInfoBean
swagger:model GetGatewayBundleUsingGETOKBody
*/
type GetGatewayBundleUsingGETOKBody struct {

	// A unique identifier of a OSGi bundle. Is generated by the system. This field is an immutable.
	ID string `json:"id,omitempty"`

	// The name of the OSGi bundle
	// Required: true
	Name *string `json:"name"`

	// The current state of the OSGi bundle
	// Enum: [active starting stopping resolved installed uninstalled]
	State string `json:"state,omitempty"`
}

// Validate validates this get gateway bundle using g e t o k body
func (o *GetGatewayBundleUsingGETOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateState(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetGatewayBundleUsingGETOKBody) validateName(formats strfmt.Registry) error {

	if err := validate.Required("getGatewayBundleUsingGETOK"+"."+"name", "body", o.Name); err != nil {
		return err
	}

	return nil
}

var getGatewayBundleUsingGETOKBodyTypeStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["active","starting","stopping","resolved","installed","uninstalled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		getGatewayBundleUsingGETOKBodyTypeStatePropEnum = append(getGatewayBundleUsingGETOKBodyTypeStatePropEnum, v)
	}
}

const (

	// GetGatewayBundleUsingGETOKBodyStateActive captures enum value "active"
	GetGatewayBundleUsingGETOKBodyStateActive string = "active"

	// GetGatewayBundleUsingGETOKBodyStateStarting captures enum value "starting"
	GetGatewayBundleUsingGETOKBodyStateStarting string = "starting"

	// GetGatewayBundleUsingGETOKBodyStateStopping captures enum value "stopping"
	GetGatewayBundleUsingGETOKBodyStateStopping string = "stopping"

	// GetGatewayBundleUsingGETOKBodyStateResolved captures enum value "resolved"
	GetGatewayBundleUsingGETOKBodyStateResolved string = "resolved"

	// GetGatewayBundleUsingGETOKBodyStateInstalled captures enum value "installed"
	GetGatewayBundleUsingGETOKBodyStateInstalled string = "installed"

	// GetGatewayBundleUsingGETOKBodyStateUninstalled captures enum value "uninstalled"
	GetGatewayBundleUsingGETOKBodyStateUninstalled string = "uninstalled"
)

// prop value enum
func (o *GetGatewayBundleUsingGETOKBody) validateStateEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, getGatewayBundleUsingGETOKBodyTypeStatePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *GetGatewayBundleUsingGETOKBody) validateState(formats strfmt.Registry) error {

	if swag.IsZero(o.State) { // not required
		return nil
	}

	// value enum
	if err := o.validateStateEnum("getGatewayBundleUsingGETOK"+"."+"state", "body", o.State); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetGatewayBundleUsingGETOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetGatewayBundleUsingGETOKBody) UnmarshalBinary(b []byte) error {
	var res GetGatewayBundleUsingGETOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
