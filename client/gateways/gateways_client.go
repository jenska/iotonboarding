// Code generated by go-swagger; DO NOT EDIT.

package gateways

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new gateways API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for gateways API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	CreateCustomPropertyForGateway(params *CreateCustomPropertyForGatewayParams, authInfo runtime.ClientAuthInfoWriter) (*CreateCustomPropertyForGatewayOK, error)

	CreateGatewayPEMCertificateUsingPOST(params *CreateGatewayPEMCertificateUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter) (*CreateGatewayPEMCertificateUsingPOSTOK, error)

	DeleteCustomPropertyForGateway(params *DeleteCustomPropertyForGatewayParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteCustomPropertyForGatewayOK, error)

	DeleteGatewayBundleUsingDELETE(params *DeleteGatewayBundleUsingDELETEParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteGatewayBundleUsingDELETEOK, error)

	DeleteGatewayUsingDELETE(params *DeleteGatewayUsingDELETEParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteGatewayUsingDELETEOK, error)

	GetDeviceRegistrationP12CertificateUsingGET(params *GetDeviceRegistrationP12CertificateUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*GetDeviceRegistrationP12CertificateUsingGETOK, error)

	GetDeviceRegistrationPEMCertificateUsingGET(params *GetDeviceRegistrationPEMCertificateUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*GetDeviceRegistrationPEMCertificateUsingGETOK, error)

	GetDeviceRegistrationPEMCertificateV2UsingGET(params *GetDeviceRegistrationPEMCertificateV2UsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*GetDeviceRegistrationPEMCertificateV2UsingGETOK, error)

	GetGatewayBundleUsingGET(params *GetGatewayBundleUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*GetGatewayBundleUsingGETOK, error)

	GetGatewayConfigurationUsingGET(params *GetGatewayConfigurationUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*GetGatewayConfigurationUsingGETOK, error)

	GetGatewayUsingGET(params *GetGatewayUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*GetGatewayUsingGETOK, error)

	GetGatewaysCountUsingGET(params *GetGatewaysCountUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*GetGatewaysCountUsingGETOK, error)

	GetGatewaysUsingGET(params *GetGatewaysUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*GetGatewaysUsingGETOK, error)

	ListDeviceRegistrationCertificatesUsingGET(params *ListDeviceRegistrationCertificatesUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*ListDeviceRegistrationCertificatesUsingGETOK, error)

	ListGatewayCertificatesUsingGET(params *ListGatewayCertificatesUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*ListGatewayCertificatesUsingGETOK, error)

	RevokeDeviceRegistrationCertificateUsingDELETE(params *RevokeDeviceRegistrationCertificateUsingDELETEParams, authInfo runtime.ClientAuthInfoWriter) (*RevokeDeviceRegistrationCertificateUsingDELETEOK, error)

	RevokeGatewayCertificateUsingDELETE(params *RevokeGatewayCertificateUsingDELETEParams, authInfo runtime.ClientAuthInfoWriter) (*RevokeGatewayCertificateUsingDELETEOK, error)

	StartGatewayBundleUsingPOST(params *StartGatewayBundleUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter) (*StartGatewayBundleUsingPOSTOK, error)

	StopGatewayBundleUsingPOST(params *StopGatewayBundleUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter) (*StopGatewayBundleUsingPOSTOK, error)

	UpdateCustomPropertyForGateway(params *UpdateCustomPropertyForGatewayParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateCustomPropertyForGatewayOK, error)

	UpdateGatewayConfigurationUsingPUT(params *UpdateGatewayConfigurationUsingPUTParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateGatewayConfigurationUsingPUTOK, error)

	UpdateGatewayUsingPUT(params *UpdateGatewayUsingPUTParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateGatewayUsingPUTOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateCustomPropertyForGateway adds a custom property to a gateway

  The endpoint is used to add a custom property to the gateway associated to the given id.
*/
func (a *Client) CreateCustomPropertyForGateway(params *CreateCustomPropertyForGatewayParams, authInfo runtime.ClientAuthInfoWriter) (*CreateCustomPropertyForGatewayOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateCustomPropertyForGatewayParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createCustomPropertyForGateway",
		Method:             "POST",
		PathPattern:        "/v1/tenant/{tenantId}/gateways/{gatewayId}/customProperties",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateCustomPropertyForGatewayReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateCustomPropertyForGatewayOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createCustomPropertyForGateway: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateGatewayPEMCertificateUsingPOST creates a gateway certificate in p e m format

  The endpoint is used to create a gateway specific certificate in PEM format for authentication.
*/
func (a *Client) CreateGatewayPEMCertificateUsingPOST(params *CreateGatewayPEMCertificateUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter) (*CreateGatewayPEMCertificateUsingPOSTOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateGatewayPEMCertificateUsingPOSTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createGatewayPEMCertificateUsingPOST",
		Method:             "POST",
		PathPattern:        "/v1/tenant/{tenantId}/gateways/{gatewayId}/authentications/clientCertificate/pem",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateGatewayPEMCertificateUsingPOSTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateGatewayPEMCertificateUsingPOSTOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createGatewayPEMCertificateUsingPOST: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteCustomPropertyForGateway deletes a custom property from a gateway

  This endpoint is used to delete a custom property from the gateway associated to the given id.
*/
func (a *Client) DeleteCustomPropertyForGateway(params *DeleteCustomPropertyForGatewayParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteCustomPropertyForGatewayOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteCustomPropertyForGatewayParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteCustomPropertyForGateway",
		Method:             "DELETE",
		PathPattern:        "/v1/tenant/{tenantId}/gateways/{gatewayId}/customProperties/{key}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteCustomPropertyForGatewayReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteCustomPropertyForGatewayOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteCustomPropertyForGateway: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteGatewayBundleUsingDELETE removes an o s gi bundle from a gateway

  This endpoint is used to remove an OSGi bundle from the gateway associated to the given id.
*/
func (a *Client) DeleteGatewayBundleUsingDELETE(params *DeleteGatewayBundleUsingDELETEParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteGatewayBundleUsingDELETEOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteGatewayBundleUsingDELETEParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteGatewayBundleUsingDELETE",
		Method:             "DELETE",
		PathPattern:        "/v1/tenant/{tenantId}/gateways/{gatewayId}/bundles/{bundleId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteGatewayBundleUsingDELETEReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteGatewayBundleUsingDELETEOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteGatewayBundleUsingDELETE: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteGatewayUsingDELETE deletes a gateway

  The endpoint is used to delete the gateway associated to the given id.
*/
func (a *Client) DeleteGatewayUsingDELETE(params *DeleteGatewayUsingDELETEParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteGatewayUsingDELETEOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteGatewayUsingDELETEParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteGatewayUsingDELETE",
		Method:             "DELETE",
		PathPattern:        "/v1/tenant/{tenantId}/gateways/{gatewayId}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteGatewayUsingDELETEReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteGatewayUsingDELETEOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteGatewayUsingDELETE: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDeviceRegistrationP12CertificateUsingGET downloads a device registration p12 file

  The endpoint is used to download gateway specific p12 file for the registration of a device.
*/
func (a *Client) GetDeviceRegistrationP12CertificateUsingGET(params *GetDeviceRegistrationP12CertificateUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*GetDeviceRegistrationP12CertificateUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDeviceRegistrationP12CertificateUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDeviceRegistrationP12CertificateUsingGET",
		Method:             "GET",
		PathPattern:        "/v1/tenant/{tenantId}/gateways/{gatewayId}/deviceRegistrations/clientCertificate/p12",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDeviceRegistrationP12CertificateUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDeviceRegistrationP12CertificateUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDeviceRegistrationP12CertificateUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDeviceRegistrationPEMCertificateUsingGET downloads a device registration private key and certificate in p e m format

  The endpoint is used to download gateway specific pem file for the registration of a device.
*/
func (a *Client) GetDeviceRegistrationPEMCertificateUsingGET(params *GetDeviceRegistrationPEMCertificateUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*GetDeviceRegistrationPEMCertificateUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDeviceRegistrationPEMCertificateUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDeviceRegistrationPEMCertificateUsingGET",
		Method:             "GET",
		PathPattern:        "/v1/tenant/{tenantId}/gateways/{gatewayId}/deviceRegistrations/clientCertificate/pem",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDeviceRegistrationPEMCertificateUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDeviceRegistrationPEMCertificateUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDeviceRegistrationPEMCertificateUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDeviceRegistrationPEMCertificateV2UsingGET downloads a device registration private key and certificate in v2 p e m format

  The endpoint is used to download gateway specific V2 pem file for the registration of a device.
*/
func (a *Client) GetDeviceRegistrationPEMCertificateV2UsingGET(params *GetDeviceRegistrationPEMCertificateV2UsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*GetDeviceRegistrationPEMCertificateV2UsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDeviceRegistrationPEMCertificateV2UsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDeviceRegistrationPEMCertificateV2UsingGET",
		Method:             "GET",
		PathPattern:        "/v2/tenant/{tenantId}/gateways/{gatewayId}/deviceRegistrations/clientCertificate/pem",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDeviceRegistrationPEMCertificateV2UsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDeviceRegistrationPEMCertificateV2UsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDeviceRegistrationPEMCertificateV2UsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetGatewayBundleUsingGET returns an o s gi bundle of a gateway

  The endpoint returns the OSGi bundle associated to the given id.
*/
func (a *Client) GetGatewayBundleUsingGET(params *GetGatewayBundleUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*GetGatewayBundleUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetGatewayBundleUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getGatewayBundleUsingGET",
		Method:             "GET",
		PathPattern:        "/v1/tenant/{tenantId}/gateways/{gatewayId}/bundles/{bundleId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetGatewayBundleUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetGatewayBundleUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getGatewayBundleUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetGatewayConfigurationUsingGET returns a gateway configuration

  The endpoint is used to download the gateway specific configuration XML file.
*/
func (a *Client) GetGatewayConfigurationUsingGET(params *GetGatewayConfigurationUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*GetGatewayConfigurationUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetGatewayConfigurationUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getGatewayConfigurationUsingGET",
		Method:             "GET",
		PathPattern:        "/v1/tenant/{tenantId}/gateways/{gatewayId}/configuration",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetGatewayConfigurationUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetGatewayConfigurationUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getGatewayConfigurationUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetGatewayUsingGET returns a gateway

  The endpoint returns the gateway associated to the given id.
*/
func (a *Client) GetGatewayUsingGET(params *GetGatewayUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*GetGatewayUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetGatewayUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getGatewayUsingGET",
		Method:             "GET",
		PathPattern:        "/v1/tenant/{tenantId}/gateways/{gatewayId}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetGatewayUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetGatewayUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getGatewayUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetGatewaysCountUsingGET returns the count of all gateways

  The endpoint returns the count of all gateways.
*/
func (a *Client) GetGatewaysCountUsingGET(params *GetGatewaysCountUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*GetGatewaysCountUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetGatewaysCountUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getGatewaysCountUsingGET",
		Method:             "GET",
		PathPattern:        "/v1/tenant/{tenantId}/gateways/count",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetGatewaysCountUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetGatewaysCountUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getGatewaysCountUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetGatewaysUsingGET returns all gateways
*/
func (a *Client) GetGatewaysUsingGET(params *GetGatewaysUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*GetGatewaysUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetGatewaysUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getGatewaysUsingGET",
		Method:             "GET",
		PathPattern:        "/v1/tenant/{tenantId}/gateways",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetGatewaysUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetGatewaysUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getGatewaysUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListDeviceRegistrationCertificatesUsingGET shows the device registration certificate fingerprints and expiration dates

  The endpoint is used to list the fingerprints and expiration dates for device registration certificates of the given gateway.
*/
func (a *Client) ListDeviceRegistrationCertificatesUsingGET(params *ListDeviceRegistrationCertificatesUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*ListDeviceRegistrationCertificatesUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListDeviceRegistrationCertificatesUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listDeviceRegistrationCertificatesUsingGET",
		Method:             "GET",
		PathPattern:        "/v1/tenant/{tenantId}/gateways/{gatewayId}/deviceRegistrations/clientCertificate",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListDeviceRegistrationCertificatesUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListDeviceRegistrationCertificatesUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listDeviceRegistrationCertificatesUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListGatewayCertificatesUsingGET shows the gateway certificate fingerprints and expiration dates

  The endpoint is used to list the fingerprints and expiration dates for gateway certificates of the given gateway.
*/
func (a *Client) ListGatewayCertificatesUsingGET(params *ListGatewayCertificatesUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*ListGatewayCertificatesUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListGatewayCertificatesUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listGatewayCertificatesUsingGET",
		Method:             "GET",
		PathPattern:        "/v1/tenant/{tenantId}/gateways/{gatewayId}/authentications/clientCertificate",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListGatewayCertificatesUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListGatewayCertificatesUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listGatewayCertificatesUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  RevokeDeviceRegistrationCertificateUsingDELETE revokes a device registration certificate

  The endpoint is used to revoke a device registration certificate of the given gateway.
*/
func (a *Client) RevokeDeviceRegistrationCertificateUsingDELETE(params *RevokeDeviceRegistrationCertificateUsingDELETEParams, authInfo runtime.ClientAuthInfoWriter) (*RevokeDeviceRegistrationCertificateUsingDELETEOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRevokeDeviceRegistrationCertificateUsingDELETEParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "revokeDeviceRegistrationCertificateUsingDELETE",
		Method:             "DELETE",
		PathPattern:        "/v1/tenant/{tenantId}/gateways/{gatewayId}/deviceRegistrations/clientCertificate/{fingerprint}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RevokeDeviceRegistrationCertificateUsingDELETEReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RevokeDeviceRegistrationCertificateUsingDELETEOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for revokeDeviceRegistrationCertificateUsingDELETE: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  RevokeGatewayCertificateUsingDELETE revokes a gateway certificate

  The endpoint is used to revoke a certificate of the given gateway.
*/
func (a *Client) RevokeGatewayCertificateUsingDELETE(params *RevokeGatewayCertificateUsingDELETEParams, authInfo runtime.ClientAuthInfoWriter) (*RevokeGatewayCertificateUsingDELETEOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRevokeGatewayCertificateUsingDELETEParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "revokeGatewayCertificateUsingDELETE",
		Method:             "DELETE",
		PathPattern:        "/v1/tenant/{tenantId}/gateways/{gatewayId}/authentications/clientCertificate/{fingerprint}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RevokeGatewayCertificateUsingDELETEReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RevokeGatewayCertificateUsingDELETEOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for revokeGatewayCertificateUsingDELETE: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  StartGatewayBundleUsingPOST starts an o s gi bundle of a gateway

  This endpoint is used to start the OSGi bundle of the gateway associated to the given id.
*/
func (a *Client) StartGatewayBundleUsingPOST(params *StartGatewayBundleUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter) (*StartGatewayBundleUsingPOSTOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStartGatewayBundleUsingPOSTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "startGatewayBundleUsingPOST",
		Method:             "POST",
		PathPattern:        "/v1/tenant/{tenantId}/gateways/{gatewayId}/bundles/{bundleId}/start",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StartGatewayBundleUsingPOSTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StartGatewayBundleUsingPOSTOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for startGatewayBundleUsingPOST: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  StopGatewayBundleUsingPOST stops an o s gi bundle of a gateway

  This endpoint is used to stop the OSGi bundle of the gateway associated to the given id.
*/
func (a *Client) StopGatewayBundleUsingPOST(params *StopGatewayBundleUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter) (*StopGatewayBundleUsingPOSTOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStopGatewayBundleUsingPOSTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "stopGatewayBundleUsingPOST",
		Method:             "POST",
		PathPattern:        "/v1/tenant/{tenantId}/gateways/{gatewayId}/bundles/{bundleId}/stop",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StopGatewayBundleUsingPOSTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StopGatewayBundleUsingPOSTOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for stopGatewayBundleUsingPOST: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateCustomPropertyForGateway updates a custom property of a gateway

  The endpoint is used to update a custom property of the gateway associated to the given id. The 'key' attribute cannot be modified.
*/
func (a *Client) UpdateCustomPropertyForGateway(params *UpdateCustomPropertyForGatewayParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateCustomPropertyForGatewayOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateCustomPropertyForGatewayParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateCustomPropertyForGateway",
		Method:             "PUT",
		PathPattern:        "/v1/tenant/{tenantId}/gateways/{gatewayId}/customProperties/{key}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateCustomPropertyForGatewayReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateCustomPropertyForGatewayOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateCustomPropertyForGateway: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateGatewayConfigurationUsingPUT updates a gateway configuration

  The endpoint is used to update the gateway specific configuration by uploading a configuration XML file.
*/
func (a *Client) UpdateGatewayConfigurationUsingPUT(params *UpdateGatewayConfigurationUsingPUTParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateGatewayConfigurationUsingPUTOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateGatewayConfigurationUsingPUTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateGatewayConfigurationUsingPUT",
		Method:             "PUT",
		PathPattern:        "/v1/tenant/{tenantId}/gateways/{gatewayId}/configuration",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateGatewayConfigurationUsingPUTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateGatewayConfigurationUsingPUTOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateGatewayConfigurationUsingPUT: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateGatewayUsingPUT updates a gateway

  The endpoint is used to update the gateway associated to the given id with details specified in the request body. To update custom properties, bundles or configuration, use the respective APIs.
*/
func (a *Client) UpdateGatewayUsingPUT(params *UpdateGatewayUsingPUTParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateGatewayUsingPUTOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateGatewayUsingPUTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateGatewayUsingPUT",
		Method:             "PUT",
		PathPattern:        "/v1/tenant/{tenantId}/gateways/{gatewayId}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateGatewayUsingPUTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateGatewayUsingPUTOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateGatewayUsingPUT: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
