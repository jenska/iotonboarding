// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NumberFormatterBean NumberFormatterBean
//
// swagger:model NumberFormatterBean
type NumberFormatterBean struct {

	// The input data type
	// Required: true
	// Enum: [integer long float double boolean date binary string]
	DataType *string `json:"dataType"`

	// The power of 10 which the input value should be multiplied to, in order to get the final output value
	Scale int32 `json:"scale,omitempty"`

	// The quantity which the input value should be added to to get the final output value
	Shift float32 `json:"shift,omitempty"`

	// Is swap byte values
	Swap bool `json:"swap,omitempty"`
}

// Validate validates this number formatter bean
func (m *NumberFormatterBean) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDataType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var numberFormatterBeanTypeDataTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["integer","long","float","double","boolean","date","binary","string"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		numberFormatterBeanTypeDataTypePropEnum = append(numberFormatterBeanTypeDataTypePropEnum, v)
	}
}

const (

	// NumberFormatterBeanDataTypeInteger captures enum value "integer"
	NumberFormatterBeanDataTypeInteger string = "integer"

	// NumberFormatterBeanDataTypeLong captures enum value "long"
	NumberFormatterBeanDataTypeLong string = "long"

	// NumberFormatterBeanDataTypeFloat captures enum value "float"
	NumberFormatterBeanDataTypeFloat string = "float"

	// NumberFormatterBeanDataTypeDouble captures enum value "double"
	NumberFormatterBeanDataTypeDouble string = "double"

	// NumberFormatterBeanDataTypeBoolean captures enum value "boolean"
	NumberFormatterBeanDataTypeBoolean string = "boolean"

	// NumberFormatterBeanDataTypeDate captures enum value "date"
	NumberFormatterBeanDataTypeDate string = "date"

	// NumberFormatterBeanDataTypeBinary captures enum value "binary"
	NumberFormatterBeanDataTypeBinary string = "binary"

	// NumberFormatterBeanDataTypeString captures enum value "string"
	NumberFormatterBeanDataTypeString string = "string"
)

// prop value enum
func (m *NumberFormatterBean) validateDataTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, numberFormatterBeanTypeDataTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *NumberFormatterBean) validateDataType(formats strfmt.Registry) error {

	if err := validate.Required("dataType", "body", m.DataType); err != nil {
		return err
	}

	// value enum
	if err := m.validateDataTypeEnum("dataType", "body", *m.DataType); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *NumberFormatterBean) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NumberFormatterBean) UnmarshalBinary(b []byte) error {
	var res NumberFormatterBean
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
