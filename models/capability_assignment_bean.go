// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CapabilityAssignmentBean CapabilityAssignmentBean
//
// swagger:model CapabilityAssignmentBean
type CapabilityAssignmentBean struct {

	// References the unique identifier of a capability
	// Required: true
	ID *string `json:"id"`

	// The type of the referenced capability
	// Required: true
	// Enum: [measure command]
	Type *string `json:"type"`
}

// Validate validates this capability assignment bean
func (m *CapabilityAssignmentBean) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CapabilityAssignmentBean) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

var capabilityAssignmentBeanTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["measure","command"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		capabilityAssignmentBeanTypeTypePropEnum = append(capabilityAssignmentBeanTypeTypePropEnum, v)
	}
}

const (

	// CapabilityAssignmentBeanTypeMeasure captures enum value "measure"
	CapabilityAssignmentBeanTypeMeasure string = "measure"

	// CapabilityAssignmentBeanTypeCommand captures enum value "command"
	CapabilityAssignmentBeanTypeCommand string = "command"
)

// prop value enum
func (m *CapabilityAssignmentBean) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, capabilityAssignmentBeanTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CapabilityAssignmentBean) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CapabilityAssignmentBean) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CapabilityAssignmentBean) UnmarshalBinary(b []byte) error {
	var res CapabilityAssignmentBean
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
