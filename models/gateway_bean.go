// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GatewayBean GatewayBean
//
// swagger:model GatewayBean
type GatewayBean struct {

	// The alternate ID of IoT gateway.
	// Read Only: true
	AlternateID string `json:"alternateId,omitempty"`

	// Unix time in milliseconds. The timestamp indicates when the IoT Gateway was added to the platform. This field is immutable.
	// Read Only: true
	// Format: date-time
	CreationTimestamp strfmt.DateTime `json:"creationTimestamp,omitempty"`

	// A set of user defined properties represented as key value pair.
	CustomProperties []*GatewayBeanCustomPropertiesItems0 `json:"customProperties"`

	// A unique identifier of IoT Gateway. Is generated by the system. This field is immutable.
	// Read Only: true
	ID string `json:"id,omitempty"`

	// The name of IoT Gateway
	// Required: true
	Name *string `json:"name"`

	// Information about the operating system, where the IoT Gateway is running like name, version and architecture.
	// Read Only: true
	OperatingSystem string `json:"operatingSystem,omitempty"`

	// Id of the protocol supported by the gateway
	// Required: true
	// Read Only: true
	ProtocolID string `json:"protocolId"`

	// The status of the IoT Gateway. This field is immutable.
	// Read Only: true
	// Enum: [online offline unknown]
	Status string `json:"status,omitempty"`

	// The type of the IoT Gateway. This field is immutable.
	// Read Only: true
	// Enum: [cloud edge]
	Type string `json:"type,omitempty"`

	// The version of the IoT Gateway.
	// Read Only: true
	Version string `json:"version,omitempty"`
}

// Validate validates this gateway bean
func (m *GatewayBean) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreationTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCustomProperties(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProtocolID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GatewayBean) validateCreationTimestamp(formats strfmt.Registry) error {

	if swag.IsZero(m.CreationTimestamp) { // not required
		return nil
	}

	if err := validate.FormatOf("creationTimestamp", "body", "date-time", m.CreationTimestamp.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *GatewayBean) validateCustomProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.CustomProperties) { // not required
		return nil
	}

	for i := 0; i < len(m.CustomProperties); i++ {
		if swag.IsZero(m.CustomProperties[i]) { // not required
			continue
		}

		if m.CustomProperties[i] != nil {
			if err := m.CustomProperties[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("customProperties" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *GatewayBean) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *GatewayBean) validateProtocolID(formats strfmt.Registry) error {

	if err := validate.RequiredString("protocolId", "body", string(m.ProtocolID)); err != nil {
		return err
	}

	return nil
}

var gatewayBeanTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["online","offline","unknown"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		gatewayBeanTypeStatusPropEnum = append(gatewayBeanTypeStatusPropEnum, v)
	}
}

const (

	// GatewayBeanStatusOnline captures enum value "online"
	GatewayBeanStatusOnline string = "online"

	// GatewayBeanStatusOffline captures enum value "offline"
	GatewayBeanStatusOffline string = "offline"

	// GatewayBeanStatusUnknown captures enum value "unknown"
	GatewayBeanStatusUnknown string = "unknown"
)

// prop value enum
func (m *GatewayBean) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, gatewayBeanTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *GatewayBean) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

var gatewayBeanTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["cloud","edge"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		gatewayBeanTypeTypePropEnum = append(gatewayBeanTypeTypePropEnum, v)
	}
}

const (

	// GatewayBeanTypeCloud captures enum value "cloud"
	GatewayBeanTypeCloud string = "cloud"

	// GatewayBeanTypeEdge captures enum value "edge"
	GatewayBeanTypeEdge string = "edge"
)

// prop value enum
func (m *GatewayBean) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, gatewayBeanTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *GatewayBean) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GatewayBean) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GatewayBean) UnmarshalBinary(b []byte) error {
	var res GatewayBean
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GatewayBeanCustomPropertiesItems0 CustomPropertyBean
//
// swagger:model GatewayBeanCustomPropertiesItems0
type GatewayBeanCustomPropertiesItems0 struct {

	// A unique identifier of a custom property. Is defined by the user. This field is an immutable.
	// Required: true
	Key *string `json:"key"`

	// Value of the custom property.
	// Required: true
	Value *string `json:"value"`
}

// Validate validates this gateway bean custom properties items0
func (m *GatewayBeanCustomPropertiesItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateKey(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValue(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GatewayBeanCustomPropertiesItems0) validateKey(formats strfmt.Registry) error {

	if err := validate.Required("key", "body", m.Key); err != nil {
		return err
	}

	return nil
}

func (m *GatewayBeanCustomPropertiesItems0) validateValue(formats strfmt.Registry) error {

	if err := validate.Required("value", "body", m.Value); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GatewayBeanCustomPropertiesItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GatewayBeanCustomPropertiesItems0) UnmarshalBinary(b []byte) error {
	var res GatewayBeanCustomPropertiesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
