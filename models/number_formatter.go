// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NumberFormatter NumberFormatter
//
// swagger:model NumberFormatter
type NumberFormatter struct {

	// data type
	// Enum: [integer long float double boolean string binary date]
	DataType string `json:"dataType,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// scale
	Scale int32 `json:"scale,omitempty"`

	// shift
	Shift float32 `json:"shift,omitempty"`

	// swap
	Swap bool `json:"swap,omitempty"`
}

// Validate validates this number formatter
func (m *NumberFormatter) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDataType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var numberFormatterTypeDataTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["integer","long","float","double","boolean","string","binary","date"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		numberFormatterTypeDataTypePropEnum = append(numberFormatterTypeDataTypePropEnum, v)
	}
}

const (

	// NumberFormatterDataTypeInteger captures enum value "integer"
	NumberFormatterDataTypeInteger string = "integer"

	// NumberFormatterDataTypeLong captures enum value "long"
	NumberFormatterDataTypeLong string = "long"

	// NumberFormatterDataTypeFloat captures enum value "float"
	NumberFormatterDataTypeFloat string = "float"

	// NumberFormatterDataTypeDouble captures enum value "double"
	NumberFormatterDataTypeDouble string = "double"

	// NumberFormatterDataTypeBoolean captures enum value "boolean"
	NumberFormatterDataTypeBoolean string = "boolean"

	// NumberFormatterDataTypeString captures enum value "string"
	NumberFormatterDataTypeString string = "string"

	// NumberFormatterDataTypeBinary captures enum value "binary"
	NumberFormatterDataTypeBinary string = "binary"

	// NumberFormatterDataTypeDate captures enum value "date"
	NumberFormatterDataTypeDate string = "date"
)

// prop value enum
func (m *NumberFormatter) validateDataTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, numberFormatterTypeDataTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *NumberFormatter) validateDataType(formats strfmt.Registry) error {

	if swag.IsZero(m.DataType) { // not required
		return nil
	}

	// value enum
	if err := m.validateDataTypeEnum("dataType", "body", m.DataType); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *NumberFormatter) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NumberFormatter) UnmarshalBinary(b []byte) error {
	var res NumberFormatter
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
