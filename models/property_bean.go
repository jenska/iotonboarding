// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PropertyBean PropertyBean
//
// swagger:model PropertyBean
type PropertyBean struct {

	// The data type of the property's value
	// Required: true
	// Enum: [integer long float double boolean date binary string]
	DataType *string `json:"dataType"`

	// formatter
	Formatter *PropertyBeanFormatter `json:"formatter,omitempty"`

	// The name of the property
	// Required: true
	Name *string `json:"name"`

	// The unit of measure of the property's value
	UnitOfMeasure string `json:"unitOfMeasure,omitempty"`
}

// Validate validates this property bean
func (m *PropertyBean) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDataType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFormatter(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var propertyBeanTypeDataTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["integer","long","float","double","boolean","date","binary","string"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		propertyBeanTypeDataTypePropEnum = append(propertyBeanTypeDataTypePropEnum, v)
	}
}

const (

	// PropertyBeanDataTypeInteger captures enum value "integer"
	PropertyBeanDataTypeInteger string = "integer"

	// PropertyBeanDataTypeLong captures enum value "long"
	PropertyBeanDataTypeLong string = "long"

	// PropertyBeanDataTypeFloat captures enum value "float"
	PropertyBeanDataTypeFloat string = "float"

	// PropertyBeanDataTypeDouble captures enum value "double"
	PropertyBeanDataTypeDouble string = "double"

	// PropertyBeanDataTypeBoolean captures enum value "boolean"
	PropertyBeanDataTypeBoolean string = "boolean"

	// PropertyBeanDataTypeDate captures enum value "date"
	PropertyBeanDataTypeDate string = "date"

	// PropertyBeanDataTypeBinary captures enum value "binary"
	PropertyBeanDataTypeBinary string = "binary"

	// PropertyBeanDataTypeString captures enum value "string"
	PropertyBeanDataTypeString string = "string"
)

// prop value enum
func (m *PropertyBean) validateDataTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, propertyBeanTypeDataTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *PropertyBean) validateDataType(formats strfmt.Registry) error {

	if err := validate.Required("dataType", "body", m.DataType); err != nil {
		return err
	}

	// value enum
	if err := m.validateDataTypeEnum("dataType", "body", *m.DataType); err != nil {
		return err
	}

	return nil
}

func (m *PropertyBean) validateFormatter(formats strfmt.Registry) error {

	if swag.IsZero(m.Formatter) { // not required
		return nil
	}

	if m.Formatter != nil {
		if err := m.Formatter.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("formatter")
			}
			return err
		}
	}

	return nil
}

func (m *PropertyBean) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PropertyBean) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PropertyBean) UnmarshalBinary(b []byte) error {
	var res PropertyBean
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PropertyBeanFormatter NumberFormatterBean
//
// swagger:model PropertyBeanFormatter
type PropertyBeanFormatter struct {

	// The input data type
	// Required: true
	// Enum: [integer long float double boolean date binary string]
	DataType *string `json:"dataType"`

	// The power of 10 which the input value should be multiplied to, in order to get the final output value
	Scale int32 `json:"scale,omitempty"`

	// The quantity which the input value should be added to to get the final output value
	Shift float32 `json:"shift,omitempty"`

	// Is swap byte values
	Swap bool `json:"swap,omitempty"`
}

// Validate validates this property bean formatter
func (m *PropertyBeanFormatter) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDataType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var propertyBeanFormatterTypeDataTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["integer","long","float","double","boolean","date","binary","string"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		propertyBeanFormatterTypeDataTypePropEnum = append(propertyBeanFormatterTypeDataTypePropEnum, v)
	}
}

const (

	// PropertyBeanFormatterDataTypeInteger captures enum value "integer"
	PropertyBeanFormatterDataTypeInteger string = "integer"

	// PropertyBeanFormatterDataTypeLong captures enum value "long"
	PropertyBeanFormatterDataTypeLong string = "long"

	// PropertyBeanFormatterDataTypeFloat captures enum value "float"
	PropertyBeanFormatterDataTypeFloat string = "float"

	// PropertyBeanFormatterDataTypeDouble captures enum value "double"
	PropertyBeanFormatterDataTypeDouble string = "double"

	// PropertyBeanFormatterDataTypeBoolean captures enum value "boolean"
	PropertyBeanFormatterDataTypeBoolean string = "boolean"

	// PropertyBeanFormatterDataTypeDate captures enum value "date"
	PropertyBeanFormatterDataTypeDate string = "date"

	// PropertyBeanFormatterDataTypeBinary captures enum value "binary"
	PropertyBeanFormatterDataTypeBinary string = "binary"

	// PropertyBeanFormatterDataTypeString captures enum value "string"
	PropertyBeanFormatterDataTypeString string = "string"
)

// prop value enum
func (m *PropertyBeanFormatter) validateDataTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, propertyBeanFormatterTypeDataTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *PropertyBeanFormatter) validateDataType(formats strfmt.Registry) error {

	if err := validate.Required("formatter"+"."+"dataType", "body", m.DataType); err != nil {
		return err
	}

	// value enum
	if err := m.validateDataTypeEnum("formatter"+"."+"dataType", "body", *m.DataType); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PropertyBeanFormatter) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PropertyBeanFormatter) UnmarshalBinary(b []byte) error {
	var res PropertyBeanFormatter
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
