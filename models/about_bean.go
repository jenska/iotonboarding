// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AboutBean AboutBean
//
// swagger:model AboutBean
type AboutBean struct {

	// Branch.
	// Required: true
	Branch *string `json:"branch"`

	// Date of the build.
	// Required: true
	Date *string `json:"date"`

	// A set of parameters containing information about the configured processing services represented as key value pair.
	// Read Only: true
	Parameters []*AboutBeanParametersItems0 `json:"parameters"`

	// Revision of the branch.
	// Required: true
	Revision *string `json:"revision"`

	// Time in Long format when the instance was last started.
	StartupTimestamp int64 `json:"startupTimestamp,omitempty"`

	// Time in string UTC format when the instance was last started.
	StartupTimestampString string `json:"startupTimestampString,omitempty"`

	// Version of IOT Service.
	// Required: true
	Version *string `json:"version"`
}

// Validate validates this about bean
func (m *AboutBean) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBranch(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateParameters(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRevision(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVersion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AboutBean) validateBranch(formats strfmt.Registry) error {

	if err := validate.Required("branch", "body", m.Branch); err != nil {
		return err
	}

	return nil
}

func (m *AboutBean) validateDate(formats strfmt.Registry) error {

	if err := validate.Required("date", "body", m.Date); err != nil {
		return err
	}

	return nil
}

func (m *AboutBean) validateParameters(formats strfmt.Registry) error {

	if swag.IsZero(m.Parameters) { // not required
		return nil
	}

	for i := 0; i < len(m.Parameters); i++ {
		if swag.IsZero(m.Parameters[i]) { // not required
			continue
		}

		if m.Parameters[i] != nil {
			if err := m.Parameters[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("parameters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AboutBean) validateRevision(formats strfmt.Registry) error {

	if err := validate.Required("revision", "body", m.Revision); err != nil {
		return err
	}

	return nil
}

func (m *AboutBean) validateVersion(formats strfmt.Registry) error {

	if err := validate.Required("version", "body", m.Version); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AboutBean) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AboutBean) UnmarshalBinary(b []byte) error {
	var res AboutBean
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// AboutBeanParametersItems0 Parameter
//
// swagger:model AboutBeanParametersItems0
type AboutBeanParametersItems0 struct {

	// A unique identifier of a parameter. Is defined by the user. This field is an immutable.
	// Required: true
	Key *string `json:"key"`

	// Value of the parameter.
	// Required: true
	Value *string `json:"value"`
}

// Validate validates this about bean parameters items0
func (m *AboutBeanParametersItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateKey(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValue(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AboutBeanParametersItems0) validateKey(formats strfmt.Registry) error {

	if err := validate.Required("key", "body", m.Key); err != nil {
		return err
	}

	return nil
}

func (m *AboutBeanParametersItems0) validateValue(formats strfmt.Registry) error {

	if err := validate.Required("value", "body", m.Value); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AboutBeanParametersItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AboutBeanParametersItems0) UnmarshalBinary(b []byte) error {
	var res AboutBeanParametersItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
