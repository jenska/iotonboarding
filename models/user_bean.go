// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UserBean UserBean
//
// swagger:model UserBean
type UserBean struct {

	// This value identifies if a user has been locked or not.
	// Read Only: true
	AccountNonLocked *bool `json:"accountNonLocked,omitempty"`

	// Authentications of the user.
	// Required: true
	Authentications []*UserBeanAuthenticationsItems0 `json:"authentications"`

	// Unix time in milliseconds. The timestamp indicates when the user was added to the the platform. This field is an immutable.
	// Read Only: true
	// Format: date-time
	CreationTimestamp strfmt.DateTime `json:"creationTimestamp,omitempty"`

	// A set of user defined properties represented as key value pair.
	CustomProperties []*UserBeanCustomPropertiesItems0 `json:"customProperties"`

	// A unique identifier of a user. Is generated by the system and unique across platform tenant. This field is an immutable.
	// Read Only: true
	ID string `json:"id,omitempty"`

	// This value identifies when the user was last updated.
	// Read Only: true
	// Format: date-time
	LastUpdatedTimestamp strfmt.DateTime `json:"lastUpdatedTimestamp,omitempty"`

	// This value identifies the locked timestamp if the account is locked.
	// Read Only: true
	// Format: date-time
	LockedTimestamp strfmt.DateTime `json:"lockedTimestamp,omitempty"`

	// This value identifies the number of login attempts before being locked.
	// Read Only: true
	LoginAttempts int32 `json:"loginAttempts,omitempty"`

	// The name of the user. This field is not case sensitive and is unique across platform tenant.
	// Required: true
	Name *string `json:"name"`

	// A set of global user roles
	Roles []*UserBeanRolesItems0 `json:"roles"`
}

// Validate validates this user bean
func (m *UserBean) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAuthentications(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreationTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCustomProperties(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastUpdatedTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLockedTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRoles(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UserBean) validateAuthentications(formats strfmt.Registry) error {

	if err := validate.Required("authentications", "body", m.Authentications); err != nil {
		return err
	}

	for i := 0; i < len(m.Authentications); i++ {
		if swag.IsZero(m.Authentications[i]) { // not required
			continue
		}

		if m.Authentications[i] != nil {
			if err := m.Authentications[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("authentications" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserBean) validateCreationTimestamp(formats strfmt.Registry) error {

	if swag.IsZero(m.CreationTimestamp) { // not required
		return nil
	}

	if err := validate.FormatOf("creationTimestamp", "body", "date-time", m.CreationTimestamp.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *UserBean) validateCustomProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.CustomProperties) { // not required
		return nil
	}

	for i := 0; i < len(m.CustomProperties); i++ {
		if swag.IsZero(m.CustomProperties[i]) { // not required
			continue
		}

		if m.CustomProperties[i] != nil {
			if err := m.CustomProperties[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("customProperties" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserBean) validateLastUpdatedTimestamp(formats strfmt.Registry) error {

	if swag.IsZero(m.LastUpdatedTimestamp) { // not required
		return nil
	}

	if err := validate.FormatOf("lastUpdatedTimestamp", "body", "date-time", m.LastUpdatedTimestamp.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *UserBean) validateLockedTimestamp(formats strfmt.Registry) error {

	if swag.IsZero(m.LockedTimestamp) { // not required
		return nil
	}

	if err := validate.FormatOf("lockedTimestamp", "body", "date-time", m.LockedTimestamp.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *UserBean) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *UserBean) validateRoles(formats strfmt.Registry) error {

	if swag.IsZero(m.Roles) { // not required
		return nil
	}

	for i := 0; i < len(m.Roles); i++ {
		if swag.IsZero(m.Roles[i]) { // not required
			continue
		}

		if m.Roles[i] != nil {
			if err := m.Roles[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("roles" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *UserBean) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UserBean) UnmarshalBinary(b []byte) error {
	var res UserBean
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// UserBeanAuthenticationsItems0 AuthenticationBean
//
// swagger:model UserBeanAuthenticationsItems0
type UserBeanAuthenticationsItems0 struct {

	// The password for the user.
	Password string `json:"password,omitempty"`

	// The authentication type. Not required when updating user password.
	// Enum: [basic clientCertificate jwt]
	Type string `json:"type,omitempty"`
}

// Validate validates this user bean authentications items0
func (m *UserBeanAuthenticationsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var userBeanAuthenticationsItems0TypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["basic","clientCertificate","jwt"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		userBeanAuthenticationsItems0TypeTypePropEnum = append(userBeanAuthenticationsItems0TypeTypePropEnum, v)
	}
}

const (

	// UserBeanAuthenticationsItems0TypeBasic captures enum value "basic"
	UserBeanAuthenticationsItems0TypeBasic string = "basic"

	// UserBeanAuthenticationsItems0TypeClientCertificate captures enum value "clientCertificate"
	UserBeanAuthenticationsItems0TypeClientCertificate string = "clientCertificate"

	// UserBeanAuthenticationsItems0TypeJwt captures enum value "jwt"
	UserBeanAuthenticationsItems0TypeJwt string = "jwt"
)

// prop value enum
func (m *UserBeanAuthenticationsItems0) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, userBeanAuthenticationsItems0TypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *UserBeanAuthenticationsItems0) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UserBeanAuthenticationsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UserBeanAuthenticationsItems0) UnmarshalBinary(b []byte) error {
	var res UserBeanAuthenticationsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// UserBeanCustomPropertiesItems0 CustomPropertyBean
//
// swagger:model UserBeanCustomPropertiesItems0
type UserBeanCustomPropertiesItems0 struct {

	// A unique identifier of a custom property. Is defined by the user. This field is an immutable.
	// Required: true
	Key *string `json:"key"`

	// Value of the custom property.
	// Required: true
	Value *string `json:"value"`
}

// Validate validates this user bean custom properties items0
func (m *UserBeanCustomPropertiesItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateKey(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValue(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UserBeanCustomPropertiesItems0) validateKey(formats strfmt.Registry) error {

	if err := validate.Required("key", "body", m.Key); err != nil {
		return err
	}

	return nil
}

func (m *UserBeanCustomPropertiesItems0) validateValue(formats strfmt.Registry) error {

	if err := validate.Required("value", "body", m.Value); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UserBeanCustomPropertiesItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UserBeanCustomPropertiesItems0) UnmarshalBinary(b []byte) error {
	var res UserBeanCustomPropertiesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// UserBeanRolesItems0 UserRoleBean
//
// swagger:model UserBeanRolesItems0
type UserBeanRolesItems0 struct {

	// The role of the user.
	// Required: true
	// Enum: [instanceOwner]
	Role *string `json:"role"`
}

// Validate validates this user bean roles items0
func (m *UserBeanRolesItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRole(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var userBeanRolesItems0TypeRolePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["instanceOwner"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		userBeanRolesItems0TypeRolePropEnum = append(userBeanRolesItems0TypeRolePropEnum, v)
	}
}

const (

	// UserBeanRolesItems0RoleInstanceOwner captures enum value "instanceOwner"
	UserBeanRolesItems0RoleInstanceOwner string = "instanceOwner"
)

// prop value enum
func (m *UserBeanRolesItems0) validateRoleEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, userBeanRolesItems0TypeRolePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *UserBeanRolesItems0) validateRole(formats strfmt.Registry) error {

	if err := validate.Required("role", "body", m.Role); err != nil {
		return err
	}

	// value enum
	if err := m.validateRoleEnum("role", "body", *m.Role); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UserBeanRolesItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UserBeanRolesItems0) UnmarshalBinary(b []byte) error {
	var res UserBeanRolesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
