// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// BundleInfoBean BundleInfoBean
//
// swagger:model BundleInfoBean
type BundleInfoBean struct {

	// A unique identifier of a OSGi bundle. Is generated by the system. This field is an immutable.
	ID string `json:"id,omitempty"`

	// The name of the OSGi bundle
	// Required: true
	Name *string `json:"name"`

	// The current state of the OSGi bundle
	// Enum: [active starting stopping resolved installed uninstalled]
	State string `json:"state,omitempty"`
}

// Validate validates this bundle info bean
func (m *BundleInfoBean) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BundleInfoBean) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

var bundleInfoBeanTypeStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["active","starting","stopping","resolved","installed","uninstalled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		bundleInfoBeanTypeStatePropEnum = append(bundleInfoBeanTypeStatePropEnum, v)
	}
}

const (

	// BundleInfoBeanStateActive captures enum value "active"
	BundleInfoBeanStateActive string = "active"

	// BundleInfoBeanStateStarting captures enum value "starting"
	BundleInfoBeanStateStarting string = "starting"

	// BundleInfoBeanStateStopping captures enum value "stopping"
	BundleInfoBeanStateStopping string = "stopping"

	// BundleInfoBeanStateResolved captures enum value "resolved"
	BundleInfoBeanStateResolved string = "resolved"

	// BundleInfoBeanStateInstalled captures enum value "installed"
	BundleInfoBeanStateInstalled string = "installed"

	// BundleInfoBeanStateUninstalled captures enum value "uninstalled"
	BundleInfoBeanStateUninstalled string = "uninstalled"
)

// prop value enum
func (m *BundleInfoBean) validateStateEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, bundleInfoBeanTypeStatePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *BundleInfoBean) validateState(formats strfmt.Registry) error {

	if swag.IsZero(m.State) { // not required
		return nil
	}

	// value enum
	if err := m.validateStateEnum("state", "body", m.State); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BundleInfoBean) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BundleInfoBean) UnmarshalBinary(b []byte) error {
	var res BundleInfoBean
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
