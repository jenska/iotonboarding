// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Capability Capability
//
// swagger:model Capability
type Capability struct {

	// alternate Id
	AlternateID string `json:"alternateId,omitempty"`

	// creation timestamp
	// Format: date-time
	CreationTimestamp strfmt.DateTime `json:"creationTimestamp,omitempty"`

	// cross tenant
	CrossTenant bool `json:"crossTenant,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// properties
	Properties []*CapabilityPropertiesItems0 `json:"properties"`
}

// Validate validates this capability
func (m *Capability) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreationTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Capability) validateCreationTimestamp(formats strfmt.Registry) error {

	if swag.IsZero(m.CreationTimestamp) { // not required
		return nil
	}

	if err := validate.FormatOf("creationTimestamp", "body", "date-time", m.CreationTimestamp.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Capability) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	for i := 0; i < len(m.Properties); i++ {
		if swag.IsZero(m.Properties[i]) { // not required
			continue
		}

		if m.Properties[i] != nil {
			if err := m.Properties[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("properties" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *Capability) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Capability) UnmarshalBinary(b []byte) error {
	var res Capability
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// CapabilityPropertiesItems0 Property
//
// swagger:model CapabilityPropertiesItems0
type CapabilityPropertiesItems0 struct {

	// capability Id
	CapabilityID string `json:"capabilityId,omitempty"`

	// data type
	// Enum: [integer long float double boolean string binary date]
	DataType string `json:"dataType,omitempty"`

	// formatter
	Formatter *CapabilityPropertiesItems0Formatter `json:"formatter,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// uom
	Uom string `json:"uom,omitempty"`
}

// Validate validates this capability properties items0
func (m *CapabilityPropertiesItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDataType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFormatter(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var capabilityPropertiesItems0TypeDataTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["integer","long","float","double","boolean","string","binary","date"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		capabilityPropertiesItems0TypeDataTypePropEnum = append(capabilityPropertiesItems0TypeDataTypePropEnum, v)
	}
}

const (

	// CapabilityPropertiesItems0DataTypeInteger captures enum value "integer"
	CapabilityPropertiesItems0DataTypeInteger string = "integer"

	// CapabilityPropertiesItems0DataTypeLong captures enum value "long"
	CapabilityPropertiesItems0DataTypeLong string = "long"

	// CapabilityPropertiesItems0DataTypeFloat captures enum value "float"
	CapabilityPropertiesItems0DataTypeFloat string = "float"

	// CapabilityPropertiesItems0DataTypeDouble captures enum value "double"
	CapabilityPropertiesItems0DataTypeDouble string = "double"

	// CapabilityPropertiesItems0DataTypeBoolean captures enum value "boolean"
	CapabilityPropertiesItems0DataTypeBoolean string = "boolean"

	// CapabilityPropertiesItems0DataTypeString captures enum value "string"
	CapabilityPropertiesItems0DataTypeString string = "string"

	// CapabilityPropertiesItems0DataTypeBinary captures enum value "binary"
	CapabilityPropertiesItems0DataTypeBinary string = "binary"

	// CapabilityPropertiesItems0DataTypeDate captures enum value "date"
	CapabilityPropertiesItems0DataTypeDate string = "date"
)

// prop value enum
func (m *CapabilityPropertiesItems0) validateDataTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, capabilityPropertiesItems0TypeDataTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CapabilityPropertiesItems0) validateDataType(formats strfmt.Registry) error {

	if swag.IsZero(m.DataType) { // not required
		return nil
	}

	// value enum
	if err := m.validateDataTypeEnum("dataType", "body", m.DataType); err != nil {
		return err
	}

	return nil
}

func (m *CapabilityPropertiesItems0) validateFormatter(formats strfmt.Registry) error {

	if swag.IsZero(m.Formatter) { // not required
		return nil
	}

	if m.Formatter != nil {
		if err := m.Formatter.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("formatter")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CapabilityPropertiesItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CapabilityPropertiesItems0) UnmarshalBinary(b []byte) error {
	var res CapabilityPropertiesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// CapabilityPropertiesItems0Formatter NumberFormatter
//
// swagger:model CapabilityPropertiesItems0Formatter
type CapabilityPropertiesItems0Formatter struct {

	// data type
	// Enum: [integer long float double boolean string binary date]
	DataType string `json:"dataType,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// scale
	Scale int32 `json:"scale,omitempty"`

	// shift
	Shift float32 `json:"shift,omitempty"`

	// swap
	Swap bool `json:"swap,omitempty"`
}

// Validate validates this capability properties items0 formatter
func (m *CapabilityPropertiesItems0Formatter) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDataType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var capabilityPropertiesItems0FormatterTypeDataTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["integer","long","float","double","boolean","string","binary","date"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		capabilityPropertiesItems0FormatterTypeDataTypePropEnum = append(capabilityPropertiesItems0FormatterTypeDataTypePropEnum, v)
	}
}

const (

	// CapabilityPropertiesItems0FormatterDataTypeInteger captures enum value "integer"
	CapabilityPropertiesItems0FormatterDataTypeInteger string = "integer"

	// CapabilityPropertiesItems0FormatterDataTypeLong captures enum value "long"
	CapabilityPropertiesItems0FormatterDataTypeLong string = "long"

	// CapabilityPropertiesItems0FormatterDataTypeFloat captures enum value "float"
	CapabilityPropertiesItems0FormatterDataTypeFloat string = "float"

	// CapabilityPropertiesItems0FormatterDataTypeDouble captures enum value "double"
	CapabilityPropertiesItems0FormatterDataTypeDouble string = "double"

	// CapabilityPropertiesItems0FormatterDataTypeBoolean captures enum value "boolean"
	CapabilityPropertiesItems0FormatterDataTypeBoolean string = "boolean"

	// CapabilityPropertiesItems0FormatterDataTypeString captures enum value "string"
	CapabilityPropertiesItems0FormatterDataTypeString string = "string"

	// CapabilityPropertiesItems0FormatterDataTypeBinary captures enum value "binary"
	CapabilityPropertiesItems0FormatterDataTypeBinary string = "binary"

	// CapabilityPropertiesItems0FormatterDataTypeDate captures enum value "date"
	CapabilityPropertiesItems0FormatterDataTypeDate string = "date"
)

// prop value enum
func (m *CapabilityPropertiesItems0Formatter) validateDataTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, capabilityPropertiesItems0FormatterTypeDataTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CapabilityPropertiesItems0Formatter) validateDataType(formats strfmt.Registry) error {

	if swag.IsZero(m.DataType) { // not required
		return nil
	}

	// value enum
	if err := m.validateDataTypeEnum("formatter"+"."+"dataType", "body", m.DataType); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CapabilityPropertiesItems0Formatter) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CapabilityPropertiesItems0Formatter) UnmarshalBinary(b []byte) error {
	var res CapabilityPropertiesItems0Formatter
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
