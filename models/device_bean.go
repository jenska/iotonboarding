// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DeviceBean DeviceBean
//
// swagger:model DeviceBean
type DeviceBean struct {

	// The alternate ID of the device (e.g., serial number crafted into the device). This field is unique across gateway.
	AlternateID string `json:"alternateId,omitempty"`

	// Authentications of the device.
	// Read Only: true
	Authentications []*DeviceBeanAuthenticationsItems0 `json:"authentications"`

	// Authorizations of the device.
	// Read Only: true
	Authorizations []*DeviceBeanAuthorizationsItems0 `json:"authorizations"`

	// Unix time in milliseconds. The timestamp indicates when the device was added to the the platform. This field is an immutable.
	// Read Only: true
	// Format: date-time
	CreationTimestamp strfmt.DateTime `json:"creationTimestamp,omitempty"`

	// A set of user defined properties represented as key value pair.
	CustomProperties []*DeviceBeanCustomPropertiesItems0 `json:"customProperties"`

	// The ID of the associated gateway. This field is an immutable.
	// Required: true
	GatewayID *string `json:"gatewayId"`

	// A unique identifier of a device. Is generated by the system and unique across platform tenant. This field is an immutable.
	// Read Only: true
	ID string `json:"id,omitempty"`

	// The name of the device.
	// Required: true
	Name *string `json:"name"`

	// The online status
	// Read Only: true
	Online *bool `json:"online,omitempty"`

	// The set of sensors that compose the device. DeviceId is not required to be given to sensor while creating device and sensor together
	Sensors []*DeviceBeanSensorsItems0 `json:"sensors"`
}

// Validate validates this device bean
func (m *DeviceBean) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAuthentications(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAuthorizations(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreationTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCustomProperties(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGatewayID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSensors(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DeviceBean) validateAuthentications(formats strfmt.Registry) error {

	if swag.IsZero(m.Authentications) { // not required
		return nil
	}

	for i := 0; i < len(m.Authentications); i++ {
		if swag.IsZero(m.Authentications[i]) { // not required
			continue
		}

		if m.Authentications[i] != nil {
			if err := m.Authentications[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("authentications" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DeviceBean) validateAuthorizations(formats strfmt.Registry) error {

	if swag.IsZero(m.Authorizations) { // not required
		return nil
	}

	for i := 0; i < len(m.Authorizations); i++ {
		if swag.IsZero(m.Authorizations[i]) { // not required
			continue
		}

		if m.Authorizations[i] != nil {
			if err := m.Authorizations[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("authorizations" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DeviceBean) validateCreationTimestamp(formats strfmt.Registry) error {

	if swag.IsZero(m.CreationTimestamp) { // not required
		return nil
	}

	if err := validate.FormatOf("creationTimestamp", "body", "date-time", m.CreationTimestamp.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *DeviceBean) validateCustomProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.CustomProperties) { // not required
		return nil
	}

	for i := 0; i < len(m.CustomProperties); i++ {
		if swag.IsZero(m.CustomProperties[i]) { // not required
			continue
		}

		if m.CustomProperties[i] != nil {
			if err := m.CustomProperties[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("customProperties" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DeviceBean) validateGatewayID(formats strfmt.Registry) error {

	if err := validate.Required("gatewayId", "body", m.GatewayID); err != nil {
		return err
	}

	return nil
}

func (m *DeviceBean) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *DeviceBean) validateSensors(formats strfmt.Registry) error {

	if swag.IsZero(m.Sensors) { // not required
		return nil
	}

	for i := 0; i < len(m.Sensors); i++ {
		if swag.IsZero(m.Sensors[i]) { // not required
			continue
		}

		if m.Sensors[i] != nil {
			if err := m.Sensors[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("sensors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *DeviceBean) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DeviceBean) UnmarshalBinary(b []byte) error {
	var res DeviceBean
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// DeviceBeanAuthenticationsItems0 AuthenticationBean
//
// swagger:model DeviceBeanAuthenticationsItems0
type DeviceBeanAuthenticationsItems0 struct {

	// The password for the user.
	Password string `json:"password,omitempty"`

	// The authentication type. Not required when updating user password.
	// Enum: [basic clientCertificate jwt]
	Type string `json:"type,omitempty"`
}

// Validate validates this device bean authentications items0
func (m *DeviceBeanAuthenticationsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var deviceBeanAuthenticationsItems0TypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["basic","clientCertificate","jwt"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		deviceBeanAuthenticationsItems0TypeTypePropEnum = append(deviceBeanAuthenticationsItems0TypeTypePropEnum, v)
	}
}

const (

	// DeviceBeanAuthenticationsItems0TypeBasic captures enum value "basic"
	DeviceBeanAuthenticationsItems0TypeBasic string = "basic"

	// DeviceBeanAuthenticationsItems0TypeClientCertificate captures enum value "clientCertificate"
	DeviceBeanAuthenticationsItems0TypeClientCertificate string = "clientCertificate"

	// DeviceBeanAuthenticationsItems0TypeJwt captures enum value "jwt"
	DeviceBeanAuthenticationsItems0TypeJwt string = "jwt"
)

// prop value enum
func (m *DeviceBeanAuthenticationsItems0) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, deviceBeanAuthenticationsItems0TypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *DeviceBeanAuthenticationsItems0) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DeviceBeanAuthenticationsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DeviceBeanAuthenticationsItems0) UnmarshalBinary(b []byte) error {
	var res DeviceBeanAuthenticationsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// DeviceBeanAuthorizationsItems0 AuthorizationBean
//
// swagger:model DeviceBeanAuthorizationsItems0
type DeviceBeanAuthorizationsItems0 struct {

	// The type of device authorization policies
	// Enum: [router]
	Type string `json:"type,omitempty"`
}

// Validate validates this device bean authorizations items0
func (m *DeviceBeanAuthorizationsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var deviceBeanAuthorizationsItems0TypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["router"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		deviceBeanAuthorizationsItems0TypeTypePropEnum = append(deviceBeanAuthorizationsItems0TypeTypePropEnum, v)
	}
}

const (

	// DeviceBeanAuthorizationsItems0TypeRouter captures enum value "router"
	DeviceBeanAuthorizationsItems0TypeRouter string = "router"
)

// prop value enum
func (m *DeviceBeanAuthorizationsItems0) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, deviceBeanAuthorizationsItems0TypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *DeviceBeanAuthorizationsItems0) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DeviceBeanAuthorizationsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DeviceBeanAuthorizationsItems0) UnmarshalBinary(b []byte) error {
	var res DeviceBeanAuthorizationsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// DeviceBeanCustomPropertiesItems0 CustomPropertyBean
//
// swagger:model DeviceBeanCustomPropertiesItems0
type DeviceBeanCustomPropertiesItems0 struct {

	// A unique identifier of a custom property. Is defined by the user. This field is an immutable.
	// Required: true
	Key *string `json:"key"`

	// Value of the custom property.
	// Required: true
	Value *string `json:"value"`
}

// Validate validates this device bean custom properties items0
func (m *DeviceBeanCustomPropertiesItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateKey(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValue(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DeviceBeanCustomPropertiesItems0) validateKey(formats strfmt.Registry) error {

	if err := validate.Required("key", "body", m.Key); err != nil {
		return err
	}

	return nil
}

func (m *DeviceBeanCustomPropertiesItems0) validateValue(formats strfmt.Registry) error {

	if err := validate.Required("value", "body", m.Value); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DeviceBeanCustomPropertiesItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DeviceBeanCustomPropertiesItems0) UnmarshalBinary(b []byte) error {
	var res DeviceBeanCustomPropertiesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// DeviceBeanSensorsItems0 SensorBean
//
// swagger:model DeviceBeanSensorsItems0
type DeviceBeanSensorsItems0 struct {

	// The alternate ID of the sensor. This field is unique across device.
	AlternateID string `json:"alternateId,omitempty"`

	// A set of user defined properties represented as key value pair.
	CustomProperties []*DeviceBeanSensorsItems0CustomPropertiesItems0 `json:"customProperties"`

	// The ID of the related device. DeviceId is not required to be given to sensor while creating device and sensor together
	// Required: true
	DeviceID *string `json:"deviceId"`

	// Identifier of a sensor. Is generated by the system and unique across platform tenant. This field is an immutable.
	// Read Only: true
	ID string `json:"id,omitempty"`

	// The name of the sensor
	// Required: true
	Name *string `json:"name"`

	// The ID of the SensorType
	// Required: true
	SensorTypeID *string `json:"sensorTypeId"`
}

// Validate validates this device bean sensors items0
func (m *DeviceBeanSensorsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCustomProperties(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeviceID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSensorTypeID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DeviceBeanSensorsItems0) validateCustomProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.CustomProperties) { // not required
		return nil
	}

	for i := 0; i < len(m.CustomProperties); i++ {
		if swag.IsZero(m.CustomProperties[i]) { // not required
			continue
		}

		if m.CustomProperties[i] != nil {
			if err := m.CustomProperties[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("customProperties" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DeviceBeanSensorsItems0) validateDeviceID(formats strfmt.Registry) error {

	if err := validate.Required("deviceId", "body", m.DeviceID); err != nil {
		return err
	}

	return nil
}

func (m *DeviceBeanSensorsItems0) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *DeviceBeanSensorsItems0) validateSensorTypeID(formats strfmt.Registry) error {

	if err := validate.Required("sensorTypeId", "body", m.SensorTypeID); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DeviceBeanSensorsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DeviceBeanSensorsItems0) UnmarshalBinary(b []byte) error {
	var res DeviceBeanSensorsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// DeviceBeanSensorsItems0CustomPropertiesItems0 CustomPropertyBean
//
// swagger:model DeviceBeanSensorsItems0CustomPropertiesItems0
type DeviceBeanSensorsItems0CustomPropertiesItems0 struct {

	// A unique identifier of a custom property. Is defined by the user. This field is an immutable.
	// Required: true
	Key *string `json:"key"`

	// Value of the custom property.
	// Required: true
	Value *string `json:"value"`
}

// Validate validates this device bean sensors items0 custom properties items0
func (m *DeviceBeanSensorsItems0CustomPropertiesItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateKey(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValue(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DeviceBeanSensorsItems0CustomPropertiesItems0) validateKey(formats strfmt.Registry) error {

	if err := validate.Required("key", "body", m.Key); err != nil {
		return err
	}

	return nil
}

func (m *DeviceBeanSensorsItems0CustomPropertiesItems0) validateValue(formats strfmt.Registry) error {

	if err := validate.Required("value", "body", m.Value); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DeviceBeanSensorsItems0CustomPropertiesItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DeviceBeanSensorsItems0CustomPropertiesItems0) UnmarshalBinary(b []byte) error {
	var res DeviceBeanSensorsItems0CustomPropertiesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
