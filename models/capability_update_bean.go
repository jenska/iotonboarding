// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CapabilityUpdateBean CapabilityUpdateBean
//
// swagger:model CapabilityUpdateBean
type CapabilityUpdateBean struct {

	// The alternate ID of the capability. This field is unique across sensor type.
	AlternateID string `json:"alternateId,omitempty"`

	// Identifier of a capability. Is generated by the system and unique across platform tenant. This field is an immutable.
	// Read Only: true
	ID string `json:"id,omitempty"`

	// The name of the capability.
	// Required: true
	Name *string `json:"name"`

	// properties
	// Read Only: true
	Properties []*CapabilityUpdateBeanPropertiesItems0 `json:"properties"`
}

// Validate validates this capability update bean
func (m *CapabilityUpdateBean) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CapabilityUpdateBean) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *CapabilityUpdateBean) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	for i := 0; i < len(m.Properties); i++ {
		if swag.IsZero(m.Properties[i]) { // not required
			continue
		}

		if m.Properties[i] != nil {
			if err := m.Properties[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("properties" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *CapabilityUpdateBean) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CapabilityUpdateBean) UnmarshalBinary(b []byte) error {
	var res CapabilityUpdateBean
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// CapabilityUpdateBeanPropertiesItems0 PropertyBean
//
// swagger:model CapabilityUpdateBeanPropertiesItems0
type CapabilityUpdateBeanPropertiesItems0 struct {

	// The data type of the property's value
	// Required: true
	// Enum: [integer long float double boolean date binary string]
	DataType *string `json:"dataType"`

	// formatter
	Formatter *CapabilityUpdateBeanPropertiesItems0Formatter `json:"formatter,omitempty"`

	// The name of the property
	// Required: true
	Name *string `json:"name"`

	// The unit of measure of the property's value
	UnitOfMeasure string `json:"unitOfMeasure,omitempty"`
}

// Validate validates this capability update bean properties items0
func (m *CapabilityUpdateBeanPropertiesItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDataType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFormatter(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var capabilityUpdateBeanPropertiesItems0TypeDataTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["integer","long","float","double","boolean","date","binary","string"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		capabilityUpdateBeanPropertiesItems0TypeDataTypePropEnum = append(capabilityUpdateBeanPropertiesItems0TypeDataTypePropEnum, v)
	}
}

const (

	// CapabilityUpdateBeanPropertiesItems0DataTypeInteger captures enum value "integer"
	CapabilityUpdateBeanPropertiesItems0DataTypeInteger string = "integer"

	// CapabilityUpdateBeanPropertiesItems0DataTypeLong captures enum value "long"
	CapabilityUpdateBeanPropertiesItems0DataTypeLong string = "long"

	// CapabilityUpdateBeanPropertiesItems0DataTypeFloat captures enum value "float"
	CapabilityUpdateBeanPropertiesItems0DataTypeFloat string = "float"

	// CapabilityUpdateBeanPropertiesItems0DataTypeDouble captures enum value "double"
	CapabilityUpdateBeanPropertiesItems0DataTypeDouble string = "double"

	// CapabilityUpdateBeanPropertiesItems0DataTypeBoolean captures enum value "boolean"
	CapabilityUpdateBeanPropertiesItems0DataTypeBoolean string = "boolean"

	// CapabilityUpdateBeanPropertiesItems0DataTypeDate captures enum value "date"
	CapabilityUpdateBeanPropertiesItems0DataTypeDate string = "date"

	// CapabilityUpdateBeanPropertiesItems0DataTypeBinary captures enum value "binary"
	CapabilityUpdateBeanPropertiesItems0DataTypeBinary string = "binary"

	// CapabilityUpdateBeanPropertiesItems0DataTypeString captures enum value "string"
	CapabilityUpdateBeanPropertiesItems0DataTypeString string = "string"
)

// prop value enum
func (m *CapabilityUpdateBeanPropertiesItems0) validateDataTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, capabilityUpdateBeanPropertiesItems0TypeDataTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CapabilityUpdateBeanPropertiesItems0) validateDataType(formats strfmt.Registry) error {

	if err := validate.Required("dataType", "body", m.DataType); err != nil {
		return err
	}

	// value enum
	if err := m.validateDataTypeEnum("dataType", "body", *m.DataType); err != nil {
		return err
	}

	return nil
}

func (m *CapabilityUpdateBeanPropertiesItems0) validateFormatter(formats strfmt.Registry) error {

	if swag.IsZero(m.Formatter) { // not required
		return nil
	}

	if m.Formatter != nil {
		if err := m.Formatter.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("formatter")
			}
			return err
		}
	}

	return nil
}

func (m *CapabilityUpdateBeanPropertiesItems0) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CapabilityUpdateBeanPropertiesItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CapabilityUpdateBeanPropertiesItems0) UnmarshalBinary(b []byte) error {
	var res CapabilityUpdateBeanPropertiesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// CapabilityUpdateBeanPropertiesItems0Formatter NumberFormatterBean
//
// swagger:model CapabilityUpdateBeanPropertiesItems0Formatter
type CapabilityUpdateBeanPropertiesItems0Formatter struct {

	// The input data type
	// Required: true
	// Enum: [integer long float double boolean date binary string]
	DataType *string `json:"dataType"`

	// The power of 10 which the input value should be multiplied to, in order to get the final output value
	Scale int32 `json:"scale,omitempty"`

	// The quantity which the input value should be added to to get the final output value
	Shift float32 `json:"shift,omitempty"`

	// Is swap byte values
	Swap bool `json:"swap,omitempty"`
}

// Validate validates this capability update bean properties items0 formatter
func (m *CapabilityUpdateBeanPropertiesItems0Formatter) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDataType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var capabilityUpdateBeanPropertiesItems0FormatterTypeDataTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["integer","long","float","double","boolean","date","binary","string"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		capabilityUpdateBeanPropertiesItems0FormatterTypeDataTypePropEnum = append(capabilityUpdateBeanPropertiesItems0FormatterTypeDataTypePropEnum, v)
	}
}

const (

	// CapabilityUpdateBeanPropertiesItems0FormatterDataTypeInteger captures enum value "integer"
	CapabilityUpdateBeanPropertiesItems0FormatterDataTypeInteger string = "integer"

	// CapabilityUpdateBeanPropertiesItems0FormatterDataTypeLong captures enum value "long"
	CapabilityUpdateBeanPropertiesItems0FormatterDataTypeLong string = "long"

	// CapabilityUpdateBeanPropertiesItems0FormatterDataTypeFloat captures enum value "float"
	CapabilityUpdateBeanPropertiesItems0FormatterDataTypeFloat string = "float"

	// CapabilityUpdateBeanPropertiesItems0FormatterDataTypeDouble captures enum value "double"
	CapabilityUpdateBeanPropertiesItems0FormatterDataTypeDouble string = "double"

	// CapabilityUpdateBeanPropertiesItems0FormatterDataTypeBoolean captures enum value "boolean"
	CapabilityUpdateBeanPropertiesItems0FormatterDataTypeBoolean string = "boolean"

	// CapabilityUpdateBeanPropertiesItems0FormatterDataTypeDate captures enum value "date"
	CapabilityUpdateBeanPropertiesItems0FormatterDataTypeDate string = "date"

	// CapabilityUpdateBeanPropertiesItems0FormatterDataTypeBinary captures enum value "binary"
	CapabilityUpdateBeanPropertiesItems0FormatterDataTypeBinary string = "binary"

	// CapabilityUpdateBeanPropertiesItems0FormatterDataTypeString captures enum value "string"
	CapabilityUpdateBeanPropertiesItems0FormatterDataTypeString string = "string"
)

// prop value enum
func (m *CapabilityUpdateBeanPropertiesItems0Formatter) validateDataTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, capabilityUpdateBeanPropertiesItems0FormatterTypeDataTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CapabilityUpdateBeanPropertiesItems0Formatter) validateDataType(formats strfmt.Registry) error {

	if err := validate.Required("formatter"+"."+"dataType", "body", m.DataType); err != nil {
		return err
	}

	// value enum
	if err := m.validateDataTypeEnum("formatter"+"."+"dataType", "body", *m.DataType); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CapabilityUpdateBeanPropertiesItems0Formatter) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CapabilityUpdateBeanPropertiesItems0Formatter) UnmarshalBinary(b []byte) error {
	var res CapabilityUpdateBeanPropertiesItems0Formatter
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
